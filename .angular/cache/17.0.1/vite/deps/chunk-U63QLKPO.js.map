{
  "version": 3,
  "sources": ["../../../../../../../src/cdk/platform/platform.ts", "../../../../../../../src/cdk/platform/platform-module.ts", "../../../../../../../src/cdk/platform/features/input-types.ts", "../../../../../../../src/cdk/platform/features/passive-listeners.ts", "../../../../../../../src/cdk/platform/features/scrolling.ts", "../../../../../../../src/cdk/platform/features/shadow-dom.ts", "../../../../../../../src/cdk/platform/features/test-environment.ts", "../../../../../../../src/cdk/platform/platform_public_index.ts", "../../../../../../../src/cdk/coercion/boolean-property.ts", "../../../../../../../src/cdk/coercion/number-property.ts", "../../../../../../../src/cdk/coercion/array.ts", "../../../../../../../src/cdk/coercion/css-pixel-value.ts", "../../../../../../../src/cdk/coercion/element.ts", "../../../../../../../src/cdk/coercion/string-array.ts", "../../../../../../../src/cdk/observers/observe-content.ts", "../../../../../../../src/cdk/observers/observers_public_index.ts", "../../../../../../../src/cdk/layout/layout-module.ts", "../../../../../../../src/cdk/layout/media-matcher.ts", "../../../../../../../src/cdk/layout/breakpoints-observer.ts", "../../../../../../../src/cdk/layout/breakpoints.ts", "../../../../../../../src/cdk/layout/layout_public_index.ts", "../../../../../../../src/cdk/a11y/aria-describer/aria-reference.ts", "../../../../../../../src/cdk/a11y/aria-describer/aria-describer.ts", "../../../../../../../src/cdk/a11y/key-manager/list-key-manager.ts", "../../../../../../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts", "../../../../../../../src/cdk/a11y/key-manager/focus-key-manager.ts", "../../../../../../../src/cdk/a11y/interactivity-checker/interactivity-checker.ts", "../../../../../../../src/cdk/a11y/focus-trap/focus-trap.ts", "../../../../../../../src/cdk/a11y/focus-trap/configurable-focus-trap.ts", "../../../../../../../src/cdk/a11y/focus-trap/focus-trap-inert-strategy.ts", "../../../../../../../src/cdk/a11y/focus-trap/event-listener-inert-strategy.ts", "../../../../../../../src/cdk/a11y/focus-trap/focus-trap-manager.ts", "../../../../../../../src/cdk/a11y/focus-trap/configurable-focus-trap-factory.ts", "../../../../../../../src/cdk/a11y/fake-event-detection.ts", "../../../../../../../src/cdk/a11y/input-modality/input-modality-detector.ts", "../../../../../../../src/cdk/a11y/live-announcer/live-announcer-tokens.ts", "../../../../../../../src/cdk/a11y/live-announcer/live-announcer.ts", "../../../../../../../src/cdk/a11y/focus-monitor/focus-monitor.ts", "../../../../../../../src/cdk/a11y/high-contrast-mode/high-contrast-mode-detector.ts", "../../../../../../../src/cdk/a11y/a11y-module.ts", "../../../../../../../src/cdk/a11y/a11y_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser} from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  hasV8BreakIterator = typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator;\n} catch {\n  hasV8BreakIterator = false;\n}\n\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n@Injectable({providedIn: 'root'})\nexport class Platform {\n  // We want to use the Angular platform check because if the Document is shimmed\n  // without the navigator, the following checks will fail. This is preferred because\n  // sometimes the Document may be shimmed without the user's knowledge or intention\n  /** Whether the Angular application is being rendered in the browser. */\n  isBrowser: boolean = this._platformId\n    ? isPlatformBrowser(this._platformId)\n    : typeof document === 'object' && !!document;\n\n  /** Whether the current browser is Microsoft Edge. */\n  EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n\n  /** Whether the current rendering engine is Microsoft Trident. */\n  TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  /** Whether the current rendering engine is Blink. */\n  BLINK: boolean =\n    this.isBrowser &&\n    !!((window as any).chrome || hasV8BreakIterator) &&\n    typeof CSS !== 'undefined' &&\n    !this.EDGE &&\n    !this.TRIDENT;\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  /** Whether the current rendering engine is WebKit. */\n  WEBKIT: boolean =\n    this.isBrowser &&\n    /AppleWebKit/i.test(navigator.userAgent) &&\n    !this.BLINK &&\n    !this.EDGE &&\n    !this.TRIDENT;\n\n  /** Whether the current platform is Apple iOS. */\n  IOS: boolean =\n    this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  /** Whether the current browser is Firefox. */\n  FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  /** Whether the current platform is Android. */\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  /** Whether the current browser is Safari. */\n  SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n\n  constructor(@Inject(PLATFORM_ID) private _platformId: Object) {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\n@NgModule({})\nexport class PlatformModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes: Set<string>;\n\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n\n/** @returns The input types supported by this browser. */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(\n    candidateInputTypes.filter(value => {\n      featureTestInput.setAttribute('type', value);\n      return featureTestInput.type === value;\n    }),\n  );\n\n  return supportedInputTypes;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents: boolean;\n\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nexport function supportsPassiveEventListeners(): boolean {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener(\n        'test',\n        null!,\n        Object.defineProperty({}, 'passive', {\n          get: () => (supportsPassiveEvents = true),\n        }),\n      );\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nexport function normalizePassiveListenerOptions(\n  options: AddEventListenerOptions,\n): AddEventListenerOptions | boolean {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nexport const enum RtlScrollAxisType {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  NORMAL,\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  NEGATED,\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  INVERTED,\n}\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType: RtlScrollAxisType | undefined;\n\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported: boolean | undefined;\n\n/** Check whether the browser supports scroll behaviors. */\nexport function supportsScrollBehavior(): boolean {\n  if (scrollBehaviorSupported == null) {\n    // If we're not in the browser, it can't be supported. Also check for `Element`, because\n    // some projects stub out the global `document` during SSR which can throw us off.\n    if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n      scrollBehaviorSupported = false;\n      return scrollBehaviorSupported;\n    }\n\n    // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n    if ('scrollBehavior' in document.documentElement!.style) {\n      scrollBehaviorSupported = true;\n    } else {\n      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n      // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n      const scrollToFunction: Function | undefined = Element.prototype.scrollTo;\n\n      if (scrollToFunction) {\n        // We can detect if the function has been polyfilled by calling `toString` on it. Native\n        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n        // polyfilled functions as supporting scroll behavior.\n        scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n      } else {\n        scrollBehaviorSupported = false;\n      }\n    }\n  }\n\n  return scrollBehaviorSupported;\n}\n\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nexport function getRtlScrollAxisType(): RtlScrollAxisType {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return RtlScrollAxisType.NORMAL;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    const scrollContainer = document.createElement('div');\n    const containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n\n    const content = document.createElement('div');\n    const contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType =\n        scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n    }\n\n    scrollContainer.remove();\n  }\n  return rtlScrollAxisType;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet shadowDomIsSupported: boolean;\n\n/** Checks whether the user's browser support Shadow DOM. */\nexport function _supportsShadowDom(): boolean {\n  if (shadowDomIsSupported == null) {\n    const head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && ((head as any).createShadowRoot || head.attachShadow));\n  }\n\n  return shadowDomIsSupported;\n}\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement): ShadowRoot | null {\n  if (_supportsShadowDom()) {\n    const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n    // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nexport function _getFocusedElementPierceShadowDom(): HTMLElement | null {\n  let activeElement =\n    typeof document !== 'undefined' && document\n      ? (document.activeElement as HTMLElement | null)\n      : null;\n\n  while (activeElement && activeElement.shadowRoot) {\n    const newActiveElement = activeElement.shadowRoot.activeElement as HTMLElement | null;\n    if (newActiveElement === activeElement) {\n      break;\n    } else {\n      activeElement = newActiveElement;\n    }\n  }\n\n  return activeElement;\n}\n\n/** Gets the target of an event while accounting for Shadow DOM. */\nexport function _getEventTarget<T extends EventTarget>(event: Event): T | null {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return (event.composedPath ? event.composedPath()[0] : event.target) as T | null;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets whether the code is currently running in a test environment. */\nexport function _isTestEnvironment(): boolean {\n  // We can't use `declare const` because it causes conflicts inside Google with the real typings\n  // for these symbols and we can't read them off the global object, because they don't appear to\n  // be attached there for some runners like Jest.\n  // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)\n  return (\n    // @ts-ignore\n    (typeof __karma__ !== 'undefined' && !!__karma__) ||\n    // @ts-ignore\n    (typeof jasmine !== 'undefined' && !!jasmine) ||\n    // @ts-ignore\n    (typeof jest !== 'undefined' && !!jest) ||\n    // @ts-ignore\n    (typeof Mocha !== 'undefined' && !!Mocha)\n  );\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type describing the allowed values for a boolean input.\n * @docs-private\n */\nexport type BooleanInput = string | boolean | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type describing the allowed values for a number input\n * @docs-private\n */\nexport type NumberInput = string | number | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a number. */\nexport function coerceNumberProperty(value: any): number;\nexport function coerceNumberProperty<D>(value: any, fallback: D): number | D;\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nexport function _isNumberValue(value: any): boolean {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(value as any)) && !isNaN(Number(value));\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Wraps the provided value in an array, unless the provided value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[];\nexport function coerceArray<T>(value: T | readonly T[]): readonly T[];\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Coerces a value to a CSS pixel value. */\nexport function coerceCssPixelValue(value: any): string {\n  if (value == null) {\n    return '';\n  }\n\n  return typeof value === 'string' ? value : `${value}px`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nexport function coerceElement<T>(elementOrRef: ElementRef<T> | T): T {\n  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nexport function coerceStringArray(value: any, separator: string | RegExp = /\\s+/): string[] {\n  const result = [];\n\n  if (value != null) {\n    const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n    for (const sourceValue of sourceValues) {\n      const trimmedString = `${sourceValue}`.trim();\n      if (trimmedString) {\n        result.push(trimmedString);\n      }\n    }\n  }\n\n  return result;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceElement, NumberInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n  booleanAttribute,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<\n    Element,\n    {\n      observer: MutationObserver | null;\n      readonly stream: Subject<MutationRecord[]>;\n      count: number;\n    }\n  >();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true,\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') readonly event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input({alias: 'cdkObserveContentDisabled', transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number {\n    return this._debounce;\n  }\n  set debounce(value: NumberInput) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(\n    private _contentObserver: ContentObserver,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n  ) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription = (\n        this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream\n      ).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    this._currentSubscription?.unsubscribe();\n  }\n}\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory],\n})\nexport class ObserversModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\n@NgModule({})\nexport class LayoutModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, CSP_NONCE, Optional, Inject} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\n\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\n\n/** A utility for calling matchMedia queries. */\n@Injectable({providedIn: 'root'})\nexport class MediaMatcher {\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  private _matchMedia: (query: string) => MediaQueryList;\n\n  constructor(\n    private _platform: Platform,\n    @Optional() @Inject(CSP_NONCE) private _nonce?: string | null,\n  ) {\n    this._matchMedia =\n      this._platform.isBrowser && window.matchMedia\n        ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n          // call it from a different scope.\n          window.matchMedia.bind(window)\n        : noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query: string): MediaQueryList {\n    if (this._platform.WEBKIT || this._platform.BLINK) {\n      createEmptyStyleRule(query, this._nonce);\n    }\n    return this._matchMedia(query);\n  }\n}\n\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query: string, nonce: string | undefined | null) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n\n      if (nonce) {\n        mediaQueryStyleNode.nonce = nonce;\n      }\n\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head!.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {},\n  } as any;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {combineLatest, concat, Observable, Observer, Subject} from 'rxjs';\nimport {debounceTime, map, skip, startWith, take, takeUntil} from 'rxjs/operators';\nimport {MediaMatcher} from './media-matcher';\n\n/** The current state of a layout breakpoint. */\nexport interface BreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /**\n   * A key boolean pair for each query provided to the observe method,\n   * with its current matched state.\n   */\n  breakpoints: {\n    [key: string]: boolean;\n  };\n}\n\n/** The current state of a layout breakpoint. */\ninterface InternalBreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /** The media query being to be matched */\n  query: string;\n}\n\ninterface Query {\n  observable: Observable<InternalBreakpointState>;\n  mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of @media queries. */\n@Injectable({providedIn: 'root'})\nexport class BreakpointObserver implements OnDestroy {\n  /**  A map of all media queries currently being listened for. */\n  private _queries = new Map<string, Query>();\n  /** A subject for all other observables to takeUntil based on. */\n  private readonly _destroySubject = new Subject<void>();\n\n  constructor(private _mediaMatcher: MediaMatcher, private _zone: NgZone) {}\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value: string | readonly string[]): boolean {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value: string | readonly string[]): Observable<BreakpointState> {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n\n    let stateObservable = combineLatest(observables);\n    // Emit the first state immediately, and then debounce the subsequent emissions.\n    stateObservable = concat(\n      stateObservable.pipe(take(1)),\n      stateObservable.pipe(skip(1), debounceTime(0)),\n    );\n    return stateObservable.pipe(\n      map(breakpointStates => {\n        const response: BreakpointState = {\n          matches: false,\n          breakpoints: {},\n        };\n        breakpointStates.forEach(({matches, query}) => {\n          response.matches = response.matches || matches;\n          response.breakpoints[query] = matches;\n        });\n        return response;\n      }),\n    );\n  }\n\n  /** Registers a specific query to be listened for. */\n  private _registerQuery(query: string): Query {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query)!;\n    }\n\n    const mql = this._mediaMatcher.matchMedia(query);\n\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = new Observable((observer: Observer<MediaQueryListEvent>) => {\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      const handler = (e: MediaQueryListEvent): void => this._zone.run(() => observer.next(e));\n      mql.addListener(handler);\n\n      return () => {\n        mql.removeListener(handler);\n      };\n    }).pipe(\n      startWith(mql),\n      map(({matches}) => ({query, matches})),\n      takeUntil(this._destroySubject),\n    );\n\n    // Add the MediaQueryList to the set of queries.\n    const output = {observable: queryObservable, mql};\n    this._queries.set(query, output);\n    return output;\n  }\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: readonly string[]): readonly string[] {\n  return queries\n    .map(query => query.split(','))\n    .reduce((a1, a2) => a1.concat(a2))\n    .map(query => query.trim());\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset:\n    '(max-width: 599.98px) and (orientation: portrait), ' +\n    '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet:\n    '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n    '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web:\n    '(min-width: 840px) and (orientation: portrait), ' +\n    '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: `aria-${string}`, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: `aria-${string}`, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy, APP_ID, inject} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the `aria-describedby`.\n */\nexport interface RegisteredMessage {\n  /** The element containing the message. */\n  messageElement: Element;\n\n  /** The number of elements that reference this message element via `aria-describedby`. */\n  referenceCount: number;\n}\n\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber implements OnDestroy {\n  private _document: Document;\n\n  /** Map of all registered message elements that have been placed into the document. */\n  private _messageRegistry = new Map<string | Element, RegisteredMessage>();\n\n  /** Container for all registered messages. */\n  private _messagesContainer: HTMLElement | null = null;\n\n  /** Unique ID for the service. */\n  private readonly _id = `${nextId++}`;\n\n  constructor(\n    @Inject(DOCUMENT) _document: any,\n    /**\n     * @deprecated To be turned into a required parameter.\n     * @breaking-change 14.0.0\n     */\n    private _platform?: Platform,\n  ) {\n    this._document = _document;\n    this._id = inject(APP_ID) + '-' + nextId++;\n  }\n\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   */\n  describe(hostElement: Element, message: string, role?: string): void;\n\n  /**\n   * Adds to the host element an aria-describedby reference to an already-existing message element.\n   */\n  describe(hostElement: Element, message: HTMLElement): void;\n\n  describe(hostElement: Element, message: string | HTMLElement, role?: string): void {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (typeof message !== 'string') {\n      // We need to ensure that the element has an ID.\n      setMessageId(message, this._id);\n      this._messageRegistry.set(key, {messageElement: message, referenceCount: 0});\n    } else if (!this._messageRegistry.has(key)) {\n      this._createMessageElement(message, role);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, key)) {\n      this._addMessageReference(hostElement, key);\n    }\n  }\n\n  /** Removes the host element's aria-describedby reference to the message. */\n  removeDescription(hostElement: Element, message: string, role?: string): void;\n\n  /** Removes the host element's aria-describedby reference to the message element. */\n  removeDescription(hostElement: Element, message: HTMLElement): void;\n\n  removeDescription(hostElement: Element, message: string | HTMLElement, role?: string): void {\n    if (!message || !this._isElementNode(hostElement)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (this._isElementDescribedByMessage(hostElement, key)) {\n      this._removeMessageReference(hostElement, key);\n    }\n\n    // If the message is a string, it means that it's one that we created for the\n    // consumer so we can remove it safely, otherwise we should leave it in place.\n    if (typeof message === 'string') {\n      const registeredMessage = this._messageRegistry.get(key);\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(key);\n      }\n    }\n\n    if (this._messagesContainer?.childNodes.length === 0) {\n      this._messagesContainer.remove();\n      this._messagesContainer = null;\n    }\n  }\n\n  /** Unregisters all created message elements and removes the message container. */\n  ngOnDestroy() {\n    const describedElements = this._document.querySelectorAll(\n      `[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`,\n    );\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    this._messagesContainer?.remove();\n    this._messagesContainer = null;\n    this._messageRegistry.clear();\n  }\n\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n  private _createMessageElement(message: string, role?: string) {\n    const messageElement = this._document.createElement('div');\n    setMessageId(messageElement, this._id);\n    messageElement.textContent = message;\n\n    if (role) {\n      messageElement.setAttribute('role', role);\n    }\n\n    this._createMessagesContainer();\n    this._messagesContainer!.appendChild(messageElement);\n    this._messageRegistry.set(getKey(message, role), {messageElement, referenceCount: 0});\n  }\n\n  /** Deletes the message element from the global messages container. */\n  private _deleteMessageElement(key: string | Element) {\n    this._messageRegistry.get(key)?.messageElement?.remove();\n    this._messageRegistry.delete(key);\n  }\n\n  /** Creates the global container for all aria-describedby messages. */\n  private _createMessagesContainer() {\n    if (this._messagesContainer) {\n      return;\n    }\n\n    const containerClassName = 'cdk-describedby-message-container';\n    const serverContainers = this._document.querySelectorAll(\n      `.${containerClassName}[platform=\"server\"]`,\n    );\n\n    for (let i = 0; i < serverContainers.length; i++) {\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      serverContainers[i].remove();\n    }\n\n    const messagesContainer = this._document.createElement('div');\n\n    // We add `visibility: hidden` in order to prevent text in this container from\n    // being searchable by the browser's Ctrl + F functionality.\n    // Screen-readers will still read the description for elements with aria-describedby even\n    // when the description element is not visible.\n    messagesContainer.style.visibility = 'hidden';\n    // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n    // the description element doesn't impact page layout.\n    messagesContainer.classList.add(containerClassName);\n    messagesContainer.classList.add('cdk-visually-hidden');\n\n    // @breaking-change 14.0.0 Remove null check for `_platform`.\n    if (this._platform && !this._platform.isBrowser) {\n      messagesContainer.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(messagesContainer);\n    this._messagesContainer = messagesContainer;\n  }\n\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n  private _removeCdkDescribedByReferenceIds(element: Element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(\n      id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0,\n    );\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n  private _addMessageReference(element: Element, key: string | Element) {\n    const registeredMessage = this._messageRegistry.get(key)!;\n\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n    registeredMessage.referenceCount++;\n  }\n\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n  private _removeMessageReference(element: Element, key: string | Element) {\n    const registeredMessage = this._messageRegistry.get(key)!;\n    registeredMessage.referenceCount--;\n\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n\n  /** Returns true if the element has been described by the provided message ID. */\n  private _isElementDescribedByMessage(element: Element, key: string | Element): boolean {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = this._messageRegistry.get(key);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n\n  /** Determines whether a message can be described on a particular element. */\n  private _canBeDescribed(element: Element, message: string | HTMLElement | void): boolean {\n    if (!this._isElementNode(element)) {\n      return false;\n    }\n\n    if (message && typeof message === 'object') {\n      // We'd have to make some assumptions about the description element's text, if the consumer\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\n      // that it can be used as a description.\n      return true;\n    }\n\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\n    const ariaLabel = element.getAttribute('aria-label');\n\n    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n    // element, because screen readers will end up reading out the same text twice in a row.\n    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n  }\n\n  /** Checks whether a node is an Element node. */\n  private _isElementNode(element: Node): element is Element {\n    return element.nodeType === this._document.ELEMENT_NODE;\n  }\n}\n\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message: string | Element, role?: string): string | Element {\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element: HTMLElement, serviceId: string) {\n  if (!element.id) {\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n  hasModifierKey,\n  HOME,\n  END,\n  PAGE_UP,\n  PAGE_DOWN,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n  private _wrap = false;\n  private readonly _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _itemChangesSubscription?: Subscription;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n  private _homeAndEnd = false;\n  private _pageUpAndDown = {enabled: false, delta: 10};\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      this._itemChangesSubscription = _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  readonly tabOut = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  readonly change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this._items.length &&\n      this._items.some(item => typeof item.getLabel !== 'function')\n    ) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream\n      .pipe(\n        tap(letter => this._pressedLetters.push(letter)),\n        debounceTime(debounceInterval),\n        filter(() => this._pressedLetters.length > 0),\n        map(() => this._pressedLetters.join('')),\n      )\n      .subscribe(inputString => {\n        const items = this._getItemsArray();\n\n        // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n        for (let i = 1; i < items.length + 1; i++) {\n          const index = (this._activeItemIndex + i) % items.length;\n          const item = items[index];\n\n          if (\n            !this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0\n          ) {\n            this.setActiveItem(index);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n\n    return this;\n  }\n\n  /** Cancels the current typeahead sequence. */\n  cancelTypeahead(): this {\n    this._pressedLetters = [];\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate every 10th, configured or first/last element in up/down direction\n   * respectively when the Page-Up or Page-Down key is pressed.\n   * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.\n   * @param delta Whether pressing the Home or End key activates the first/last item.\n   */\n  withPageUpDown(enabled: boolean = true, delta: number = 10): this {\n    this._pageUpAndDown = {enabled, delta};\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousActiveItem = this._activeItem;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case PAGE_UP:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;\n          this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);\n          break;\n        } else {\n          return;\n        }\n\n      case PAGE_DOWN:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;\n          const itemsLength = this._getItemsArray().length;\n          this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap\n      ? this.setLastItemActive()\n      : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n\n  /** Cleans up the key manager. */\n  destroy() {\n    this._typeaheadSubscription.unsubscribe();\n    this._itemChangesSubscription?.unsubscribe();\n    this._letterKeyStream.complete();\n    this.tabOut.complete();\n    this.change.complete();\n    this._pressedLetters = [];\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends ListKeyManagerOption {\n  /** Applies the styles for an active item to this item. */\n  setActiveStyles(): void;\n\n  /** Applies the styles for an inactive item to this item. */\n  setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n  /**\n   * Sets the active item to the item at the specified index and adds the\n   * active styles to the newly active item. Also removes active styles\n   * from the previously active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item to the specified one and adds the\n   * active styles to the it. Also removes active styles from the\n   * previously active item.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(index: any): void {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply its label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable} from '@angular/core';\n\n/**\n * Configuration for the isFocusable method.\n */\nexport class IsFocusableConfig {\n  /**\n   * Whether to count an element as focusable even if it is not currently visible.\n   */\n  ignoreVisibility: boolean = false;\n}\n\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether it is focusable or\n * tabbable.\n */\n@Injectable({providedIn: 'root'})\nexport class InteractivityChecker {\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n  isDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n  isVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n  isTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Browsers disable tabbing to an element inside of an invisible frame.\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    }\n\n    // In iOS, the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      }\n      // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      }\n      // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n      if (tabIndexValue !== null) {\n        return true;\n      }\n      // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n\n    return element.tabIndex >= 0;\n  }\n\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @param config The config object with options to customize this method's behavior\n   * @returns Whether the element is focusable.\n   */\n  isFocusable(element: HTMLElement, config?: IsFocusableConfig): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return (\n      isPotentiallyFocusable(element) &&\n      !this.isDisabled(element) &&\n      (config?.ignoreVisibility || this.isVisible(element))\n    );\n  }\n}\n\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window: Window) {\n  try {\n    return window.frameElement as HTMLElement;\n  } catch {\n    return null;\n  }\n}\n\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(\n    element.offsetWidth ||\n    element.offsetHeight ||\n    (typeof element.getClientRects === 'function' && element.getClientRects().length)\n  );\n}\n\n/** Gets whether an element's  */\nfunction isNativeFormElement(element: Node) {\n  let nodeName = element.nodeName.toLowerCase();\n  return (\n    nodeName === 'input' ||\n    nodeName === 'select' ||\n    nodeName === 'button' ||\n    nodeName === 'textarea'\n  );\n}\n\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n\n/** Gets whether an element is an input element. */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex');\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\n\n  return (\n    inputType === 'text' ||\n    inputType === 'password' ||\n    nodeName === 'select' ||\n    nodeName === 'textarea'\n  );\n}\n\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return (\n    isNativeFormElement(element) ||\n    isAnchorWithHref(element) ||\n    element.hasAttribute('contenteditable') ||\n    hasValidTabIndex(element)\n  );\n}\n\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node: HTMLElement): Window {\n  // ownerDocument is null if `node` itself *is* a document.\n  return (node.ownerDocument && node.ownerDocument.defaultView) || window;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_getFocusedElementPierceShadowDom} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  DoCheck,\n  SimpleChanges,\n  OnChanges,\n  booleanAttribute,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\nexport class FocusTrap {\n  private _startAnchor: HTMLElement | null;\n  private _endAnchor: HTMLElement | null;\n  private _hasAttached = false;\n\n  // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n  protected startAnchorListener = () => this.focusLastTabbableElement();\n  protected endAnchorListener = () => this.focusFirstTabbableElement();\n\n  /** Whether the focus trap is active. */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n  set enabled(value: boolean) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  protected _enabled: boolean = true;\n\n  constructor(\n    readonly _element: HTMLElement,\n    private _checker: InteractivityChecker,\n    readonly _ngZone: NgZone,\n    readonly _document: Document,\n    deferAnchors = false,\n  ) {\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n      startAnchor.remove();\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n      endAnchor.remove();\n    }\n\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfully. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors(): boolean {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor!.addEventListener('focus', this.startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor!.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor!, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor!, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusInitialElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusFirstTabbableElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusLastTabbableElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n    });\n  }\n\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  private _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const markers = this._element.querySelectorAll(\n      `[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`,\n    ) as NodeListOf<HTMLElement>;\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      for (let i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n          console.warn(\n            `Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n              `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n              `attribute will be removed in 8.0.0.`,\n            markers[i],\n          );\n        } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n          console.warn(\n            `Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n              `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n              `will be removed in 8.0.0.`,\n            markers[i],\n          );\n        }\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length\n      ? markers[markers.length - 1]\n      : this._getLastTabbableElement(this._element);\n  }\n\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n  focusInitialElement(options?: FocusOptions): boolean {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(\n      `[cdk-focus-initial], ` + `[cdkFocusInitial]`,\n    ) as HTMLElement;\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        redirectToElement.hasAttribute(`cdk-focus-initial`)\n      ) {\n        console.warn(\n          `Found use of deprecated attribute 'cdk-focus-initial', ` +\n            `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n            `will be removed in 8.0.0`,\n          redirectToElement,\n        );\n      }\n\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n      if (\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        !this._checker.isFocusable(redirectToElement)\n      ) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement) as HTMLElement;\n        focusableChild?.focus(options);\n        return !!focusableChild;\n      }\n\n      redirectToElement.focus(options);\n      return true;\n    }\n\n    return this.focusFirstTabbableElement(options);\n  }\n\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusFirstTabbableElement(options?: FocusOptions): boolean {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusLastTabbableElement(options?: FocusOptions): boolean {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n  hasAttached(): boolean {\n    return this._hasAttached;\n  }\n\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    const children = root.children;\n\n    for (let i = 0; i < children.length; i++) {\n      const tabbableChild =\n        children[i].nodeType === this._document.ELEMENT_NODE\n          ? this._getFirstTabbableElement(children[i] as HTMLElement)\n          : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    const children = root.children;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      const tabbableChild =\n        children[i].nodeType === this._document.ELEMENT_NODE\n          ? this._getLastTabbableElement(children[i] as HTMLElement)\n          : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Creates an anchor element. */\n  private _createAnchor(): HTMLElement {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n  private _toggleAnchorTabIndex(isEnabled: boolean, anchor: HTMLElement) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n  protected toggleAnchors(enabled: boolean) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n\n  /** Executes a function when the zone is stable. */\n  private _executeOnStable(fn: () => any): void {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapFactory {\n  private _document: Document;\n\n  constructor(\n    private _checker: InteractivityChecker,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this._document = _document;\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean = false): FocusTrap {\n    return new FocusTrap(\n      element,\n      this._checker,\n      this._ngZone,\n      this._document,\n      deferCaptureElements,\n    );\n  }\n}\n\n/** Directive for trapping focus within a region. */\n@Directive({\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n})\nexport class CdkTrapFocus implements OnDestroy, AfterContentInit, OnChanges, DoCheck {\n  /** Underlying FocusTrap instance. */\n  focusTrap: FocusTrap;\n\n  /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n  private _previouslyFocusedElement: HTMLElement | null = null;\n\n  /** Whether the focus trap is active. */\n  @Input({alias: 'cdkTrapFocus', transform: booleanAttribute})\n  get enabled(): boolean {\n    return this.focusTrap.enabled;\n  }\n  set enabled(value: boolean) {\n    this.focusTrap.enabled = value;\n  }\n\n  /**\n   * Whether the directive should automatically move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n  @Input({alias: 'cdkTrapFocusAutoCapture', transform: booleanAttribute}) autoCapture: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _focusTrapFactory: FocusTrapFactory,\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this.focusTrap.destroy();\n\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n\n    if (this.autoCapture) {\n      this._captureFocus();\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const autoCaptureChange = changes['autoCapture'];\n\n    if (\n      autoCaptureChange &&\n      !autoCaptureChange.firstChange &&\n      this.autoCapture &&\n      this.focusTrap.hasAttached()\n    ) {\n      this._captureFocus();\n    }\n  }\n\n  private _captureFocus() {\n    this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n    this.focusTrap.focusInitialElementWhenReady();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\nimport {FocusTrap} from './focus-trap';\nimport {FocusTrapManager, ManagedFocusTrap} from './focus-trap-manager';\nimport {FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {ConfigurableFocusTrapConfig} from './configurable-focus-trap-config';\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nexport class ConfigurableFocusTrap extends FocusTrap implements ManagedFocusTrap {\n  /** Whether the FocusTrap is enabled. */\n  override get enabled(): boolean {\n    return this._enabled;\n  }\n  override set enabled(value: boolean) {\n    this._enabled = value;\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n\n  constructor(\n    _element: HTMLElement,\n    _checker: InteractivityChecker,\n    _ngZone: NgZone,\n    _document: Document,\n    private _focusTrapManager: FocusTrapManager,\n    private _inertStrategy: FocusTrapInertStrategy,\n    config: ConfigurableFocusTrapConfig,\n  ) {\n    super(_element, _checker, _ngZone, _document, config.defer);\n    this._focusTrapManager.register(this);\n  }\n\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n  override destroy() {\n    this._focusTrapManager.deregister(this);\n    super.destroy();\n  }\n\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n    this.toggleAnchors(true);\n  }\n\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n    this.toggleAnchors(false);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {FocusTrap} from './focus-trap';\n\n/** The injection token used to specify the inert strategy. */\nexport const FOCUS_TRAP_INERT_STRATEGY = new InjectionToken<FocusTrapInertStrategy>(\n  'FOCUS_TRAP_INERT_STRATEGY',\n);\n\n/**\n * A strategy that dictates how FocusTrap should prevent elements\n * outside of the FocusTrap from being focused.\n */\nexport interface FocusTrapInertStrategy {\n  /** Makes all elements outside focusTrap unfocusable. */\n  preventFocus(focusTrap: FocusTrap): void;\n  /** Reverts elements made unfocusable by preventFocus to their previous state. */\n  allowFocus(focusTrap: FocusTrap): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {ConfigurableFocusTrap} from './configurable-focus-trap';\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nexport class EventListenerFocusTrapInertStrategy implements FocusTrapInertStrategy {\n  /** Focus event handler. */\n  private _listener: ((e: FocusEvent) => void) | null = null;\n\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n  preventFocus(focusTrap: ConfigurableFocusTrap): void {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener!, true);\n    }\n\n    this._listener = (e: FocusEvent) => this._trapFocus(focusTrap, e);\n    focusTrap._ngZone.runOutsideAngular(() => {\n      focusTrap._document.addEventListener('focus', this._listener!, true);\n    });\n  }\n\n  /** Removes the event listener added in preventFocus. */\n  allowFocus(focusTrap: ConfigurableFocusTrap): void {\n    if (!this._listener) {\n      return;\n    }\n    focusTrap._document.removeEventListener('focus', this._listener!, true);\n    this._listener = null;\n  }\n\n  /**\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\n   * the FocusTrap.\n   *\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\n   * so all this code runs outside Angular as well.\n   */\n  private _trapFocus(focusTrap: ConfigurableFocusTrap, event: FocusEvent) {\n    const target = event.target as HTMLElement;\n    const focusTrapRoot = focusTrap._element;\n\n    // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n    if (target && !focusTrapRoot.contains(target) && !target.closest?.('div.cdk-overlay-pane')) {\n      // Some legacy FocusTrap usages have logic that focuses some element on the page\n      // just before FocusTrap is destroyed. For backwards compatibility, wait\n      // to be sure FocusTrap is still enabled before refocusing.\n      setTimeout(() => {\n        // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n          focusTrap.focusFirstTabbableElement();\n        }\n      });\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/**\n * A FocusTrap managed by FocusTrapManager.\n * Implemented by ConfigurableFocusTrap to avoid circular dependency.\n */\nexport interface ManagedFocusTrap {\n  _enable(): void;\n  _disable(): void;\n  focusInitialElementWhenReady(): Promise<boolean>;\n}\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapManager {\n  // A stack of the FocusTraps on the page. Only the FocusTrap at the\n  // top of the stack is active.\n  private _focusTrapStack: ManagedFocusTrap[] = [];\n\n  /**\n   * Disables the FocusTrap at the top of the stack, and then pushes\n   * the new FocusTrap onto the stack.\n   */\n  register(focusTrap: ManagedFocusTrap): void {\n    // Dedupe focusTraps that register multiple times.\n    this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n\n    let stack = this._focusTrapStack;\n\n    if (stack.length) {\n      stack[stack.length - 1]._disable();\n    }\n\n    stack.push(focusTrap);\n    focusTrap._enable();\n  }\n\n  /**\n   * Removes the FocusTrap from the stack, and activates the\n   * FocusTrap that is the new top of the stack.\n   */\n  deregister(focusTrap: ManagedFocusTrap): void {\n    focusTrap._disable();\n\n    const stack = this._focusTrapStack;\n\n    const i = stack.indexOf(focusTrap);\n    if (i !== -1) {\n      stack.splice(i, 1);\n      if (stack.length) {\n        stack[stack.length - 1]._enable();\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, Optional, NgZone} from '@angular/core';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\nimport {ConfigurableFocusTrap} from './configurable-focus-trap';\nimport {ConfigurableFocusTrapConfig} from './configurable-focus-trap-config';\nimport {FOCUS_TRAP_INERT_STRATEGY, FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {EventListenerFocusTrapInertStrategy} from './event-listener-inert-strategy';\nimport {FocusTrapManager} from './focus-trap-manager';\n\n/** Factory that allows easy instantiation of configurable focus traps. */\n@Injectable({providedIn: 'root'})\nexport class ConfigurableFocusTrapFactory {\n  private _document: Document;\n  private _inertStrategy: FocusTrapInertStrategy;\n\n  constructor(\n    private _checker: InteractivityChecker,\n    private _ngZone: NgZone,\n    private _focusTrapManager: FocusTrapManager,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(FOCUS_TRAP_INERT_STRATEGY) _inertStrategy?: FocusTrapInertStrategy,\n  ) {\n    this._document = _document;\n    // TODO split up the strategies into different modules, similar to DateAdapter.\n    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param config The focus trap configuration.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, config?: ConfigurableFocusTrapConfig): ConfigurableFocusTrap;\n\n  /**\n   * @deprecated Pass a config object instead of the `deferCaptureElements` flag.\n   * @breaking-change 11.0.0\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean): ConfigurableFocusTrap;\n\n  create(\n    element: HTMLElement,\n    config: ConfigurableFocusTrapConfig | boolean = {defer: false},\n  ): ConfigurableFocusTrap {\n    let configObject: ConfigurableFocusTrapConfig;\n    if (typeof config === 'boolean') {\n      configObject = {defer: config};\n    } else {\n      configObject = config;\n    }\n    return new ConfigurableFocusTrap(\n      element,\n      this._checker,\n      this._ngZone,\n      this._document,\n      this._focusTrapManager,\n      this._inertStrategy,\n      configObject,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n  // a clickable element. We can distinguish these events when `event.buttons` is zero, or\n  // `event.detail` is zero depending on the browser:\n  // - `event.buttons` works on Firefox, but fails on Chrome.\n  // - `detail` works on Chrome, but fails on Firefox.\n  return event.buttons === 0 || event.detail === 0;\n}\n\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nexport function isFakeTouchstartFromScreenReader(event: TouchEvent): boolean {\n  const touch: Touch | undefined =\n    (event.touches && event.touches[0]) || (event.changedTouches && event.changedTouches[0]);\n\n  // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n  return (\n    !!touch &&\n    touch.identifier === -1 &&\n    (touch.radiusX == null || touch.radiusX === 1) &&\n    (touch.radiusY == null || touch.radiusY === 1)\n  );\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ALT, CONTROL, MAC_META, META, SHIFT} from '@angular/cdk/keycodes';\nimport {Inject, Injectable, InjectionToken, OnDestroy, Optional, NgZone} from '@angular/core';\nimport {normalizePassiveListenerOptions, Platform, _getEventTarget} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {distinctUntilChanged, skip} from 'rxjs/operators';\nimport {\n  isFakeMousedownFromScreenReader,\n  isFakeTouchstartFromScreenReader,\n} from '../fake-event-detection';\n\n/**\n * The input modalities detected by this service. Null is used if the input modality is unknown.\n */\nexport type InputModality = 'keyboard' | 'mouse' | 'touch' | null;\n\n/** Options to configure the behavior of the InputModalityDetector. */\nexport interface InputModalityDetectorOptions {\n  /** Keys to ignore when detecting keyboard input modality. */\n  ignoreKeys?: number[];\n}\n\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nexport const INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken<InputModalityDetectorOptions>(\n  'cdk-input-modality-detector-options',\n);\n\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nexport const INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS: InputModalityDetectorOptions = {\n  ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT],\n};\n\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nexport const TOUCH_BUFFER_MS = 650;\n\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\n@Injectable({providedIn: 'root'})\nexport class InputModalityDetector implements OnDestroy {\n  /** Emits whenever an input modality is detected. */\n  readonly modalityDetected: Observable<InputModality>;\n\n  /** Emits when the input modality changes. */\n  readonly modalityChanged: Observable<InputModality>;\n\n  /** The most recently detected input modality. */\n  get mostRecentModality(): InputModality {\n    return this._modality.value;\n  }\n\n  /**\n   * The most recently detected input modality event target. Is null if no input modality has been\n   * detected or if the associated event target is null for some unknown reason.\n   */\n  _mostRecentTarget: HTMLElement | null = null;\n\n  /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n  private readonly _modality = new BehaviorSubject<InputModality>(null);\n\n  /** Options for this InputModalityDetector. */\n  private readonly _options: InputModalityDetectorOptions;\n\n  /**\n   * The timestamp of the last touch input modality. Used to determine whether mousedown events\n   * should be attributed to mouse or touch.\n   */\n  private _lastTouchMs = 0;\n\n  /**\n   * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n   * bound.\n   */\n  private _onKeydown = (event: KeyboardEvent) => {\n    // If this is one of the keys we should ignore, then ignore it and don't update the input\n    // modality to keyboard.\n    if (this._options?.ignoreKeys?.some(keyCode => keyCode === event.keyCode)) {\n      return;\n    }\n\n    this._modality.next('keyboard');\n    this._mostRecentTarget = _getEventTarget(event);\n  };\n\n  /**\n   * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n   * gets bound.\n   */\n  private _onMousedown = (event: MouseEvent) => {\n    // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n    // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n    // after the previous touch event.\n    if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n      return;\n    }\n\n    // Fake mousedown events are fired by some screen readers when controls are activated by the\n    // screen reader. Attribute them to keyboard input modality.\n    this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n    this._mostRecentTarget = _getEventTarget(event);\n  };\n\n  /**\n   * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n   * gets bound.\n   */\n  private _onTouchstart = (event: TouchEvent) => {\n    // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n    // events are fired. Again, attribute to keyboard input modality.\n    if (isFakeTouchstartFromScreenReader(event)) {\n      this._modality.next('keyboard');\n      return;\n    }\n\n    // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n    // triggered via mouse vs touch.\n    this._lastTouchMs = Date.now();\n\n    this._modality.next('touch');\n    this._mostRecentTarget = _getEventTarget(event);\n  };\n\n  constructor(\n    private readonly _platform: Platform,\n    ngZone: NgZone,\n    @Inject(DOCUMENT) document: Document,\n    @Optional()\n    @Inject(INPUT_MODALITY_DETECTOR_OPTIONS)\n    options?: InputModalityDetectorOptions,\n  ) {\n    this._options = {\n      ...INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS,\n      ...options,\n    };\n\n    // Skip the first emission as it's null.\n    this.modalityDetected = this._modality.pipe(skip(1));\n    this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n\n    // If we're not in a browser, this service should do nothing, as there's no relevant input\n    // modality to detect.\n    if (_platform.isBrowser) {\n      ngZone.runOutsideAngular(() => {\n        document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n        document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n        document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._modality.complete();\n\n    if (this._platform.isBrowser) {\n      document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n      document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n      document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n// The tokens for the live announcer are defined in a separate file from LiveAnnouncer\n// as a workaround for https://github.com/angular/angular/issues/22559\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken<HTMLElement | null>(\n  'liveAnnouncerElement',\n  {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY(): null {\n  return null;\n}\n\n/** Object that can be used to configure the default options for the LiveAnnouncer. */\nexport interface LiveAnnouncerDefaultOptions {\n  /** Default politeness for the announcements. */\n  politeness?: AriaLivePoliteness;\n\n  /** Default duration for the announcement messages. */\n  duration?: number;\n}\n\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nexport const LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken<LiveAnnouncerDefaultOptions>(\n  'LIVE_ANNOUNCER_DEFAULT_OPTIONS',\n);\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentObserver} from '@angular/cdk/observers';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {\n  AriaLivePoliteness,\n  LiveAnnouncerDefaultOptions,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_DEFAULT_OPTIONS,\n} from './live-announcer-tokens';\n\nlet uniqueIds = 0;\n\n@Injectable({providedIn: 'root'})\nexport class LiveAnnouncer implements OnDestroy {\n  private _liveElement: HTMLElement;\n  private _document: Document;\n  private _previousTimeout: number;\n  private _currentPromise: Promise<void> | undefined;\n  private _currentResolve: (() => void) | undefined;\n\n  constructor(\n    @Optional() @Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN) elementToken: any,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any,\n    @Optional()\n    @Inject(LIVE_ANNOUNCER_DEFAULT_OPTIONS)\n    private _defaultOptions?: LiveAnnouncerDefaultOptions,\n  ) {\n    // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param politeness The politeness of the announcer element.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, duration?: number): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param politeness The politeness of the announcer element.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;\n\n  announce(message: string, ...args: any[]): Promise<void> {\n    const defaultOptions = this._defaultOptions;\n    let politeness: AriaLivePoliteness | undefined;\n    let duration: number | undefined;\n\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n\n    this.clear();\n    clearTimeout(this._previousTimeout);\n\n    if (!politeness) {\n      politeness =\n        defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n    }\n\n    if (duration == null && defaultOptions) {\n      duration = defaultOptions.duration;\n    }\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    if (this._liveElement.id) {\n      this._exposeAnnouncerToModals(this._liveElement.id);\n    }\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(() => {\n      if (!this._currentPromise) {\n        this._currentPromise = new Promise(resolve => (this._currentResolve = resolve));\n      }\n\n      clearTimeout(this._previousTimeout);\n      this._previousTimeout = setTimeout(() => {\n        this._liveElement.textContent = message;\n\n        if (typeof duration === 'number') {\n          this._previousTimeout = setTimeout(() => this.clear(), duration);\n        }\n\n        this._currentResolve!();\n        this._currentPromise = this._currentResolve = undefined;\n      }, 100);\n\n      return this._currentPromise;\n    });\n  }\n\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   */\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n    this._liveElement?.remove();\n    this._liveElement = null!;\n    this._currentResolve?.();\n    this._currentPromise = this._currentResolve = undefined;\n  }\n\n  private _createLiveElement(): HTMLElement {\n    const elementClass = 'cdk-live-announcer-element';\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    const liveEl = this._document.createElement('div');\n\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].remove();\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n    liveEl.id = `cdk-live-announcer-${uniqueIds++}`;\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n  /**\n   * Some browsers won't expose the accessibility node of the live announcer element if there is an\n   * `aria-modal` and the live announcer is outside of it. This method works around the issue by\n   * pointing the `aria-owns` of all modals to the live announcer element.\n   */\n  private _exposeAnnouncerToModals(id: string) {\n    // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n    // the `SnakBarContainer` and other usages.\n    //\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const modals = this._document.querySelectorAll(\n      'body > .cdk-overlay-container [aria-modal=\"true\"]',\n    );\n\n    for (let i = 0; i < modals.length; i++) {\n      const modal = modals[i];\n      const ariaOwns = modal.getAttribute('aria-owns');\n\n      if (!ariaOwns) {\n        modal.setAttribute('aria-owns', id);\n      } else if (ariaOwns.indexOf(id) === -1) {\n        modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n      }\n    }\n  }\n}\n\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n@Directive({\n  selector: '[cdkAriaLive]',\n  exportAs: 'cdkAriaLive',\n})\nexport class CdkAriaLive implements OnDestroy {\n  /** The aria-live politeness level to use when announcing messages. */\n  @Input('cdkAriaLive')\n  get politeness(): AriaLivePoliteness {\n    return this._politeness;\n  }\n  set politeness(value: AriaLivePoliteness) {\n    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver.observe(this._elementRef).subscribe(() => {\n          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n          const elementText = this._elementRef.nativeElement.textContent;\n\n          // The `MutationObserver` fires also for attribute\n          // changes which we don't want to announce.\n          if (elementText !== this._previousAnnouncedText) {\n            this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n            this._previousAnnouncedText = elementText;\n          }\n        });\n      });\n    }\n  }\n  private _politeness: AriaLivePoliteness = 'polite';\n\n  /** Time in milliseconds after which to clear out the announcer element. */\n  @Input('cdkAriaLiveDuration') duration: number;\n\n  private _previousAnnouncedText?: string;\n  private _subscription: Subscription | null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _liveAnnouncer: LiveAnnouncer,\n    private _contentObserver: ContentObserver,\n    private _ngZone: NgZone,\n  ) {}\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Platform,\n  normalizePassiveListenerOptions,\n  _getShadowRoot,\n  _getEventTarget,\n} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  AfterViewInit,\n} from '@angular/core';\nimport {Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {InputModalityDetector, TOUCH_BUFFER_MS} from '../input-modality/input-modality-detector';\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n/**\n * Corresponds to the options that can be passed to the native `focus` event.\n * via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\n */\nexport interface FocusOptions {\n  /** Whether the browser should scroll to the element when it is focused. */\n  preventScroll?: boolean;\n}\n\n/** Detection mode used for attributing the origin of a focus event. */\nexport const enum FocusMonitorDetectionMode {\n  /**\n   * Any mousedown, keydown, or touchstart event that happened in the previous\n   * tick or the current tick will be used to assign a focus event's origin (to\n   * either mouse, keyboard, or touch). This is the default option.\n   */\n  IMMEDIATE,\n  /**\n   * A focus event's origin is always attributed to the last corresponding\n   * mousedown, keydown, or touchstart event, no matter how long ago it occurred.\n   */\n  EVENTUAL,\n}\n\n/** Injectable service-level options for FocusMonitor. */\nexport interface FocusMonitorOptions {\n  detectionMode?: FocusMonitorDetectionMode;\n}\n\n/** InjectionToken for FocusMonitorOptions. */\nexport const FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken<FocusMonitorOptions>(\n  'cdk-focus-monitor-default-options',\n);\n\ntype MonitoredElementInfo = {\n  checkChildren: boolean;\n  readonly subject: Subject<FocusOrigin>;\n  rootNode: HTMLElement | ShadowRoot | Document;\n};\n\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n  /** The focus origin that the next focus event is a result of. */\n  private _origin: FocusOrigin = null;\n\n  /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n  private _lastFocusOrigin: FocusOrigin;\n\n  /** Whether the window has just been focused. */\n  private _windowFocused = false;\n\n  /** The timeout id of the window focus timeout. */\n  private _windowFocusTimeoutId: number;\n\n  /** The timeout id of the origin clearing timeout. */\n  private _originTimeoutId: number;\n\n  /**\n   * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n   * focus events to touch interactions requires special logic.\n   */\n  private _originFromTouchInteraction = false;\n\n  /** Map of elements being monitored to their info. */\n  private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n  /** The number of elements currently being monitored. */\n  private _monitoredElementCount = 0;\n\n  /**\n   * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n   * as well as the number of monitored elements that they contain. We have to treat focus/blur\n   * handlers differently from the rest of the events, because the browser won't emit events\n   * to the document when focus moves inside of a shadow root.\n   */\n  private _rootNodeFocusListenerCount = new Map<HTMLElement | Document | ShadowRoot, number>();\n\n  /**\n   * The specified detection mode, used for attributing the origin of a focus\n   * event.\n   */\n  private readonly _detectionMode: FocusMonitorDetectionMode;\n\n  /**\n   * Event listener for `focus` events on the window.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _windowFocusListener = () => {\n    // Make a note of when the window regains focus, so we can\n    // restore the origin info for the focused element.\n    this._windowFocused = true;\n    this._windowFocusTimeoutId = window.setTimeout(() => (this._windowFocused = false));\n  };\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  /** Subject for stopping our InputModalityDetector subscription. */\n  private readonly _stopInputModalityDetector = new Subject<void>();\n\n  constructor(\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private readonly _inputModalityDetector: InputModalityDetector,\n    /** @breaking-change 11.0.0 make document required */\n    @Optional() @Inject(DOCUMENT) document: any | null,\n    @Optional() @Inject(FOCUS_MONITOR_DEFAULT_OPTIONS) options: FocusMonitorOptions | null,\n  ) {\n    this._document = document;\n    this._detectionMode = options?.detectionMode || FocusMonitorDetectionMode.IMMEDIATE;\n  }\n  /**\n   * Event listener for `focus` and 'blur' events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _rootNodeFocusAndBlurListener = (event: Event) => {\n    const target = _getEventTarget<HTMLElement>(event);\n\n    // We need to walk up the ancestor chain in order to support `checkChildren`.\n    for (let element = target; element; element = element.parentElement) {\n      if (event.type === 'focus') {\n        this._onFocus(event as FocusEvent, element);\n      } else {\n        this._onBlur(event as FocusEvent, element);\n      }\n    }\n  };\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: HTMLElement, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: ElementRef<HTMLElement>, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  monitor(\n    element: HTMLElement | ElementRef<HTMLElement>,\n    checkChildren: boolean = false,\n  ): Observable<FocusOrigin> {\n    const nativeElement = coerceElement(element);\n\n    // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n      // Note: we don't want the observable to emit at all so we don't pass any parameters.\n      return observableOf();\n    }\n\n    // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n    // the shadow root, rather than the `document`, because the browser won't emit focus events\n    // to the `document`, if focus is moving within the same shadow root.\n    const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n    const cachedInfo = this._elementInfo.get(nativeElement);\n\n    // Check if we're already monitoring this element.\n    if (cachedInfo) {\n      if (checkChildren) {\n        // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n        // observers into ones that behave as if `checkChildren` was turned on. We need a more\n        // robust solution.\n        cachedInfo.checkChildren = true;\n      }\n\n      return cachedInfo.subject;\n    }\n\n    // Create monitored element info.\n    const info: MonitoredElementInfo = {\n      checkChildren: checkChildren,\n      subject: new Subject<FocusOrigin>(),\n      rootNode,\n    };\n    this._elementInfo.set(nativeElement, info);\n    this._registerGlobalListeners(info);\n\n    return info.subject;\n  }\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: HTMLElement): void;\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<HTMLElement>): void;\n\n  stopMonitoring(element: HTMLElement | ElementRef<HTMLElement>): void {\n    const nativeElement = coerceElement(element);\n    const elementInfo = this._elementInfo.get(nativeElement);\n\n    if (elementInfo) {\n      elementInfo.subject.complete();\n\n      this._setClasses(nativeElement);\n      this._elementInfo.delete(nativeElement);\n      this._removeGlobalListeners(elementInfo);\n    }\n  }\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: HTMLElement, origin: FocusOrigin, options?: FocusOptions): void;\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: ElementRef<HTMLElement>, origin: FocusOrigin, options?: FocusOptions): void;\n\n  focusVia(\n    element: HTMLElement | ElementRef<HTMLElement>,\n    origin: FocusOrigin,\n    options?: FocusOptions,\n  ): void {\n    const nativeElement = coerceElement(element);\n    const focusedElement = this._getDocument().activeElement;\n\n    // If the element is focused already, calling `focus` again won't trigger the event listener\n    // which means that the focus classes won't be updated. If that's the case, update the classes\n    // directly without waiting for an event.\n    if (nativeElement === focusedElement) {\n      this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) =>\n        this._originChanged(currentElement, origin, info),\n      );\n    } else {\n      this._setOrigin(origin);\n\n      // `focus` isn't available on the server\n      if (typeof nativeElement.focus === 'function') {\n        nativeElement.focus(options);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  private _getFocusOrigin(focusEventTarget: HTMLElement | null): FocusOrigin {\n    if (this._origin) {\n      // If the origin was realized via a touch interaction, we need to perform additional checks\n      // to determine whether the focus origin should be attributed to touch or program.\n      if (this._originFromTouchInteraction) {\n        return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n      } else {\n        return this._origin;\n      }\n    }\n\n    // If the window has just regained focus, we can restore the most recent origin from before the\n    // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n    // focus. This typically means one of two things happened:\n    //\n    // 1) The element was programmatically focused, or\n    // 2) The element was focused via screen reader navigation (which generally doesn't fire\n    //    events).\n    //\n    // Because we can't distinguish between these two cases, we default to setting `program`.\n    if (this._windowFocused && this._lastFocusOrigin) {\n      return this._lastFocusOrigin;\n    }\n\n    // If the interaction is coming from an input label, we consider it a mouse interactions.\n    // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\n    // our detection, because all our assumptions are for `mousedown`. We need to handle this\n    // special case, because it's very common for checkboxes and radio buttons.\n    if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\n      return 'mouse';\n    }\n\n    return 'program';\n  }\n\n  /**\n   * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n   * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n   * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n   * event was directly caused by the touch interaction or (2) the focus event was caused by a\n   * subsequent programmatic focus call triggered by the touch interaction.\n   * @param focusEventTarget The target of the focus event under examination.\n   */\n  private _shouldBeAttributedToTouch(focusEventTarget: HTMLElement | null): boolean {\n    // Please note that this check is not perfect. Consider the following edge case:\n    //\n    // <div #parent tabindex=\"0\">\n    //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n    // #child, #parent is programmatically focused. This code will attribute the focus to touch\n    // instead of program. This is a relatively minor edge-case that can be worked around by using\n    // focusVia(parent, 'program') to focus #parent.\n    return (\n      this._detectionMode === FocusMonitorDetectionMode.EVENTUAL ||\n      !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget)\n    );\n  }\n\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param element The element to update the classes on.\n   * @param origin The focus origin.\n   */\n  private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    element.classList.toggle('cdk-focused', !!origin);\n    element.classList.toggle('cdk-touch-focused', origin === 'touch');\n    element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n    element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n    element.classList.toggle('cdk-program-focused', origin === 'program');\n  }\n\n  /**\n   * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n   * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n   * the origin being set.\n   * @param origin The origin to set.\n   * @param isFromInteraction Whether we are setting the origin from an interaction event.\n   */\n  private _setOrigin(origin: FocusOrigin, isFromInteraction = false): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n      this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\n\n      // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n      // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n      // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n      // a touch event because when a touch event is fired, the associated focus event isn't yet in\n      // the event queue. Before doing so, clear any pending timeouts.\n      if (this._detectionMode === FocusMonitorDetectionMode.IMMEDIATE) {\n        clearTimeout(this._originTimeoutId);\n        const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n        this._originTimeoutId = setTimeout(() => (this._origin = null), ms);\n      }\n    });\n  }\n\n  /**\n   * Handles focus events on a registered element.\n   * @param event The focus event.\n   * @param element The monitored element.\n   */\n  private _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n    const focusEventTarget = _getEventTarget<HTMLElement>(event);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== focusEventTarget)) {\n      return;\n    }\n\n    this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n  }\n\n  /**\n   * Handles blur events on a registered element.\n   * @param event The blur event.\n   * @param element The monitored element.\n   */\n  _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n\n    if (\n      !elementInfo ||\n      (elementInfo.checkChildren &&\n        event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))\n    ) {\n      return;\n    }\n\n    this._setClasses(element);\n    this._emitOrigin(elementInfo, null);\n  }\n\n  private _emitOrigin(info: MonitoredElementInfo, origin: FocusOrigin) {\n    if (info.subject.observers.length) {\n      this._ngZone.run(() => info.subject.next(origin));\n    }\n  }\n\n  private _registerGlobalListeners(elementInfo: MonitoredElementInfo) {\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    const rootNode = elementInfo.rootNode;\n    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n    if (!rootNodeFocusListeners) {\n      this._ngZone.runOutsideAngular(() => {\n        rootNode.addEventListener(\n          'focus',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n        rootNode.addEventListener(\n          'blur',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n      });\n    }\n\n    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount === 1) {\n      // Note: we listen to events in the capture phase so we\n      // can detect them even if the user stops propagation.\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n        window.addEventListener('focus', this._windowFocusListener);\n      });\n\n      // The InputModalityDetector is also just a collection of global listeners.\n      this._inputModalityDetector.modalityDetected\n        .pipe(takeUntil(this._stopInputModalityDetector))\n        .subscribe(modality => {\n          this._setOrigin(modality, true /* isFromInteraction */);\n        });\n    }\n  }\n\n  private _removeGlobalListeners(elementInfo: MonitoredElementInfo) {\n    const rootNode = elementInfo.rootNode;\n\n    if (this._rootNodeFocusListenerCount.has(rootNode)) {\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode)!;\n\n      if (rootNodeFocusListeners > 1) {\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n      } else {\n        rootNode.removeEventListener(\n          'focus',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n        rootNode.removeEventListener(\n          'blur',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n        this._rootNodeFocusListenerCount.delete(rootNode);\n      }\n    }\n\n    // Unregister global listeners when last element is unmonitored.\n    if (!--this._monitoredElementCount) {\n      const window = this._getWindow();\n      window.removeEventListener('focus', this._windowFocusListener);\n\n      // Equivalently, stop our InputModalityDetector subscription.\n      this._stopInputModalityDetector.next();\n\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    }\n  }\n\n  /** Updates all the state on an element once its focus origin has changed. */\n  private _originChanged(\n    element: HTMLElement,\n    origin: FocusOrigin,\n    elementInfo: MonitoredElementInfo,\n  ) {\n    this._setClasses(element, origin);\n    this._emitOrigin(elementInfo, origin);\n    this._lastFocusOrigin = origin;\n  }\n\n  /**\n   * Collects the `MonitoredElementInfo` of a particular element and\n   * all of its ancestors that have enabled `checkChildren`.\n   * @param element Element from which to start the search.\n   */\n  private _getClosestElementsInfo(element: HTMLElement): [HTMLElement, MonitoredElementInfo][] {\n    const results: [HTMLElement, MonitoredElementInfo][] = [];\n\n    this._elementInfo.forEach((info, currentElement) => {\n      if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n        results.push([currentElement, info]);\n      }\n    });\n\n    return results;\n  }\n\n  /**\n   * Returns whether an interaction is likely to have come from the user clicking the `label` of\n   * an `input` or `textarea` in order to focus it.\n   * @param focusEventTarget Target currently receiving focus.\n   */\n  private _isLastInteractionFromInputLabel(focusEventTarget: HTMLElement): boolean {\n    const {_mostRecentTarget: mostRecentTarget, mostRecentModality} = this._inputModalityDetector;\n\n    // If the last interaction used the mouse on an element contained by one of the labels\n    // of an `input`/`textarea` that is currently focused, it is very likely that the\n    // user redirected focus using the label.\n    if (\n      mostRecentModality !== 'mouse' ||\n      !mostRecentTarget ||\n      mostRecentTarget === focusEventTarget ||\n      (focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA') ||\n      (focusEventTarget as HTMLInputElement | HTMLTextAreaElement).disabled\n    ) {\n      return false;\n    }\n\n    const labels = (focusEventTarget as HTMLInputElement | HTMLTextAreaElement).labels;\n\n    if (labels) {\n      for (let i = 0; i < labels.length; i++) {\n        if (labels[i].contains(mostRecentTarget)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n  exportAs: 'cdkMonitorFocus',\n})\nexport class CdkMonitorFocus implements AfterViewInit, OnDestroy {\n  private _monitorSubscription: Subscription;\n  private _focusOrigin: FocusOrigin = null;\n\n  @Output() readonly cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _focusMonitor: FocusMonitor) {}\n\n  get focusOrigin(): FocusOrigin {\n    return this._focusOrigin;\n  }\n\n  ngAfterViewInit() {\n    const element = this._elementRef.nativeElement;\n    this._monitorSubscription = this._focusMonitor\n      .monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n      .subscribe(origin => {\n        this._focusOrigin = origin;\n        this.cdkFocusChange.emit(origin);\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    if (this._monitorSubscription) {\n      this._monitorSubscription.unsubscribe();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Inject, Injectable, OnDestroy} from '@angular/core';\nimport {BreakpointObserver} from '@angular/cdk/layout';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {Subscription} from 'rxjs';\n\n/** Set of possible high-contrast mode backgrounds. */\nexport const enum HighContrastMode {\n  NONE,\n  BLACK_ON_WHITE,\n  WHITE_ON_BLACK,\n}\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nexport const BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nexport const WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n\n/** CSS class applied to the document body when in high-contrast mode. */\nexport const HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\n@Injectable({providedIn: 'root'})\nexport class HighContrastModeDetector implements OnDestroy {\n  /**\n   * Figuring out the high contrast mode and adding the body classes can cause\n   * some expensive layouts. This flag is used to ensure that we only do it once.\n   */\n  private _hasCheckedHighContrastMode: boolean;\n  private _document: Document;\n  private _breakpointSubscription: Subscription;\n\n  constructor(private _platform: Platform, @Inject(DOCUMENT) document: any) {\n    this._document = document;\n\n    this._breakpointSubscription = inject(BreakpointObserver)\n      .observe('(forced-colors: active)')\n      .subscribe(() => {\n        if (this._hasCheckedHighContrastMode) {\n          this._hasCheckedHighContrastMode = false;\n          this._applyBodyHighContrastModeCssClasses();\n        }\n      });\n  }\n\n  /** Gets the current high-contrast-mode for the page. */\n  getHighContrastMode(): HighContrastMode {\n    if (!this._platform.isBrowser) {\n      return HighContrastMode.NONE;\n    }\n\n    // Create a test element with an arbitrary background-color that is neither black nor\n    // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n    // appending the test element to the DOM does not affect layout by absolutely positioning it\n    const testElement = this._document.createElement('div');\n    testElement.style.backgroundColor = 'rgb(1,2,3)';\n    testElement.style.position = 'absolute';\n    this._document.body.appendChild(testElement);\n\n    // Get the computed style for the background color, collapsing spaces to normalize between\n    // browsers. Once we get this color, we no longer need the test element. Access the `window`\n    // via the document so we can fake it in tests. Note that we have extra null checks, because\n    // this logic will likely run during app bootstrap and throwing can break the entire app.\n    const documentWindow = this._document.defaultView || window;\n    const computedStyle =\n      documentWindow && documentWindow.getComputedStyle\n        ? documentWindow.getComputedStyle(testElement)\n        : null;\n    const computedColor = ((computedStyle && computedStyle.backgroundColor) || '').replace(\n      / /g,\n      '',\n    );\n    testElement.remove();\n\n    switch (computedColor) {\n      // Pre Windows 11 dark theme.\n      case 'rgb(0,0,0)':\n      // Windows 11 dark themes.\n      case 'rgb(45,50,54)':\n      case 'rgb(32,32,32)':\n        return HighContrastMode.WHITE_ON_BLACK;\n      // Pre Windows 11 light theme.\n      case 'rgb(255,255,255)':\n      // Windows 11 light theme.\n      case 'rgb(255,250,239)':\n        return HighContrastMode.BLACK_ON_WHITE;\n    }\n    return HighContrastMode.NONE;\n  }\n\n  ngOnDestroy(): void {\n    this._breakpointSubscription.unsubscribe();\n  }\n\n  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n  _applyBodyHighContrastModeCssClasses(): void {\n    if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n      const bodyClasses = this._document.body.classList;\n      bodyClasses.remove(\n        HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS,\n        BLACK_ON_WHITE_CSS_CLASS,\n        WHITE_ON_BLACK_CSS_CLASS,\n      );\n      this._hasCheckedHighContrastMode = true;\n\n      const mode = this.getHighContrastMode();\n      if (mode === HighContrastMode.BLACK_ON_WHITE) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n      } else if (mode === HighContrastMode.WHITE_ON_BLACK) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus} from './focus-monitor/focus-monitor';\nimport {CdkTrapFocus} from './focus-trap/focus-trap';\nimport {HighContrastModeDetector} from './high-contrast-mode/high-contrast-mode-detector';\nimport {CdkAriaLive} from './live-announcer/live-announcer';\n\n@NgModule({\n  imports: [ObserversModule],\n  declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n  exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n})\nexport class A11yModule {\n  constructor(highContrastModeDetector: HighContrastModeDetector) {\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAIA;AAOJ,IAAI;AACFA,uBAAqB,OAAOC,SAAS,eAAgBA,KAAaC;AACnE,QAAO;AACNF,uBAAqB;AACtB;IAOYG,kBAAAA,UAAQ;EAuDnBC,YAAyCC,aAAmB;AAAnB,SAAWA,cAAXA;AAlDzC,SAASC,YAAY,KAAKD,cACtBE,kBAAkB,KAAKF,WAAW,IAClC,OAAOG,aAAa,YAAY,CAAC,CAACA;AAGtC,SAAAC,OAAgB,KAAKH,aAAa,UAAUI,KAAKC,UAAUC,SAAS;AAGpE,SAAAC,UAAmB,KAAKP,aAAa,kBAAkBI,KAAKC,UAAUC,SAAS;AAI/E,SAAKE,QACH,KAAKR,aACL,CAAC,EAAGS,OAAeC,UAAUhB,uBAC7B,OAAOiB,QAAQ,eACf,CAAC,KAAKR,QACN,CAAC,KAAKI;AAKR,SAAMK,SACJ,KAAKZ,aACL,eAAeI,KAAKC,UAAUC,SAAS,KACvC,CAAC,KAAKE,SACN,CAAC,KAAKL,QACN,CAAC,KAAKI;AAGR,SAAGM,MACD,KAAKb,aAAa,mBAAmBI,KAAKC,UAAUC,SAAS,KAAK,EAAE,cAAcG;AAOpF,SAAAK,UAAmB,KAAKd,aAAa,uBAAuBI,KAAKC,UAAUC,SAAS;AAIpF,SAAAS,UAAmB,KAAKf,aAAa,WAAWI,KAAKC,UAAUC,SAAS,KAAK,CAAC,KAAKC;AAMnF,SAAAS,SAAkB,KAAKhB,aAAa,UAAUI,KAAKC,UAAUC,SAAS,KAAK,KAAKM;;;AArDrE,UAAAK,OAAA,SAAAC,iBAAAC,GAAA;AAAA,SAAA,KAAAA,KAAAtB,WAAAuB,SAuDSC,WAAW,CAAA;AAAA;AAvDpB,UAAAC,QAAAC,mBAAA;EAAAC,OAAA3B;EAAQ4B,SAAR5B,UAAQoB;EAAAS,YADI;AAAM,CAAA;IAClB7B;;qDAAA8B,iBAAA9B,UAAQ,CAAA;UADpB+B;WAAW;MAACF,YAAY;IAAM,CAAC;;;;YAwDjBG;aAAOR,WAAW;;;;IC3EpBS,wBAAAA,gBAAc;;;mBAAdA,iBAAc;AAAA;uBDoBdC,iBAAA;EAAAC,MCpBAF;AAAc,CAAA;uBDoBdG,iBAAA,CAAA,CAAA;ICpBAH;;qDDoBAH,iBCpBAG,gBAAc,CAAA;UAD1BI;WAAS,CAAA,CAAE;;;ACDZ,IAAIC;AAGJ,IAAMC,sBAAsB;;;;;EAK1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAM;SAIQC,yBAAsB;AAEpC,MAAIF,qBAAqB;AACvB,WAAOA;EACR;AAKD,MAAI,OAAOjC,aAAa,YAAY,CAACA,UAAU;AAC7CiC,0BAAsB,IAAIG,IAAIF,mBAAmB;AACjD,WAAOD;EACR;AAED,MAAII,mBAAmBrC,SAASsC,cAAc,OAAO;AACrDL,wBAAsB,IAAIG,IACxBF,oBAAoBK,OAAOC,WAAQ;AACjCH,qBAAiBI,aAAa,QAAQD,KAAK;AAC3C,WAAOH,iBAAiBP,SAASU;GAClC,CAAC;AAGJ,SAAOP;AACT;ACxDA,IAAIS;SAMYC,gCAA6B;AAC3C,MAAID,yBAAyB,QAAQ,OAAOnC,WAAW,aAAa;AAClE,QAAI;AACFA,aAAOqC,iBACL,QACA,MACAC,OAAOC,eAAe,CAAA,GAAI,WAAW;QACnCC,KAAKA,MAAOL,wBAAwB;MACrC,CAAA,CAAC;IAEL,UAAA;AACCA,8BAAwBA,yBAAyB;IAClD;EACF;AAED,SAAOA;AACT;AAQM,SAAUM,gCACdC,SAAgC;AAEhC,SAAON,8BAA6B,IAAKM,UAAU,CAAC,CAACA,QAAQC;AAC/D;ACfA,IAAIC;AAGJ,IAAIC;SAGYC,yBAAsB;AACpC,MAAID,2BAA2B,MAAM;AAGnC,QAAI,OAAOpD,aAAa,YAAY,CAACA,YAAY,OAAOsD,YAAY,cAAc,CAACA,SAAS;AAC1FF,gCAA0B;AAC1B,aAAOA;IACR;AAGD,QAAI,oBAAoBpD,SAASuD,gBAAiBC,OAAO;AACvDJ,gCAA0B;IAC3B,OAAM;AAGL,YAAMK,mBAAyCH,QAAQI,UAAUC;AAEjE,UAAIF,kBAAkB;AAKpBL,kCAA0B,CAAC,4BAA4BlD,KAAKuD,iBAAiBG,SAAQ,CAAE;MACxF,OAAM;AACLR,kCAA0B;MAC3B;IACF;EACF;AAED,SAAOA;AACT;SAMgBS,uBAAoB;AAElC,MAAI,OAAO7D,aAAa,YAAY,CAACA,UAAU;AAC7C,WAAgC;EACjC;AAED,MAAImD,qBAAqB,MAAM;AAE7B,UAAMW,kBAAkB9D,SAASsC,cAAc,KAAK;AACpD,UAAMyB,iBAAiBD,gBAAgBN;AACvCM,oBAAgBE,MAAM;AACtBD,mBAAeE,QAAQ;AACvBF,mBAAeG,WAAW;AAC1BH,mBAAeI,aAAa;AAC5BJ,mBAAeK,gBAAgB;AAC/BL,mBAAeM,WAAW;AAE1B,UAAMC,UAAUtE,SAASsC,cAAc,KAAK;AAC5C,UAAMiC,eAAeD,QAAQd;AAC7Be,iBAAaN,QAAQ;AACrBM,iBAAaC,SAAS;AAEtBV,oBAAgBW,YAAYH,OAAO;AACnCtE,aAAS0E,KAAKD,YAAYX,eAAe;AAEzCX,wBAAiB;AAKjB,QAAIW,gBAAgBa,eAAe,GAAG;AAKpCb,sBAAgBa,aAAa;AAC7BxB,0BACEW,gBAAgBa,eAAe,IAAG,IAA4B;IACjE;AAEDb,oBAAgBc,OAAM;EACvB;AACD,SAAOzB;AACT;ACzGA,IAAI0B;SAGYC,qBAAkB;AAChC,MAAID,wBAAwB,MAAM;AAChC,UAAME,OAAO,OAAO/E,aAAa,cAAcA,SAAS+E,OAAO;AAC/DF,2BAAuB,CAAC,EAAEE,SAAUA,KAAaC,oBAAoBD,KAAKE;EAC3E;AAED,SAAOJ;AACT;AAGM,SAAUK,eAAeC,SAAoB;AACjD,MAAIL,mBAAkB,GAAI;AACxB,UAAMM,WAAWD,QAAQE,cAAcF,QAAQE,YAAW,IAAK;AAI/D,QAAI,OAAOC,eAAe,eAAeA,cAAcF,oBAAoBE,YAAY;AACrF,aAAOF;IACR;EACF;AAED,SAAO;AACT;SAMgBG,oCAAiC;AAC/C,MAAIC,gBACF,OAAOxF,aAAa,eAAeA,WAC9BA,SAASwF,gBACV;AAEN,SAAOA,iBAAiBA,cAAcC,YAAY;AAChD,UAAMC,mBAAmBF,cAAcC,WAAWD;AAClD,QAAIE,qBAAqBF,eAAe;AACtC;IACD,OAAM;AACLA,sBAAgBE;IACjB;EACF;AAED,SAAOF;AACT;AAGM,SAAUG,gBAAuCC,OAAY;AAGjE,SAAQA,MAAMC,eAAeD,MAAMC,aAAY,EAAG,CAAC,IAAID,MAAME;AAC/D;SCrDgBC,qBAAkB;AAKhC;;IAEG,OAAOC,cAAc,eAAe,CAAC,CAACA;IAEtC,OAAOC,YAAY,eAAe,CAAC,CAACA;IAEpC,OAAOC,SAAS,eAAe,CAAC,CAACA;IAEjC,OAAOC,UAAU,eAAe,CAAC,CAACA;;AAEvC;;;AETM,SAAU,sBAAsB,OAAU;AAC9C,SAAO,SAAS,QAAQ,GAAG,KAAK,OAAO;AACzC;SCAgB,qBAAqB,OAAY,gBAAgB,GAAC;AAChE,SAAO,eAAe,KAAK,IAAI,OAAO,KAAK,IAAI;AACjD;AAMM,SAAU,eAAe,OAAU;AAIvC,SAAO,CAAC,MAAM,WAAW,KAAY,CAAC,KAAK,CAAC,MAAM,OAAO,KAAK,CAAC;AACjE;ACnBM,SAAU,YAAe,OAAc;AAC3C,SAAO,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAC9C;ACJM,SAAU,oBAAoB,OAAU;AAC5C,MAAI,SAAS,MAAM;AACjB,WAAO;EACR;AAED,SAAO,OAAO,UAAU,WAAW,QAAQ,GAAG,KAAK;AACrD;ACDM,SAAU,cAAiB,cAA+B;AAC9D,SAAO,wBAAwB,aAAa,aAAa,gBAAgB;AAC3E;;;IEcaC,iCAAAA,yBAAuB;EAClCC,OAAOC,UAA0B;AAC/B,WAAO,OAAOC,qBAAqB,cAAc,OAAO,IAAIA,iBAAiBD,QAAQ;;;;mBAF5EF,0BAAuB;AAAA;AAAvB,yBAAAI,QAAA,mBAAA;SAAAJ;EAAuBK,SAAvBL,yBAAuBM;EAAAC,YADX;AAAM,CAAA;IAClBP;;sEAAAA,yBAAuB,CAAA;UADnCQ;WAAW;MAACD,YAAY;IAAM,CAAC;;;IASnBE,yBAAAA,iBAAe;EAW1BC,YAAoBC,0BAAiD;AAAjD,SAAwBA,2BAAxBA;AATZ,SAAAC,oBAAoB,oBAAIC,IAAG;;EAWnCC,cAAW;AACT,SAAKF,kBAAkBG,QAAQ,CAACC,GAAGC,YAAY,KAAKC,iBAAiBD,OAAO,CAAC;;EAe/EE,QAAQC,cAA2C;AACjD,UAAMH,UAAUI,cAAcD,YAAY;AAE1C,WAAO,IAAIE,WAAYC,cAAwC;AAC7D,YAAMC,SAAS,KAAKC,gBAAgBR,OAAO;AAC3C,YAAMS,eAAeF,OAAOG,UAAUJ,QAAQ;AAE9C,aAAO,MAAK;AACVG,qBAAaE,YAAW;AACxB,aAAKC,kBAAkBZ,OAAO;MAChC;IACF,CAAC;;;;;;EAOKQ,gBAAgBR,SAAgB;AACtC,QAAI,CAAC,KAAKL,kBAAkBkB,IAAIb,OAAO,GAAG;AACxC,YAAMO,SAAS,IAAIO,QAAO;AAC1B,YAAMR,WAAW,KAAKZ,yBAAyBV,OAAO+B,eAAaR,OAAOS,KAAKD,SAAS,CAAC;AACzF,UAAIT,UAAU;AACZA,iBAASJ,QAAQF,SAAS;UACxBiB,eAAe;UACfC,WAAW;UACXC,SAAS;QACV,CAAA;MACF;AACD,WAAKxB,kBAAkByB,IAAIpB,SAAS;QAACM;QAAUC;QAAQc,OAAO;MAAC,CAAC;IACjE,OAAM;AACL,WAAK1B,kBAAkB2B,IAAItB,OAAO,EAAGqB;IACtC;AACD,WAAO,KAAK1B,kBAAkB2B,IAAItB,OAAO,EAAGO;;;;;;EAOtCK,kBAAkBZ,SAAgB;AACxC,QAAI,KAAKL,kBAAkBkB,IAAIb,OAAO,GAAG;AACvC,WAAKL,kBAAkB2B,IAAItB,OAAO,EAAGqB;AACrC,UAAI,CAAC,KAAK1B,kBAAkB2B,IAAItB,OAAO,EAAGqB,OAAO;AAC/C,aAAKpB,iBAAiBD,OAAO;MAC9B;IACF;;;EAIKC,iBAAiBD,SAAgB;AACvC,QAAI,KAAKL,kBAAkBkB,IAAIb,OAAO,GAAG;AACvC,YAAM;QAACM;QAAUC;MAAM,IAAI,KAAKZ,kBAAkB2B,IAAItB,OAAO;AAC7D,UAAIM,UAAU;AACZA,iBAASiB,WAAU;MACpB;AACDhB,aAAOiB,SAAQ;AACf,WAAK7B,kBAAkB8B,OAAOzB,OAAO;IACtC;;;;mBAvFQR,kBAAe,SAAAT,uBAAA,CAAA;AAAA;AAAf,iBAAAI,QAAA,mBAAA;SAAAK;EAAeJ,SAAfI,iBAAeH;EAAAC,YADH;AAAM,CAAA;IAClBE;;sEAAAA,iBAAe,CAAA;UAD3BD;WAAW;MAACD,YAAY;IAAM,CAAC;;;;;IAoGnBoC,2BAAAA,mBAAiB;;;;;EAQ5B,IACIC,WAAQ;AACV,WAAO,KAAKC;;EAEd,IAAID,SAASE,OAAc;AACzB,SAAKD,YAAYC;AACjB,SAAKD,YAAY,KAAKE,aAAY,IAAK,KAAKC,WAAU;;;EAKxD,IACIC,WAAQ;AACV,WAAO,KAAKC;;EAEd,IAAID,SAASH,OAAkB;AAC7B,SAAKI,YAAYC,qBAAqBL,KAAK;AAC3C,SAAKE,WAAU;;EAMjBtC,YACU0C,kBACAC,aACAC,SAAe;AAFf,SAAgBF,mBAAhBA;AACA,SAAWC,cAAXA;AACA,SAAOC,UAAPA;AAhC4B,SAAAC,QAAQ,IAAIC,aAAY;AActD,SAASX,YAAG;AAaZ,SAAoBY,uBAAwB;;EAQpDC,qBAAkB;AAChB,QAAI,CAAC,KAAKD,wBAAwB,CAAC,KAAKb,UAAU;AAChD,WAAKI,WAAU;IAChB;;EAGHlC,cAAW;AACT,SAAKiC,aAAY;;EAGXC,aAAU;AAChB,SAAKD,aAAY;AACjB,UAAMvB,SAAS,KAAK4B,iBAAiBjC,QAAQ,KAAKkC,WAAW;AAM7D,SAAKC,QAAQK,kBAAkB,MAAK;AAClC,WAAKF,wBACH,KAAKR,WAAWzB,OAAOoC,KAAKC,aAAa,KAAKZ,QAAQ,CAAC,IAAIzB,QAC3DG,UAAU,KAAK4B,KAAK;IACxB,CAAC;;EAGKR,eAAY;AAClB,SAAKU,sBAAsB7B,YAAW;;;;mBA/D7Be,oBAAiB,kBAAAlC,eAAA,GAAA,kBAAAqD,UAAA,GAAA,kBAAAC,MAAA,CAAA;AAAA;AAAjB,mBAAAC,OAAA,kBAAA;QAAArB;EAAiBsB,WAAA,CAAA,CAAA,IAAA,qBAAA,EAAA,CAAA;EAAAC,QAAA;IAAAtB,UAAA,CAAA,6BAAA,YAQ2BuB,gBAAgB;IAAAlB,UAAA;EAAA;EAAAmB,SAAA;IAAAb,OAAA;EAAA;EAAAc,UAAA,CAAA,mBAAA;EAAAC,UAAA,CAAA,wBAAA;;IAR5D3B;;sEAAAA,mBAAiB,CAAA;UAJ7B4B;IAAUC,MAAA,CAAA;MACTC,UAAU;MACVJ,UAAU;IACX,CAAA;;;;;;;;IAGuCd,OAAK,CAAA;YAA1CmB;aAAO,mBAAmB;;IAOvB9B,UAAQ,CAAA;YADX+B;MAAMH,MAAA,CAAA;QAACI,OAAO;QAA6BC,WAAWV;MAAgB,CAAC;;IAYpElB,UAAQ,CAAA;YADX0B;;;;IAqDUG,yBAAAA,iBAAe;;;mBAAfA,kBAAe;AAAA;;QAAfA;EAAeC,cAAA,CAxEfpC,iBAAiB;EAAAqC,SAAA,CAAjBrC,iBAAiB;AAAA,CAAA;;aAsEjB,CAAC3C,uBAAuB;AAAC,CAAA;IAEzB8E;;sEAAAA,iBAAe,CAAA;UAL3BG;IAAST,MAAA,CAAA;MACRQ,SAAS,CAACrC,iBAAiB;MAC3BoC,cAAc,CAACpC,iBAAiB;MAChCuC,WAAW,CAAClF,uBAAuB;IACpC,CAAA;;;;;IEtMYmF,sBAAAA,cAAY;;;mBAAZA,eAAY;AAAA;;QAAZA;AAAY,CAAA;;IAAZA;;sEAAAA,cAAY,CAAA;UADxBC;WAAS,CAAA,CAAE;;;ACEZ,IAAMC,qCAAkD,oBAAIC,IAAG;AAG/D,IAAIC;IAISC,sBAAAA,cAAY;EAIvBC,YACUC,WAC+BC,QAAsB;AADrD,SAASD,YAATA;AAC+B,SAAMC,SAANA;AAEvC,SAAKC,cACH,KAAKF,UAAUG,aAAaC,OAAOC;;;MAG/BD,OAAOC,WAAWC,KAAKF,MAAM;QAC7BG;;;;;;;;EASRF,WAAWG,OAAa;AACtB,QAAI,KAAKR,UAAUS,UAAU,KAAKT,UAAUU,OAAO;AACjDC,2BAAqBH,OAAO,KAAKP,MAAM;IACxC;AACD,WAAO,KAAKC,YAAYM,KAAK;;;AA1BpB,cAAAI,OAAA,SAAAC,qBAAAC,GAAA;AAAA,SAAA,KAAAA,KAAAhB,eAAY,SAAAiB,QAAA,GAAA,SAMDC,WAAS,CAAA,CAAA;AAAA;AANpB,cAAAC,QAAA,mBAAA;SAAAnB;EAAYoB,SAAZpB,cAAYc;EAAAO,YADA;AAAM,CAAA;IAClBrB;;sEAAAA,cAAY,CAAA;UADxBsB;WAAW;MAACD,YAAY;IAAM,CAAC;;;;;;YAO3BE;;YAAYC;aAAON,SAAS;;;;AAiCjC,SAASL,qBAAqBH,OAAee,OAAgC;AAC3E,MAAI5B,mCAAmC6B,IAAIhB,KAAK,GAAG;AACjD;EACD;AAED,MAAI;AACF,QAAI,CAACX,qBAAqB;AACxBA,4BAAsB4B,SAASC,cAAc,OAAO;AAEpD,UAAIH,OAAO;AACT1B,4BAAoB0B,QAAQA;MAC7B;AAED1B,0BAAoB8B,aAAa,QAAQ,UAAU;AACnDF,eAASG,KAAMC,YAAYhC,mBAAmB;IAC/C;AAED,QAAIA,oBAAoBiC,OAAO;AAC7BjC,0BAAoBiC,MAAMC,WAAqB,UAAAvB,KAAiB,cAAE,CAAC;AACnEb,yCAAmCqC,IAAIxB,KAAK;IAC7C;EACF,SAAQyB,GAAG;AACVC,YAAQC,MAAMF,CAAC;EAChB;AACH;AAGA,SAAS1B,eAAeC,OAAa;AAGnC,SAAO;IACL4B,SAAS5B,UAAU,SAASA,UAAU;IACtC6B,OAAO7B;IACP8B,aAAaA,MAAK;IAAA;IAClBC,gBAAgBA,MAAK;IAAA;;AAEzB;ICnDaC,4BAAAA,oBAAkB;EAM7BzC,YAAoB0C,eAAqCC,OAAa;AAAlD,SAAaD,gBAAbA;AAAqC,SAAKC,QAALA;AAJjD,SAAAC,WAAW,oBAAIC,IAAG;AAET,SAAAC,kBAAkB,IAAIC,QAAO;;;EAK9CC,cAAW;AACT,SAAKF,gBAAgBG,KAAI;AACzB,SAAKH,gBAAgBI,SAAQ;;;;;;;EAQ/BC,UAAUC,OAAiC;AACzC,UAAMC,UAAUC,aAAaC,YAAYH,KAAK,CAAC;AAC/C,WAAOC,QAAQG,KAAKC,gBAAc,KAAKC,eAAeD,UAAU,EAAEE,IAAItB,OAAO;;;;;;;;EAS/EuB,QAAQR,OAAiC;AACvC,UAAMC,UAAUC,aAAaC,YAAYH,KAAK,CAAC;AAC/C,UAAMS,cAAcR,QAAQS,IAAIrD,WAAS,KAAKiD,eAAejD,KAAK,EAAEsD,UAAU;AAE9E,QAAIC,kBAAkBC,cAAcJ,WAAW;AAE/CG,sBAAkBE,OAChBF,gBAAgBG,KAAKC,KAAK,CAAC,CAAC,GAC5BJ,gBAAgBG,KAAKE,KAAK,CAAC,GAAGC,aAAa,CAAC,CAAC,CAAC;AAEhD,WAAON,gBAAgBG,KACrBL,IAAIS,sBAAmB;AACrB,YAAMC,WAA4B;QAChCnC,SAAS;QACToC,aAAa,CAAA;;AAEfF,uBAAiBG,QAAQ,CAAC;QAACrC;QAAS5B;MAAK,MAAK;AAC5C+D,iBAASnC,UAAUmC,SAASnC,WAAWA;AACvCmC,iBAASC,YAAYhE,KAAK,IAAI4B;MAChC,CAAC;AACD,aAAOmC;KACR,CAAC;;;EAKEd,eAAejD,OAAa;AAElC,QAAI,KAAKmC,SAASnB,IAAIhB,KAAK,GAAG;AAC5B,aAAO,KAAKmC,SAAS+B,IAAIlE,KAAK;IAC/B;AAED,UAAMkD,MAAM,KAAKjB,cAAcpC,WAAWG,KAAK;AAG/C,UAAMmE,kBAAkB,IAAIC,WAAYC,cAA2C;AAMjF,YAAMC,UAAW7C,OAAiC,KAAKS,MAAMqC,IAAI,MAAMF,SAAS7B,KAAKf,CAAC,CAAC;AACvFyB,UAAIpB,YAAYwC,OAAO;AAEvB,aAAO,MAAK;AACVpB,YAAInB,eAAeuC,OAAO;MAC5B;IACF,CAAC,EAAEZ,KACDc,UAAUtB,GAAG,GACbG,IAAI,CAAC;MAACzB;IAAO,OAAO;MAAC5B;MAAO4B;IAAO,EAAE,GACrC6C,UAAU,KAAKpC,eAAe,CAAC;AAIjC,UAAMqC,SAAS;MAACpB,YAAYa;MAAiBjB;IAAG;AAChD,SAAKf,SAASwC,IAAI3E,OAAO0E,MAAM;AAC/B,WAAOA;;;;mBAtFE1C,qBAAkB,SAAA1C,YAAA,GAAA,SAAAsF,MAAA,CAAA;AAAA;AAAlB,oBAAAnE,QAAA,mBAAA;SAAAuB;EAAkBtB,SAAlBsB,oBAAkB5B;EAAAO,YADN;AAAM,CAAA;IAClBqB;;sEAAAA,oBAAkB,CAAA;UAD9BpB;WAAW;MAACD,YAAY;IAAM,CAAC;;;;;;;AA+FhC,SAASkC,aAAaD,SAA0B;AAC9C,SAAOA,QACJS,IAAIrD,WAASA,MAAM6E,MAAM,GAAG,CAAC,EAC7BC,OAAO,CAACC,IAAIC,OAAOD,GAAGtB,OAAOuB,EAAE,CAAC,EAChC3B,IAAIrD,WAASA,MAAMiF,KAAI,CAAE;AAC9B;;;AGpIA,IAAMC,eAAe;SAMLC,oBAAoBC,IAAaC,MAAwBC,IAAU;AACjF,QAAMC,MAAMC,oBAAoBJ,IAAIC,IAAI;AACxC,MAAIE,IAAIE,KAAKC,gBAAcA,WAAWC,KAAI,KAAML,GAAGK,KAAI,CAAE,GAAG;AAC1D;EACD;AACDJ,MAAIK,KAAKN,GAAGK,KAAI,CAAE;AAElBP,KAAGS,aAAaR,MAAME,IAAIO,KAAKZ,YAAY,CAAC;AAC9C;SAMgBa,uBAAuBX,IAAaC,MAAwBC,IAAU;AACpF,QAAMC,MAAMC,oBAAoBJ,IAAIC,IAAI;AACxC,QAAMW,cAAcT,IAAIU,OAAOC,SAAOA,OAAOZ,GAAGK,KAAI,CAAE;AAEtD,MAAIK,YAAYG,QAAQ;AACtBf,OAAGS,aAAaR,MAAMW,YAAYF,KAAKZ,YAAY,CAAC;EACrD,OAAM;AACLE,OAAGgB,gBAAgBf,IAAI;EACxB;AACH;AAMgB,SAAAG,oBAAoBJ,IAAaC,MAAY;AAE3D,UAAQD,GAAGiB,aAAahB,IAAI,KAAK,IAAIiB,MAAM,MAAM,KAAK,CAAA;AACxD;ACjBO,IAAMC,wBAAwB;AAO9B,IAAMC,4BAA4B;AAOlC,IAAMC,iCAAiC;AAG9C,IAAIC,SAAS;IAQAC,uBAAAA,eAAa;EAYxBC,YACoBC,WAKVC,WAAoB;AAApB,SAASA,YAATA;AAdF,SAAAC,mBAAmB,oBAAIC,IAAG;AAG1B,SAAkBC,qBAAuB;AAGhC,SAAAC,MAAM,GAAGR,QAAQ;AAUhC,SAAKG,YAAYA;AACjB,SAAKK,MAAMC,OAAOC,MAAM,IAAI,MAAMV;;EAepCW,SAASC,aAAsBC,SAA+BC,MAAa;AACzE,QAAI,CAAC,KAAKC,gBAAgBH,aAAaC,OAAO,GAAG;AAC/C;IACD;AAED,UAAMG,MAAMC,OAAOJ,SAASC,IAAI;AAEhC,QAAI,OAAOD,YAAY,UAAU;AAE/BK,mBAAaL,SAAS,KAAKL,GAAG;AAC9B,WAAKH,iBAAiBc,IAAIH,KAAK;QAACI,gBAAgBP;QAASQ,gBAAgB;MAAC,CAAC;IAC5E,WAAU,CAAC,KAAKhB,iBAAiBiB,IAAIN,GAAG,GAAG;AAC1C,WAAKO,sBAAsBV,SAASC,IAAI;IACzC;AAED,QAAI,CAAC,KAAKU,6BAA6BZ,aAAaI,GAAG,GAAG;AACxD,WAAKS,qBAAqBb,aAAaI,GAAG;IAC3C;;EASHU,kBAAkBd,aAAsBC,SAA+BC,MAAa;AAClF,QAAI,CAACD,WAAW,CAAC,KAAKc,eAAef,WAAW,GAAG;AACjD;IACD;AAED,UAAMI,MAAMC,OAAOJ,SAASC,IAAI;AAEhC,QAAI,KAAKU,6BAA6BZ,aAAaI,GAAG,GAAG;AACvD,WAAKY,wBAAwBhB,aAAaI,GAAG;IAC9C;AAID,QAAI,OAAOH,YAAY,UAAU;AAC/B,YAAMgB,oBAAoB,KAAKxB,iBAAiByB,IAAId,GAAG;AACvD,UAAIa,qBAAqBA,kBAAkBR,mBAAmB,GAAG;AAC/D,aAAKU,sBAAsBf,GAAG;MAC/B;IACF;AAED,QAAI,KAAKT,oBAAoByB,WAAWvC,WAAW,GAAG;AACpD,WAAKc,mBAAmB0B,OAAM;AAC9B,WAAK1B,qBAAqB;IAC3B;;;EAIH2B,cAAW;AACT,UAAMC,oBAAoB,KAAKhC,UAAUiC,iBACnC,IAAArC,8BAA8B,KAAK,KAAKS,GAAG,IAAI;AAGrD,aAAS6B,IAAI,GAAGA,IAAIF,kBAAkB1C,QAAQ4C,KAAK;AACjD,WAAKC,kCAAkCH,kBAAkBE,CAAC,CAAC;AAC3DF,wBAAkBE,CAAC,EAAE3C,gBAAgBK,8BAA8B;IACpE;AAED,SAAKQ,oBAAoB0B,OAAM;AAC/B,SAAK1B,qBAAqB;AAC1B,SAAKF,iBAAiBkC,MAAK;;;;;;EAOrBhB,sBAAsBV,SAAiBC,MAAa;AAC1D,UAAMM,iBAAiB,KAAKjB,UAAUqC,cAAc,KAAK;AACzDtB,iBAAaE,gBAAgB,KAAKZ,GAAG;AACrCY,mBAAeqB,cAAc5B;AAE7B,QAAIC,MAAM;AACRM,qBAAejC,aAAa,QAAQ2B,IAAI;IACzC;AAED,SAAK4B,yBAAwB;AAC7B,SAAKnC,mBAAoBoC,YAAYvB,cAAc;AACnD,SAAKf,iBAAiBc,IAAIF,OAAOJ,SAASC,IAAI,GAAG;MAACM;MAAgBC,gBAAgB;IAAC,CAAC;;;EAI9EU,sBAAsBf,KAAqB;AACjD,SAAKX,iBAAiByB,IAAId,GAAG,GAAGI,gBAAgBa,OAAM;AACtD,SAAK5B,iBAAiBuC,OAAO5B,GAAG;;;EAI1B0B,2BAAwB;AAC9B,QAAI,KAAKnC,oBAAoB;AAC3B;IACD;AAED,UAAMsC,qBAAqB;AAC3B,UAAMC,mBAAmB,KAAK3C,UAAUiC,iBAClC,IAAAS,kBAAuC,qBAAA;AAG7C,aAASR,IAAI,GAAGA,IAAIS,iBAAiBrD,QAAQ4C,KAAK;AAKhDS,uBAAiBT,CAAC,EAAEJ,OAAM;IAC3B;AAED,UAAMc,oBAAoB,KAAK5C,UAAUqC,cAAc,KAAK;AAM5DO,sBAAkBC,MAAMC,aAAa;AAGrCF,sBAAkBG,UAAUC,IAAIN,kBAAkB;AAClDE,sBAAkBG,UAAUC,IAAI,qBAAqB;AAGrD,QAAI,KAAK/C,aAAa,CAAC,KAAKA,UAAUgD,WAAW;AAC/CL,wBAAkB5D,aAAa,YAAY,QAAQ;IACpD;AAED,SAAKgB,UAAUkD,KAAKV,YAAYI,iBAAiB;AACjD,SAAKxC,qBAAqBwC;;;EAIpBT,kCAAkCgB,SAAgB;AAExD,UAAMC,uBAAuBzE,oBAAoBwE,SAAS,kBAAkB,EAAE/D,OAC5EX,QAAMA,GAAG4E,QAAQ1D,yBAAyB,KAAK,CAAC;AAElDwD,YAAQnE,aAAa,oBAAoBoE,qBAAqBnE,KAAK,GAAG,CAAC;;;;;;EAOjEqC,qBAAqB6B,SAAkBtC,KAAqB;AAClE,UAAMa,oBAAoB,KAAKxB,iBAAiByB,IAAId,GAAG;AAIvDvC,wBAAoB6E,SAAS,oBAAoBzB,kBAAkBT,eAAexC,EAAE;AACpF0E,YAAQnE,aAAaY,gCAAgC,KAAKS,GAAG;AAC7DqB,sBAAkBR;;;;;;EAOZO,wBAAwB0B,SAAkBtC,KAAqB;AACrE,UAAMa,oBAAoB,KAAKxB,iBAAiByB,IAAId,GAAG;AACvDa,sBAAkBR;AAElBhC,2BAAuBiE,SAAS,oBAAoBzB,kBAAkBT,eAAexC,EAAE;AACvF0E,YAAQ5D,gBAAgBK,8BAA8B;;;EAIhDyB,6BAA6B8B,SAAkBtC,KAAqB;AAC1E,UAAMyC,eAAe3E,oBAAoBwE,SAAS,kBAAkB;AACpE,UAAMzB,oBAAoB,KAAKxB,iBAAiByB,IAAId,GAAG;AACvD,UAAM0C,YAAY7B,qBAAqBA,kBAAkBT,eAAexC;AAExE,WAAO,CAAC,CAAC8E,aAAaD,aAAaD,QAAQE,SAAS,KAAK;;;EAInD3C,gBAAgBuC,SAAkBzC,SAAoC;AAC5E,QAAI,CAAC,KAAKc,eAAe2B,OAAO,GAAG;AACjC,aAAO;IACR;AAED,QAAIzC,WAAW,OAAOA,YAAY,UAAU;AAI1C,aAAO;IACR;AAED,UAAM8C,iBAAiB9C,WAAW,OAAO,KAAQ,GAAAA,OAAO,GAAG5B,KAAI;AAC/D,UAAM2E,YAAYN,QAAQ3D,aAAa,YAAY;AAInD,WAAOgE,iBAAiB,CAACC,aAAaA,UAAU3E,KAAI,MAAO0E,iBAAiB;;;EAItEhC,eAAe2B,SAAa;AAClC,WAAOA,QAAQO,aAAa,KAAK1D,UAAU2D;;;AA3OlC,eAAAC,OAAA,SAAAC,sBAAAC,GAAA;AAAA,SAAA,KAAAA,KAAAhE,gBAAAiE,SAaDC,QAAQ,GAbPD,SAaOE,QAAA,CAAA;AAAA;AAbP,eAAAC,QAAAC,mBAAA;EAAAC,OAAAtE;EAAauE,SAAbvE,eAAa8D;EAAAU,YADD;AAAM,CAAA;IAClBxE;;qDAAAyE,iBAAAzE,eAAa,CAAA;UADzB0E;WAAW;MAACF,YAAY;IAAM,CAAC;;;;YAc3BG;aAAOT,QAAQ;;;;;;AAmOpB,SAASlD,OAAOJ,SAA2BC,MAAa;AACtD,SAAO,OAAOD,YAAY,WAAc,GAAAC,QAAQ,EAAE,IAAID,OAAO,KAAKA;AACpE;AAGA,SAASK,aAAaoC,SAAsBuB,WAAiB;AAC3D,MAAI,CAACvB,QAAQ1E,IAAI;AACf0E,YAAQ1E,KAAQ,GAAAkB,yBAA6B,IAAA+E,SAAa,IAAA7E,QAAQ;EACnE;AACH;ICpQa8E,uBAAc;EAsBzB5E,YAAoB6E,QAA0B;AAA1B,SAAMA,SAANA;AArBZ,SAAgBC,mBAAG;AACnB,SAAWC,cAAa;AACxB,SAAKC,QAAG;AACC,SAAAC,mBAAmB,IAAIC,QAAO;AACvC,SAAAC,yBAAyBC,aAAaC;AAEtC,SAASC,YAAG;AAEZ,SAAoBC,uBAAgC,CAAA;AACpD,SAAWC,cAAG;AACd,SAAcC,iBAAG;MAACC,SAAS;MAAOC,OAAO;IAAE;AAM3C,SAAgBC,mBAAIC,UAAYA,KAAKC;AAGrC,SAAeC,kBAAa,CAAA;AAwB3B,SAAAC,SAAS,IAAId,QAAO;AAGpB,SAAAe,SAAS,IAAIf,QAAO;AArB3B,QAAIL,kBAAkBqB,WAAW;AAC/B,WAAKC,2BAA2BtB,OAAOuB,QAAQC,UAAWC,cAA0B;AAClF,YAAI,KAAKvB,aAAa;AACpB,gBAAMwB,YAAYD,SAASE,QAAO;AAClC,gBAAMC,WAAWF,UAAUjD,QAAQ,KAAKyB,WAAW;AAEnD,cAAI0B,WAAW,MAAMA,aAAa,KAAK3B,kBAAkB;AACvD,iBAAKA,mBAAmB2B;UACzB;QACF;MACH,CAAC;IACF;;;;;;;EAiBHC,cAAcC,WAA+B;AAC3C,SAAKf,mBAAmBe;AACxB,WAAO;;;;;;;EAQTC,SAASC,aAAa,MAAI;AACxB,SAAK7B,QAAQ6B;AACb,WAAO;;;;;;EAOTC,wBAAwBpB,UAAmB,MAAI;AAC7C,SAAKJ,YAAYI;AACjB,WAAO;;;;;;;EAQTqB,0BAA0BC,WAA+B;AACvD,SAAKC,cAAcD;AACnB,WAAO;;;;;;EAOTE,wBAAwBC,MAAiC;AACvD,SAAK5B,uBAAuB4B;AAC5B,WAAO;;;;;;EAOTC,cAAcC,mBAA2B,KAAG;AAC1C,SACG,OAAOC,cAAc,eAAeA,cACrC,KAAKzC,OAAOtF,UACZ,KAAKsF,OAAOhG,KAAKgH,UAAQ,OAAOA,KAAK0B,aAAa,UAAU,GAC5D;AACA,YAAMC,MAAM,8EAA8E;IAC3F;AAED,SAAKrC,uBAAuBsC,YAAW;AAKvC,SAAKtC,yBAAyB,KAAKF,iBAChCyC,KACCC,IAAIC,YAAU,KAAK7B,gBAAgB/G,KAAK4I,MAAM,CAAC,GAC/CC,aAAaR,gBAAgB,GAC7BhI,OAAO,MAAM,KAAK0G,gBAAgBxG,SAAS,CAAC,GAC5CuI,IAAI,MAAM,KAAK/B,gBAAgB7G,KAAK,EAAE,CAAC,CAAC,EAEzCmH,UAAU0B,iBAAc;AACvB,YAAMC,QAAQ,KAAKC,eAAc;AAIjC,eAAS9F,IAAI,GAAGA,IAAI6F,MAAMzI,SAAS,GAAG4C,KAAK;AACzC,cAAM+F,SAAS,KAAKpD,mBAAmB3C,KAAK6F,MAAMzI;AAClD,cAAMsG,OAAOmC,MAAME,KAAK;AAExB,YACE,CAAC,KAAKtC,iBAAiBC,IAAI,KAC3BA,KAAK0B,SAAS,EAAGY,YAAW,EAAGpJ,KAAI,EAAGuE,QAAQyE,WAAW,MAAM,GAC/D;AACA,eAAKK,cAAcF,KAAK;AACxB;QACD;MACF;AAED,WAAKnC,kBAAkB,CAAA;IACzB,CAAC;AAEH,WAAO;;;EAITsC,kBAAe;AACb,SAAKtC,kBAAkB,CAAA;AACvB,WAAO;;;;;;;EAQTuC,eAAe5C,UAAmB,MAAI;AACpC,SAAKF,cAAcE;AACnB,WAAO;;;;;;;;EAST6C,eAAe7C,UAAmB,MAAMC,QAAgB,IAAE;AACxD,SAAKF,iBAAiB;MAACC;MAASC;IAAK;AACrC,WAAO;;EAeTyC,cAAcvC,MAAS;AACrB,UAAM2C,qBAAqB,KAAKzD;AAEhC,SAAK0D,iBAAiB5C,IAAI;AAE1B,QAAI,KAAKd,gBAAgByD,oBAAoB;AAC3C,WAAKvC,OAAOyC,KAAK,KAAK5D,gBAAgB;IACvC;;;;;;EAOH6D,UAAUC,OAAoB;AAC5B,UAAMC,UAAUD,MAAMC;AACtB,UAAMC,YAAyC,CAAC,UAAU,WAAW,WAAW,UAAU;AAC1F,UAAMC,oBAAoBD,UAAUE,MAAMC,cAAW;AACnD,aAAO,CAACL,MAAMK,QAAQ,KAAK,KAAK1D,qBAAqBjC,QAAQ2F,QAAQ,IAAI;IAC3E,CAAC;AAED,YAAQJ,SAAO;MACb,KAAKK;AACH,aAAKlD,OAAO0C,KAAI;AAChB;MAEF,KAAKS;AACH,YAAI,KAAK7D,aAAayD,mBAAmB;AACvC,eAAKK,kBAAiB;AACtB;QACD,OAAM;AACL;QACD;MAEH,KAAKC;AACH,YAAI,KAAK/D,aAAayD,mBAAmB;AACvC,eAAKO,sBAAqB;AAC1B;QACD,OAAM;AACL;QACD;MAEH,KAAKC;AACH,YAAI,KAAKtC,eAAe8B,mBAAmB;AACzC,eAAK9B,gBAAgB,QAAQ,KAAKqC,sBAAqB,IAAK,KAAKF,kBAAiB;AAClF;QACD,OAAM;AACL;QACD;MAEH,KAAKI;AACH,YAAI,KAAKvC,eAAe8B,mBAAmB;AACzC,eAAK9B,gBAAgB,QAAQ,KAAKmC,kBAAiB,IAAK,KAAKE,sBAAqB;AAClF;QACD,OAAM;AACL;QACD;MAEH,KAAKG;AACH,YAAI,KAAKjE,eAAeuD,mBAAmB;AACzC,eAAKW,mBAAkB;AACvB;QACD,OAAM;AACL;QACD;MAEH,KAAKC;AACH,YAAI,KAAKnE,eAAeuD,mBAAmB;AACzC,eAAKa,kBAAiB;AACtB;QACD,OAAM;AACL;QACD;MAEH,KAAKC;AACH,YAAI,KAAKpE,eAAeC,WAAWqD,mBAAmB;AACpD,gBAAMe,cAAc,KAAKhF,mBAAmB,KAAKW,eAAeE;AAChE,eAAKoE,sBAAsBD,cAAc,IAAIA,cAAc,GAAG,CAAC;AAC/D;QACD,OAAM;AACL;QACD;MAEH,KAAKE;AACH,YAAI,KAAKvE,eAAeC,WAAWqD,mBAAmB;AACpD,gBAAMe,cAAc,KAAKhF,mBAAmB,KAAKW,eAAeE;AAChE,gBAAMsE,cAAc,KAAKhC,eAAc,EAAG1I;AAC1C,eAAKwK,sBAAsBD,cAAcG,cAAcH,cAAcG,cAAc,GAAG,EAAE;AACxF;QACD,OAAM;AACL;QACD;MAEH;AACE,YAAIlB,qBAAqBmB,eAAetB,OAAO,UAAU,GAAG;AAG1D,cAAIA,MAAM9H,OAAO8H,MAAM9H,IAAIvB,WAAW,GAAG;AACvC,iBAAK0F,iBAAiByD,KAAKE,MAAM9H,IAAIqJ,kBAAiB,CAAE;UACzD,WAAWtB,WAAWuB,KAAKvB,WAAWwB,KAAOxB,WAAWyB,QAAQzB,WAAW0B,MAAO;AACjF,iBAAKtF,iBAAiByD,KAAK8B,OAAOC,aAAa5B,OAAO,CAAC;UACxD;QACF;AAID;IACH;AAED,SAAK9C,kBAAkB,CAAA;AACvB6C,UAAM8B,eAAc;;;EAItB,IAAIC,kBAAe;AACjB,WAAO,KAAK7F;;;EAId,IAAI8F,aAAU;AACZ,WAAO,KAAK7F;;;EAId8F,WAAQ;AACN,WAAO,KAAK9E,gBAAgBxG,SAAS;;;EAIvCmK,qBAAkB;AAChB,SAAKK,sBAAsB,GAAG,CAAC;;;EAIjCH,oBAAiB;AACf,SAAKG,sBAAsB,KAAKlF,OAAOtF,SAAS,GAAG,EAAE;;;EAIvD6J,oBAAiB;AACf,SAAKtE,mBAAmB,IAAI,KAAK4E,mBAAkB,IAAK,KAAKoB,sBAAsB,CAAC;;;EAItFxB,wBAAqB;AACnB,SAAKxE,mBAAmB,KAAK,KAAKE,QAC9B,KAAK4E,kBAAiB,IACtB,KAAKkB,sBAAsB,EAAE;;EAenCrC,iBAAiB5C,MAAS;AACxB,UAAMU,YAAY,KAAK0B,eAAc;AACrC,UAAMC,QAAQ,OAAOrC,SAAS,WAAWA,OAAOU,UAAUjD,QAAQuC,IAAI;AACtE,UAAM+E,aAAarE,UAAU2B,KAAK;AAGlC,SAAKnD,cAAc6F,cAAc,OAAO,OAAOA;AAC/C,SAAK9F,mBAAmBoD;;;EAI1B6C,UAAO;AACL,SAAK5F,uBAAuBsC,YAAW;AACvC,SAAKtB,0BAA0BsB,YAAW;AAC1C,SAAKxC,iBAAiB+F,SAAQ;AAC9B,SAAKhF,OAAOgF,SAAQ;AACpB,SAAK/E,OAAO+E,SAAQ;AACpB,SAAKjF,kBAAkB,CAAA;;;;;;;EAQjB+E,sBAAsBnF,OAAa;AACzC,SAAKX,QAAQ,KAAKiG,qBAAqBtF,KAAK,IAAI,KAAKuF,wBAAwBvF,KAAK;;;;;;;EAQ5EsF,qBAAqBtF,OAAa;AACxC,UAAMqC,QAAQ,KAAKC,eAAc;AAEjC,aAAS9F,IAAI,GAAGA,KAAK6F,MAAMzI,QAAQ4C,KAAK;AACtC,YAAM+F,SAAS,KAAKpD,mBAAmBa,QAAQxD,IAAI6F,MAAMzI,UAAUyI,MAAMzI;AACzE,YAAMsG,OAAOmC,MAAME,KAAK;AAExB,UAAI,CAAC,KAAKtC,iBAAiBC,IAAI,GAAG;AAChC,aAAKuC,cAAcF,KAAK;AACxB;MACD;IACF;;;;;;;EAQKgD,wBAAwBvF,OAAa;AAC3C,SAAKoE,sBAAsB,KAAKjF,mBAAmBa,OAAOA,KAAK;;;;;;;EAQzDoE,sBAAsB7B,OAAeiD,eAAqB;AAChE,UAAMnD,QAAQ,KAAKC,eAAc;AAEjC,QAAI,CAACD,MAAME,KAAK,GAAG;AACjB;IACD;AAED,WAAO,KAAKtC,iBAAiBoC,MAAME,KAAK,CAAC,GAAG;AAC1CA,eAASiD;AAET,UAAI,CAACnD,MAAME,KAAK,GAAG;AACjB;MACD;IACF;AAED,SAAKE,cAAcF,KAAK;;;EAIlBD,iBAAc;AACpB,WAAO,KAAKpD,kBAAkBqB,YAAY,KAAKrB,OAAO2B,QAAO,IAAK,KAAK3B;;AAE1E;ACpcK,IAAOuG,6BAAP,cAA6CxG,eAAiC;EAiBzEwD,cAAcF,OAAU;AAC/B,QAAI,KAAK0C,YAAY;AACnB,WAAKA,WAAWS,kBAAiB;IAClC;AACD,UAAMjD,cAAcF,KAAK;AACzB,QAAI,KAAK0C,YAAY;AACnB,WAAKA,WAAWU,gBAAe;IAChC;;AAEJ;AC5BK,IAAOC,kBAAP,cAAkC3G,eAAmC;EAA3E5E,cAAA;;AACU,SAAOwL,UAAgB;;;;;;EAM/BC,eAAeC,QAAmB;AAChC,SAAKF,UAAUE;AACf,WAAO;;EAgBAtD,cAAcvC,MAAS;AAC9B,UAAMuC,cAAcvC,IAAI;AAExB,QAAI,KAAK+E,YAAY;AACnB,WAAKA,WAAWe,MAAM,KAAKH,OAAO;IACnC;;AAEJ;ICvCYI,0BAAiB;EAA9B5L,cAAA;AAIE,SAAgB6L,mBAAY;;AAC7B;IAWYC,8BAAAA,sBAAoB;EAC/B9L,YAAoBE,WAAmB;AAAnB,SAASA,YAATA;;;;;;;;EAQpB6L,WAAW3I,SAAoB;AAG7B,WAAOA,QAAQ4I,aAAa,UAAU;;;;;;;;;;EAWxCC,UAAU7I,SAAoB;AAC5B,WAAO8I,YAAY9I,OAAO,KAAK+I,iBAAiB/I,OAAO,EAAEL,eAAe;;;;;;;;;EAU1EqJ,WAAWhJ,SAAoB;AAE7B,QAAI,CAAC,KAAKlD,UAAUgD,WAAW;AAC7B,aAAO;IACR;AAED,UAAMmJ,eAAeC,gBAAgBC,UAAUnJ,OAAO,CAAC;AAEvD,QAAIiJ,cAAc;AAEhB,UAAIG,iBAAiBH,YAAY,MAAM,IAAI;AACzC,eAAO;MACR;AAGD,UAAI,CAAC,KAAKJ,UAAUI,YAAY,GAAG;AACjC,eAAO;MACR;IACF;AAED,QAAII,WAAWrJ,QAAQqJ,SAASC,YAAW;AAC3C,QAAIC,gBAAgBH,iBAAiBpJ,OAAO;AAE5C,QAAIA,QAAQ4I,aAAa,iBAAiB,GAAG;AAC3C,aAAOW,kBAAkB;IAC1B;AAED,QAAIF,aAAa,YAAYA,aAAa,UAAU;AAIlD,aAAO;IACR;AAGD,QAAI,KAAKvM,UAAU0M,UAAU,KAAK1M,UAAU2M,OAAO,CAACC,yBAAyB1J,OAAO,GAAG;AACrF,aAAO;IACR;AAED,QAAIqJ,aAAa,SAAS;AAGxB,UAAI,CAACrJ,QAAQ4I,aAAa,UAAU,GAAG;AACrC,eAAO;MACR;AAGD,aAAOW,kBAAkB;IAC1B;AAED,QAAIF,aAAa,SAAS;AAKxB,UAAIE,kBAAkB,IAAI;AACxB,eAAO;MACR;AAGD,UAAIA,kBAAkB,MAAM;AAC1B,eAAO;MACR;AAID,aAAO,KAAKzM,UAAU6M,WAAW3J,QAAQ4I,aAAa,UAAU;IACjE;AAED,WAAO5I,QAAQ4J,YAAY;;;;;;;;;EAU7BC,YAAY7J,SAAsB8J,QAA0B;AAG1D,WACEC,uBAAuB/J,OAAO,KAC9B,CAAC,KAAK2I,WAAW3I,OAAO,MACvB8J,QAAQrB,oBAAoB,KAAKI,UAAU7I,OAAO;;;;mBAvH5C0I,uBJyBA9H,SIzBoBE,QAAA,CAAA;AAAA;AAApB,sBAAAC,QJyBAC,mBAAA;EAAAC,OIzBAyH;EAAoBxH,SAApBwH,sBAAoBjI;EAAAU,YADR;AAAM,CAAA;IAClBuH;;qDJyBAtH,iBIzBAsH,sBAAoB,CAAA;UADhCrH;WAAW;MAACF,YAAY;IAAM,CAAC;;;;;AAkIhC,SAAS+H,gBAAgBc,SAAc;AACrC,MAAI;AACF,WAAOA,QAAOf;EACf,QAAO;AACN,WAAO;EACR;AACH;AAGA,SAASH,YAAY9I,SAAoB;AAGvC,SAAO,CAAC,EACNA,QAAQiK,eACRjK,QAAQkK,gBACP,OAAOlK,QAAQmK,mBAAmB,cAAcnK,QAAQmK,eAAc,EAAGhO;AAE9E;AAGA,SAASiO,oBAAoBpK,SAAa;AACxC,MAAIqJ,WAAWrJ,QAAQqJ,SAASC,YAAW;AAC3C,SACED,aAAa,WACbA,aAAa,YACbA,aAAa,YACbA,aAAa;AAEjB;AAGA,SAASgB,cAAcrK,SAAoB;AACzC,SAAOsK,eAAetK,OAAO,KAAKA,QAAQuK,QAAQ;AACpD;AAGA,SAASC,iBAAiBxK,SAAoB;AAC5C,SAAOyK,gBAAgBzK,OAAO,KAAKA,QAAQ4I,aAAa,MAAM;AAChE;AAGA,SAAS0B,eAAetK,SAAoB;AAC1C,SAAOA,QAAQqJ,SAASC,YAAW,KAAM;AAC3C;AAGA,SAASmB,gBAAgBzK,SAAoB;AAC3C,SAAOA,QAAQqJ,SAASC,YAAW,KAAM;AAC3C;AAGA,SAASoB,iBAAiB1K,SAAoB;AAC5C,MAAI,CAACA,QAAQ4I,aAAa,UAAU,KAAK5I,QAAQ4J,aAAae,QAAW;AACvE,WAAO;EACR;AAED,MAAIf,WAAW5J,QAAQ3D,aAAa,UAAU;AAC9C,SAAO,CAAC,EAAEuN,YAAY,CAACgB,MAAMC,SAASjB,UAAU,EAAE,CAAC;AACrD;AAMA,SAASR,iBAAiBpJ,SAAoB;AAC5C,MAAI,CAAC0K,iBAAiB1K,OAAO,GAAG;AAC9B,WAAO;EACR;AAGD,QAAM4J,WAAWiB,SAAS7K,QAAQ3D,aAAa,UAAU,KAAK,IAAI,EAAE;AAEpE,SAAOuO,MAAMhB,QAAQ,IAAI,KAAKA;AAChC;AAGA,SAASF,yBAAyB1J,SAAoB;AACpD,MAAIqJ,WAAWrJ,QAAQqJ,SAASC,YAAW;AAC3C,MAAIwB,YAAYzB,aAAa,WAAYrJ,QAA6BuK;AAEtE,SACEO,cAAc,UACdA,cAAc,cACdzB,aAAa,YACbA,aAAa;AAEjB;AAMA,SAASU,uBAAuB/J,SAAoB;AAElD,MAAIqK,cAAcrK,OAAO,GAAG;AAC1B,WAAO;EACR;AAED,SACEoK,oBAAoBpK,OAAO,KAC3BwK,iBAAiBxK,OAAO,KACxBA,QAAQ4I,aAAa,iBAAiB,KACtC8B,iBAAiB1K,OAAO;AAE5B;AAGA,SAASmJ,UAAU4B,MAAiB;AAElC,SAAQA,KAAKC,iBAAiBD,KAAKC,cAAcC,eAAgBjB;AACnE;ICxOakB,kBAAS;;EAUpB,IAAI5I,UAAO;AACT,WAAO,KAAK6I;;EAEd,IAAI7I,QAAQ8I,OAAc;AACxB,SAAKD,WAAWC;AAEhB,QAAI,KAAKC,gBAAgB,KAAKC,YAAY;AACxC,WAAKC,sBAAsBH,OAAO,KAAKC,YAAY;AACnD,WAAKE,sBAAsBH,OAAO,KAAKE,UAAU;IAClD;;EAIH1O,YACW4O,UACDC,UACCC,SACA7O,WACT8O,eAAe,OAAK;AAJX,SAAQH,WAARA;AACD,SAAQC,WAARA;AACC,SAAOC,UAAPA;AACA,SAAS7O,YAATA;AAxBH,SAAY+O,eAAG;AAGb,SAAmBC,sBAAG,MAAM,KAAKC,yBAAwB;AACzD,SAAiBC,oBAAG,MAAM,KAAKC,0BAAyB;AAcxD,SAAQb,WAAY;AAS5B,QAAI,CAACQ,cAAc;AACjB,WAAKM,cAAa;IACnB;;;EAIHtE,UAAO;AACL,UAAMuE,cAAc,KAAKb;AACzB,UAAMc,YAAY,KAAKb;AAEvB,QAAIY,aAAa;AACfA,kBAAYE,oBAAoB,SAAS,KAAKP,mBAAmB;AACjEK,kBAAYvN,OAAM;IACnB;AAED,QAAIwN,WAAW;AACbA,gBAAUC,oBAAoB,SAAS,KAAKL,iBAAiB;AAC7DI,gBAAUxN,OAAM;IACjB;AAED,SAAK0M,eAAe,KAAKC,aAAa;AACtC,SAAKM,eAAe;;;;;;;;EAStBK,gBAAa;AAEX,QAAI,KAAKL,cAAc;AACrB,aAAO;IACR;AAED,SAAKF,QAAQW,kBAAkB,MAAK;AAClC,UAAI,CAAC,KAAKhB,cAAc;AACtB,aAAKA,eAAe,KAAKiB,cAAa;AACtC,aAAKjB,aAAckB,iBAAiB,SAAS,KAAKV,mBAAmB;MACtE;AAED,UAAI,CAAC,KAAKP,YAAY;AACpB,aAAKA,aAAa,KAAKgB,cAAa;AACpC,aAAKhB,WAAYiB,iBAAiB,SAAS,KAAKR,iBAAiB;MAClE;IACH,CAAC;AAED,QAAI,KAAKP,SAASgB,YAAY;AAC5B,WAAKhB,SAASgB,WAAWC,aAAa,KAAKpB,cAAe,KAAKG,QAAQ;AACvE,WAAKA,SAASgB,WAAWC,aAAa,KAAKnB,YAAa,KAAKE,SAASkB,WAAW;AACjF,WAAKd,eAAe;IACrB;AAED,WAAO,KAAKA;;;;;;;EAQde,6BAA6BC,SAAsB;AACjD,WAAO,IAAIC,QAAiBC,aAAU;AACpC,WAAKC,iBAAiB,MAAMD,QAAQ,KAAKE,oBAAoBJ,OAAO,CAAC,CAAC;IACxE,CAAC;;;;;;;;EASHK,mCAAmCL,SAAsB;AACvD,WAAO,IAAIC,QAAiBC,aAAU;AACpC,WAAKC,iBAAiB,MAAMD,QAAQ,KAAKd,0BAA0BY,OAAO,CAAC,CAAC;IAC9E,CAAC;;;;;;;;EASHM,kCAAkCN,SAAsB;AACtD,WAAO,IAAIC,QAAiBC,aAAU;AACpC,WAAKC,iBAAiB,MAAMD,QAAQ,KAAKhB,yBAAyBc,OAAO,CAAC,CAAC;IAC7E,CAAC;;;;;;;EAQKO,mBAAmBC,OAAsB;AAE/C,UAAMC,UAAU,KAAK7B,SAAS1M,iBACP,qBAAAsO,KAAK,qBAA0BA,KAAU,iBAAiBA,KAAK,GAAG;AAGzF,QAAI,OAAOlJ,cAAc,eAAeA,WAAW;AACjD,eAASnF,IAAI,GAAGA,IAAIsO,QAAQlR,QAAQ4C,KAAK;AAEvC,YAAIsO,QAAQtO,CAAC,EAAE6J,aAA0B,aAAAwE,KAAO,EAAA,GAAG;AACjDE,kBAAQC,KACN,gDAAgDH,KAAU,yBAClCA,KAAiC,iEAEzDC,QAAQtO,CAAC,CAAC;QAEb,WAAUsO,QAAQtO,CAAC,EAAE6J,aAAiC,oBAAAwE,KAAO,EAAA,GAAG;AAC/DE,kBAAQC,KACN,uDAAuDH,KAAU,yBACzCA,KAA2C,iEAEnEC,QAAQtO,CAAC,CAAC;QAEb;MACF;IACF;AAED,QAAIqO,SAAS,SAAS;AACpB,aAAOC,QAAQlR,SAASkR,QAAQ,CAAC,IAAI,KAAKG,yBAAyB,KAAKhC,QAAQ;IACjF;AACD,WAAO6B,QAAQlR,SACXkR,QAAQA,QAAQlR,SAAS,CAAC,IAC1B,KAAKsR,wBAAwB,KAAKjC,QAAQ;;;;;;EAOhDwB,oBAAoBJ,SAAsB;AAExC,UAAMc,oBAAoB,KAAKlC,SAASmC,cACf,wCAAsB;AAG/C,QAAID,mBAAmB;AAErB,WACG,OAAOxJ,cAAc,eAAeA,cACrCwJ,kBAAkB9E,aAAa,mBAAmB,GAClD;AACA0E,gBAAQC,KACmD,2IAGzDG,iBAAiB;MAEpB;AAID,WACG,OAAOxJ,cAAc,eAAeA,cACrC,CAAC,KAAKuH,SAAS5B,YAAY6D,iBAAiB,GAC5C;AACAJ,gBAAQC,KAAK,0DAA0DG,iBAAiB;MACzF;AAED,UAAI,CAAC,KAAKjC,SAAS5B,YAAY6D,iBAAiB,GAAG;AACjD,cAAME,iBAAiB,KAAKJ,yBAAyBE,iBAAiB;AACtEE,wBAAgBrF,MAAMqE,OAAO;AAC7B,eAAO,CAAC,CAACgB;MACV;AAEDF,wBAAkBnF,MAAMqE,OAAO;AAC/B,aAAO;IACR;AAED,WAAO,KAAKZ,0BAA0BY,OAAO;;;;;;EAO/CZ,0BAA0BY,SAAsB;AAC9C,UAAMc,oBAAoB,KAAKP,mBAAmB,OAAO;AAEzD,QAAIO,mBAAmB;AACrBA,wBAAkBnF,MAAMqE,OAAO;IAChC;AAED,WAAO,CAAC,CAACc;;;;;;EAOX5B,yBAAyBc,SAAsB;AAC7C,UAAMc,oBAAoB,KAAKP,mBAAmB,KAAK;AAEvD,QAAIO,mBAAmB;AACrBA,wBAAkBnF,MAAMqE,OAAO;IAChC;AAED,WAAO,CAAC,CAACc;;;;;EAMXG,cAAW;AACT,WAAO,KAAKjC;;;EAIN4B,yBAAyBM,MAAiB;AAChD,QAAI,KAAKrC,SAAS5B,YAAYiE,IAAI,KAAK,KAAKrC,SAASzC,WAAW8E,IAAI,GAAG;AACrE,aAAOA;IACR;AAED,UAAMC,WAAWD,KAAKC;AAEtB,aAAShP,IAAI,GAAGA,IAAIgP,SAAS5R,QAAQ4C,KAAK;AACxC,YAAMiP,gBACJD,SAAShP,CAAC,EAAEwB,aAAa,KAAK1D,UAAU2D,eACpC,KAAKgN,yBAAyBO,SAAShP,CAAC,CAAgB,IACxD;AAEN,UAAIiP,eAAe;AACjB,eAAOA;MACR;IACF;AAED,WAAO;;;EAIDP,wBAAwBK,MAAiB;AAC/C,QAAI,KAAKrC,SAAS5B,YAAYiE,IAAI,KAAK,KAAKrC,SAASzC,WAAW8E,IAAI,GAAG;AACrE,aAAOA;IACR;AAGD,UAAMC,WAAWD,KAAKC;AAEtB,aAAShP,IAAIgP,SAAS5R,SAAS,GAAG4C,KAAK,GAAGA,KAAK;AAC7C,YAAMiP,gBACJD,SAAShP,CAAC,EAAEwB,aAAa,KAAK1D,UAAU2D,eACpC,KAAKiN,wBAAwBM,SAAShP,CAAC,CAAgB,IACvD;AAEN,UAAIiP,eAAe;AACjB,eAAOA;MACR;IACF;AAED,WAAO;;;EAID1B,gBAAa;AACnB,UAAM2B,SAAS,KAAKpR,UAAUqC,cAAc,KAAK;AACjD,SAAKqM,sBAAsB,KAAKJ,UAAU8C,MAAM;AAChDA,WAAOrO,UAAUC,IAAI,qBAAqB;AAC1CoO,WAAOrO,UAAUC,IAAI,uBAAuB;AAC5CoO,WAAOpS,aAAa,eAAe,MAAM;AACzC,WAAOoS;;;;;;;EAQD1C,sBAAsB2C,WAAoBD,QAAmB;AAGnEC,gBAAYD,OAAOpS,aAAa,YAAY,GAAG,IAAIoS,OAAO7R,gBAAgB,UAAU;;;;;;EAO5E+R,cAAc7L,SAAgB;AACtC,QAAI,KAAK+I,gBAAgB,KAAKC,YAAY;AACxC,WAAKC,sBAAsBjJ,SAAS,KAAK+I,YAAY;AACrD,WAAKE,sBAAsBjJ,SAAS,KAAKgJ,UAAU;IACpD;;;EAIKyB,iBAAiBqB,IAAa;AACpC,QAAI,KAAK1C,QAAQ2C,UAAU;AACzBD,SAAE;IACH,OAAM;AACL,WAAK1C,QAAQ4C,SAAShK,KAAKiK,KAAK,CAAC,CAAC,EAAEtL,UAAUmL,EAAE;IACjD;;AAEJ;IAQYI,0BAAAA,kBAAgB;EAG3B5R,YACU6O,UACAC,SACU7O,WAAc;AAFxB,SAAQ4O,WAARA;AACA,SAAOC,UAAPA;AAGR,SAAK7O,YAAYA;;;;;;;;;EAUnB4R,OAAOzO,SAAsB0O,uBAAgC,OAAK;AAChE,WAAO,IAAIxD,UACTlL,SACA,KAAKyL,UACL,KAAKC,SACL,KAAK7O,WACL6R,oBAAoB;;;AAxBb,kBAAAjO,OAAA,SAAAkO,yBAAAhO,GAAA;AAAA,SAAA,KAAAA,KAAA6N,mBL9TA5N,SK8TgB8H,oBAAA,GL9ThB9H,SK8TgBgO,MAAA,GL9ThBhO,SKoUDC,QAAQ,CAAA;AAAA;AANP,kBAAAE,QL9TAC,mBAAA;EAAAC,OK8TAuN;EAAgBtN,SAAhBsN,kBAAgB/N;EAAAU,YADJ;AAAM,CAAA;IAClBqN;;qDL9TApN,iBK8TAoN,kBAAgB,CAAA;UAD5BnN;WAAW;MAACF,YAAY;IAAM,CAAC;;;;;;;;YAO3BG;aAAOT,QAAQ;;;;IA4BPgO,sBAAAA,cAAY;;EAQvB,IACIvM,UAAO;AACT,WAAO,KAAKwM,UAAUxM;;EAExB,IAAIA,QAAQ8I,OAAc;AACxB,SAAK0D,UAAUxM,UAAU8I;;EAS3BxO,YACUmS,aACAC,mBAKUnS,WAAc;AANxB,SAAWkS,cAAXA;AACA,SAAiBC,oBAAjBA;AAnBF,SAAyBC,4BAAuB;AA0BtD,SAAKH,YAAY,KAAKE,kBAAkBP,OAAO,KAAKM,YAAYG,eAAe,IAAI;;EAGrFtQ,cAAW;AACT,SAAKkQ,UAAUnH,QAAO;AAItB,QAAI,KAAKsH,2BAA2B;AAClC,WAAKA,0BAA0B1G,MAAK;AACpC,WAAK0G,4BAA4B;IAClC;;EAGHE,qBAAkB;AAChB,SAAKL,UAAU7C,cAAa;AAE5B,QAAI,KAAKmD,aAAa;AACpB,WAAKC,cAAa;IACnB;;EAGHC,YAAS;AACP,QAAI,CAAC,KAAKR,UAAUjB,YAAW,GAAI;AACjC,WAAKiB,UAAU7C,cAAa;IAC7B;;EAGHsD,YAAYvM,SAAsB;AAChC,UAAMwM,oBAAoBxM,QAAQ,aAAa;AAE/C,QACEwM,qBACA,CAACA,kBAAkBC,eACnB,KAAKL,eACL,KAAKN,UAAUjB,YAAW,GAC1B;AACA,WAAKwB,cAAa;IACnB;;EAGKA,gBAAa;AACnB,SAAKJ,4BAA4BS,kCAAiC;AAClE,SAAKZ,UAAUnC,6BAA4B;;;AA1ElC,cAAAlM,OAAA,SAAAkP,qBAAAhP,GAAA;AAAA,SAAA,KAAAA,KAAAkO,eLhWAe,kBKgWYC,UAAA,GLhWZD,kBKgWYpB,gBAAA,GLhWZoB,kBK6XD/O,QAAQ,CAAA;AAAA;qBL7XPiP,kBAAA;EAAAvF,MKgWAsE;EAAYkB,WAAA,CAAA,CAAA,IAAA,gBAAA,EAAA,CAAA;EAAAC,QAAA;IAAA1N,SAAA,CAAA,gBAAA,WAQmB2N,gBAAgB;IAAAb,aAAA,CAAA,2BAAA,eAYLa,gBAAgB;EAAA;EAAAC,UAAA,CAAA,cAAA;EAAAC,UAAA,CLpX1DC,0BAAAC,oBAAA;AAAA,CAAA;IKgWAxB;;qDLhWAzN,iBKgWAyN,cAAY,CAAA;UAJxByB;IAAUC,MAAA,CAAA;MACTC,UAAU;MACVN,UAAU;IACX,CAAA;;;;;;;;YA8BI5O;aAAOT,QAAQ;;;IApBdyB,SAAO,CAAA;YADVmO;MAAMF,MAAA,CAAA;QAACG,OAAO;QAAgBC,WAAWV;MAAgB,CAAC;;IAYab,aAAW,CAAA;YAAlFqB;MAAMF,MAAA,CAAA;QAACG,OAAO;QAA2BC,WAAWV;MAAgB,CAAC;;;;ACtZlE,IAAOW,wBAAP,cAAqC1F,UAAS;;EAElD,IAAa5I,UAAO;AAClB,WAAO,KAAK6I;;EAEd,IAAa7I,QAAQ8I,OAAc;AACjC,SAAKD,WAAWC;AAChB,QAAI,KAAKD,UAAU;AACjB,WAAK0F,kBAAkBC,SAAS,IAAI;IACrC,OAAM;AACL,WAAKD,kBAAkBE,WAAW,IAAI;IACvC;;EAGHnU,YACE4O,UACAC,UACAC,SACA7O,WACQgU,mBACAG,gBACRlH,QAAmC;AAEnC,UAAM0B,UAAUC,UAAUC,SAAS7O,WAAWiN,OAAOmH,KAAK;AAJlD,SAAiBJ,oBAAjBA;AACA,SAAcG,iBAAdA;AAIR,SAAKH,kBAAkBC,SAAS,IAAI;;;EAI7BnJ,UAAO;AACd,SAAKkJ,kBAAkBE,WAAW,IAAI;AACtC,UAAMpJ,QAAO;;;EAIfuJ,UAAO;AACL,SAAKF,eAAeG,aAAa,IAAI;AACrC,SAAKhD,cAAc,IAAI;;;EAIzBiD,WAAQ;AACN,SAAKJ,eAAeK,WAAW,IAAI;AACnC,SAAKlD,cAAc,KAAK;;AAE3B;ICtDYmD,4BAA4B,IAAIC,eAC3C,2BAA2B;ICGhBC,4CAAmC;EAAhD5U,cAAA;AAEU,SAAS6U,YAAqC;;;EAGtDN,aAAarC,WAAgC;AAE3C,QAAI,KAAK2C,WAAW;AAClB3C,gBAAUjS,UAAUuP,oBAAoB,SAAS,KAAKqF,WAAY,IAAI;IACvE;AAED,SAAKA,YAAaC,OAAkB,KAAKC,WAAW7C,WAAW4C,CAAC;AAChE5C,cAAUpD,QAAQW,kBAAkB,MAAK;AACvCyC,gBAAUjS,UAAU0P,iBAAiB,SAAS,KAAKkF,WAAY,IAAI;IACrE,CAAC;;;EAIHJ,WAAWvC,WAAgC;AACzC,QAAI,CAAC,KAAK2C,WAAW;AACnB;IACD;AACD3C,cAAUjS,UAAUuP,oBAAoB,SAAS,KAAKqF,WAAY,IAAI;AACtE,SAAKA,YAAY;;;;;;;;;EAUXE,WAAW7C,WAAkCtJ,OAAiB;AACpE,UAAMoM,SAASpM,MAAMoM;AACrB,UAAMC,gBAAgB/C,UAAUtD;AAIhC,QAAIoG,UAAU,CAACC,cAAcC,SAASF,MAAM,KAAK,CAACA,OAAOG,UAAU,sBAAsB,GAAG;AAI1FC,iBAAW,MAAK;AAEd,YAAIlD,UAAUxM,WAAW,CAACuP,cAAcC,SAAShD,UAAUjS,UAAUoV,aAAa,GAAG;AACnFnD,oBAAU9C,0BAAyB;QACpC;MACH,CAAC;IACF;;AAEJ;IC5CYkG,0BAAAA,kBAAgB;EAD7BtV,cAAA;AAIU,SAAeuV,kBAAuB,CAAA;EAqC/C;;;;;EA/BCrB,SAAShC,WAA2B;AAElC,SAAKqD,kBAAkB,KAAKA,gBAAgBlW,OAAOmW,QAAMA,OAAOtD,SAAS;AAEzE,QAAIuD,QAAQ,KAAKF;AAEjB,QAAIE,MAAMlW,QAAQ;AAChBkW,YAAMA,MAAMlW,SAAS,CAAC,EAAEiV,SAAQ;IACjC;AAEDiB,UAAMzW,KAAKkT,SAAS;AACpBA,cAAUoC,QAAO;;;;;;EAOnBH,WAAWjC,WAA2B;AACpCA,cAAUsC,SAAQ;AAElB,UAAMiB,QAAQ,KAAKF;AAEnB,UAAMpT,IAAIsT,MAAMnS,QAAQ4O,SAAS;AACjC,QAAI/P,MAAM,IAAI;AACZsT,YAAMC,OAAOvT,GAAG,CAAC;AACjB,UAAIsT,MAAMlW,QAAQ;AAChBkW,cAAMA,MAAMlW,SAAS,CAAC,EAAE+U,QAAO;MAChC;IACF;;;;mBAtCQgB,mBAAgB;AAAA;AAAhB,kBAAAnR,QTiCAC,mBAAA;EAAAC,OSjCAiR;EAAgBhR,SAAhBgR,kBAAgBzR;EAAAU,YADJ;AAAM,CAAA;IAClB+Q;;qDTiCA9Q,iBSjCA8Q,kBAAgB,CAAA;UAD5B7Q;WAAW;MAACF,YAAY;IAAM,CAAC;;;ICFnBoR,sCAAAA,8BAA4B;EAIvC3V,YACU6O,UACAC,SACAmF,mBACUhU,WAC6BmU,gBAAuC;AAJ9E,SAAQvF,WAARA;AACA,SAAOC,UAAPA;AACA,SAAiBmF,oBAAjBA;AAIR,SAAKhU,YAAYA;AAEjB,SAAKmU,iBAAiBA,kBAAkB,IAAIQ,oCAAmC;;EAiBjF/C,OACEzO,SACA8J,SAAgD;IAACmH,OAAO;EAAK,GAAC;AAE9D,QAAIuB;AACJ,QAAI,OAAO1I,WAAW,WAAW;AAC/B0I,qBAAe;QAACvB,OAAOnH;MAAM;IAC9B,OAAM;AACL0I,qBAAe1I;IAChB;AACD,WAAO,IAAI8G,sBACT5Q,SACA,KAAKyL,UACL,KAAKC,SACL,KAAK7O,WACL,KAAKgU,mBACL,KAAKG,gBACLwB,YAAY;;;;mBA/CLD,+BVoCA3R,SUpC4B8H,oBAAA,GVoC5B9H,SUpC4BgO,MAAA,GVoC5BhO,SUpC4BsR,gBAAA,GVoC5BtR,SU5BDC,QAAQ,GV4BPD,SU3BW0Q,2BAAyB,CAAA,CAAA;AAAA;AATpC,8BAAAvQ,QVoCAC,mBAAA;EAAAC,OUpCAsR;EAA4BrR,SAA5BqR,8BAA4B9R;EAAAU,YADhB;AAAM,CAAA;IAClBoR;;qDVoCAnR,iBUpCAmR,8BAA4B,CAAA;UADxClR;WAAW;MAACF,YAAY;IAAM,CAAC;;;;;;;;;;YAS3BG;aAAOT,QAAQ;;;;;YACf4R;;YAAYnR;aAAOgQ,yBAAyB;;;;ACnB3C,SAAUoB,gCAAgClN,OAAiB;AAM/D,SAAOA,MAAMmN,YAAY,KAAKnN,MAAMoN,WAAW;AACjD;AAGM,SAAUC,iCAAiCrN,OAAiB;AAChE,QAAMsN,QACHtN,MAAMuN,WAAWvN,MAAMuN,QAAQ,CAAC,KAAOvN,MAAMwN,kBAAkBxN,MAAMwN,eAAe,CAAC;AAMxF,SACE,CAAC,CAACF,SACFA,MAAMG,eAAe,OACpBH,MAAMI,WAAW,QAAQJ,MAAMI,YAAY,OAC3CJ,MAAMK,WAAW,QAAQL,MAAMK,YAAY;AAEhD;ICCaC,kCAAkC,IAAI7B,eACjD,qCAAqC;AAmB1B,IAAA8B,0CAAwE;EACnFC,YAAY,CAACC,KAAKC,SAASC,UAAUC,MAAMC,KAAK;;AAU3C,IAAMC,kBAAkB;AAM/B,IAAMC,+BAA+BC,gCAAgC;EACnEC,SAAS;EACTC,SAAS;AACV,CAAA;IAiBYC,+BAAAA,uBAAqB;;EAQhC,IAAIC,qBAAkB;AACpB,WAAO,KAAKC,UAAU/I;;EA0ExBxO,YACmBE,WACjBsX,QACkBC,WAGlBzH,SAAsC;AALrB,SAAS9P,YAATA;AApEnB,SAAiBwX,oBAAuB;AAGvB,SAAAH,YAAY,IAAII,gBAA+B,IAAI;AAS5D,SAAYC,eAAG;AAMf,SAAAC,aAAcjP,WAAwB;AAG5C,UAAI,KAAKkP,UAAUpB,YAAY7X,KAAKgK,aAAWA,YAAYD,MAAMC,OAAO,GAAG;AACzE;MACD;AAED,WAAK0O,UAAU7O,KAAK,UAAU;AAC9B,WAAKgP,oBAAoBK,gBAAgBnP,KAAK;IAChD;AAMQ,SAAAoP,eAAgBpP,WAAqB;AAI3C,UAAIqP,KAAKC,IAAG,IAAK,KAAKN,eAAeZ,iBAAiB;AACpD;MACD;AAID,WAAKO,UAAU7O,KAAKoN,gCAAgClN,KAAK,IAAI,aAAa,OAAO;AACjF,WAAK8O,oBAAoBK,gBAAgBnP,KAAK;IAChD;AAMQ,SAAAuP,gBAAiBvP,WAAqB;AAG5C,UAAIqN,iCAAiCrN,KAAK,GAAG;AAC3C,aAAK2O,UAAU7O,KAAK,UAAU;AAC9B;MACD;AAID,WAAKkP,eAAeK,KAAKC,IAAG;AAE5B,WAAKX,UAAU7O,KAAK,OAAO;AAC3B,WAAKgP,oBAAoBK,gBAAgBnP,KAAK;IAChD;AAUE,SAAKkP,WAAW,kCACXrB,0CACAzG;AAIL,SAAKoI,mBAAmB,KAAKb,UAAU7P,KAAK2Q,KAAK,CAAC,CAAC;AACnD,SAAKC,kBAAkB,KAAKF,iBAAiB1Q,KAAK6Q,qBAAoB,CAAE;AAIxE,QAAIrY,UAAUgD,WAAW;AACvBsU,aAAO/H,kBAAkB,MAAK;AAC5BgI,QAAAA,UAAS9H,iBAAiB,WAAW,KAAKkI,YAAYZ,4BAA4B;AAClFQ,QAAAA,UAAS9H,iBAAiB,aAAa,KAAKqI,cAAcf,4BAA4B;AACtFQ,QAAAA,UAAS9H,iBAAiB,cAAc,KAAKwI,eAAelB,4BAA4B;MAC1F,CAAC;IACF;;EAGHjV,cAAW;AACT,SAAKuV,UAAUvM,SAAQ;AAEvB,QAAI,KAAK9K,UAAUgD,WAAW;AAC5BuU,eAASjI,oBAAoB,WAAW,KAAKqI,YAAYZ,4BAA4B;AACrFQ,eAASjI,oBAAoB,aAAa,KAAKwI,cAAcf,4BAA4B;AACzFQ,eAASjI,oBAAoB,cAAc,KAAK2I,eAAelB,4BAA4B;IAC5F;;;;mBAtHQI,wBZpCArT,SYoCqBE,QAAA,GZpCrBF,SYoCqBgO,MAAA,GZpCrBhO,SY0HDC,QAAQ,GZ1HPD,SY4HDwS,iCAA+B,CAAA,CAAA;AAAA;AAxF9B,uBAAArS,QZpCAC,mBAAA;EAAAC,OYoCAgT;EAAqB/S,SAArB+S,uBAAqBxT;EAAAU,YADT;AAAM,CAAA;IAClB8S;;qDZpCA7S,iBYoCA6S,uBAAqB,CAAA;UADjC5S;WAAW;MAACF,YAAY;IAAM,CAAC;;;;;;;;YAuF3BG;aAAOT,QAAQ;;;;;YACf4R;;YACAnR;aAAO8R,+BAA+B;;;;ICnK9BgC,+BAA+B,IAAI7D,eAC9C,wBACA;EACEpQ,YAAY;EACZD,SAASmU;AACV,CAAA;SAIaA,uCAAoC;AAClD,SAAO;AACT;IAYaC,iCAAiC,IAAI/D,eAChD,gCAAgC;ACZlC,IAAIgE,YAAY;IAGHC,uBAAAA,eAAa;EAOxB5Y,YACoD6Y,cAC1C/J,SACU7O,WAGV6Y,iBAA6C;AAJ7C,SAAOhK,UAAPA;AAIA,SAAegK,kBAAfA;AAKR,SAAK7Y,YAAYA;AACjB,SAAK8Y,eAAeF,gBAAgB,KAAKG,mBAAkB;;EAuC7DC,SAAStY,YAAoBgT,MAAW;AACtC,UAAMuF,iBAAiB,KAAKJ;AAC5B,QAAIK;AACJ,QAAIC;AAEJ,QAAIzF,KAAKpU,WAAW,KAAK,OAAOoU,KAAK,CAAC,MAAM,UAAU;AACpDyF,iBAAWzF,KAAK,CAAC;IAClB,OAAM;AACL,OAACwF,YAAYC,QAAQ,IAAIzF;IAC1B;AAED,SAAKtR,MAAK;AACVgX,iBAAa,KAAKC,gBAAgB;AAElC,QAAI,CAACH,YAAY;AACfA,mBACED,kBAAkBA,eAAeC,aAAaD,eAAeC,aAAa;IAC7E;AAED,QAAIC,YAAY,QAAQF,gBAAgB;AACtCE,iBAAWF,eAAeE;IAC3B;AAGD,SAAKL,aAAa9Z,aAAa,aAAaka,UAAU;AAEtD,QAAI,KAAKJ,aAAara,IAAI;AACxB,WAAK6a,yBAAyB,KAAKR,aAAara,EAAE;IACnD;AAOD,WAAO,KAAKoQ,QAAQW,kBAAkB,MAAK;AACzC,UAAI,CAAC,KAAK+J,iBAAiB;AACzB,aAAKA,kBAAkB,IAAIvJ,QAAQC,aAAY,KAAKuJ,kBAAkBvJ,OAAQ;MAC/E;AAEDmJ,mBAAa,KAAKC,gBAAgB;AAClC,WAAKA,mBAAmBlE,WAAW,MAAK;AACtC,aAAK2D,aAAaxW,cAAc5B;AAEhC,YAAI,OAAOyY,aAAa,UAAU;AAChC,eAAKE,mBAAmBlE,WAAW,MAAM,KAAK/S,MAAK,GAAI+W,QAAQ;QAChE;AAED,aAAKK,gBAAgB;AACrB,aAAKD,kBAAkB,KAAKC,kBAAkB1L;SAC7C,GAAG;AAEN,aAAO,KAAKyL;IACd,CAAC;;;;;;;EAQHnX,QAAK;AACH,QAAI,KAAK0W,cAAc;AACrB,WAAKA,aAAaxW,cAAc;IACjC;;EAGHP,cAAW;AACTqX,iBAAa,KAAKC,gBAAgB;AAClC,SAAKP,cAAchX,OAAM;AACzB,SAAKgX,eAAe;AACpB,SAAKU,kBAAe;AACpB,SAAKD,kBAAkB,KAAKC,kBAAkB1L;;EAGxCiL,qBAAkB;AACxB,UAAMU,eAAe;AACrB,UAAMC,mBAAmB,KAAK1Z,UAAU2Z,uBAAuBF,YAAY;AAC3E,UAAMG,SAAS,KAAK5Z,UAAUqC,cAAc,KAAK;AAGjD,aAASH,IAAI,GAAGA,IAAIwX,iBAAiBpa,QAAQ4C,KAAK;AAChDwX,uBAAiBxX,CAAC,EAAEJ,OAAM;IAC3B;AAED8X,WAAO7W,UAAUC,IAAIyW,YAAY;AACjCG,WAAO7W,UAAUC,IAAI,qBAAqB;AAE1C4W,WAAO5a,aAAa,eAAe,MAAM;AACzC4a,WAAO5a,aAAa,aAAa,QAAQ;AACzC4a,WAAOnb,KAAK,sBAAsBia,WAAW;AAE7C,SAAK1Y,UAAUkD,KAAKV,YAAYoX,MAAM;AAEtC,WAAOA;;;;;;;EAQDN,yBAAyB7a,IAAU;AAOzC,UAAMob,SAAS,KAAK7Z,UAAUiC,iBAC5B,mDAAmD;AAGrD,aAASC,IAAI,GAAGA,IAAI2X,OAAOva,QAAQ4C,KAAK;AACtC,YAAM4X,QAAQD,OAAO3X,CAAC;AACtB,YAAM6X,WAAWD,MAAMta,aAAa,WAAW;AAE/C,UAAI,CAACua,UAAU;AACbD,cAAM9a,aAAa,aAAaP,EAAE;MACnC,WAAUsb,SAAS1W,QAAQ5E,EAAE,MAAM,IAAI;AACtCqb,cAAM9a,aAAa,aAAa+a,WAAW,MAAMtb,EAAE;MACpD;IACF;;;AApLQ,eAAAmF,OAAA,SAAAoW,sBAAAlW,GAAA;AAAA,SAAA,KAAAA,KAAA6U,gBdwBA5U,SchBWwU,8BAA4B,CAAA,GdgBvCxU,ScdDgO,MAAA,GdcChO,ScdDC,QAAQ,GdcPD,ScZD0U,gCAA8B,CAAA,CAAA;AAAA;AAZ7B,eAAAvU,QdwBAC,mBAAA;EAAAC,OcxBAuU;EAAatU,SAAbsU,eAAa/U;EAAAU,YADD;AAAM,CAAA;IAClBqU;;qDdwBApU,iBcxBAoU,eAAa,CAAA;UADzBnU;WAAW;MAACF,YAAY;IAAM,CAAC;;;;YAS3BsR;;YAAYnR;aAAO8T,4BAA4B;;;;;;;YAE/C9T;aAAOT,QAAQ;;;;;YACf4R;;YACAnR;aAAOgU,8BAA8B;;;;IAoL7BwB,qBAAAA,aAAW;;EAEtB,IACIf,aAAU;AACZ,WAAO,KAAKgB;;EAEd,IAAIhB,WAAW3K,OAAyB;AACtC,SAAK2L,cAAc3L,UAAU,SAASA,UAAU,cAAcA,QAAQ;AACtE,QAAI,KAAK2L,gBAAgB,OAAO;AAC9B,UAAI,KAAKC,eAAe;AACtB,aAAKA,cAAc3S,YAAW;AAC9B,aAAK2S,gBAAgB;MACtB;IACF,WAAU,CAAC,KAAKA,eAAe;AAC9B,WAAKA,gBAAgB,KAAKtL,QAAQW,kBAAkB,MAAK;AACvD,eAAO,KAAK4K,iBAAiBC,QAAQ,KAAKnI,WAAW,EAAE9L,UAAU,MAAK;AAEpE,gBAAMkU,cAAc,KAAKpI,YAAYG,cAAc/P;AAInD,cAAIgY,gBAAgB,KAAKC,wBAAwB;AAC/C,iBAAKC,eAAexB,SAASsB,aAAa,KAAKJ,aAAa,KAAKf,QAAQ;AACzE,iBAAKoB,yBAAyBD;UAC/B;QACH,CAAC;MACH,CAAC;IACF;;EAUHva,YACUmS,aACAsI,gBACAJ,kBACAvL,SAAe;AAHf,SAAWqD,cAAXA;AACA,SAAcsI,iBAAdA;AACA,SAAgBJ,mBAAhBA;AACA,SAAOvL,UAAPA;AAZF,SAAWqL,cAAuB;;EAe1CnY,cAAW;AACT,QAAI,KAAKoY,eAAe;AACtB,WAAKA,cAAc3S,YAAW;IAC/B;;;;mBA/CQyS,cdxKAlH,kBcwKWC,UAAA,GdxKXD,kBcwKW4F,aAAA,GdxKX5F,kBcwKW0H,eAAA,GdxKX1H,kBcwKWhB,MAAA,CAAA;AAAA;oBdxKXkB,kBAAA;EAAAvF,McwKAuM;EAAW/G,WAAA,CAAA,CAAA,IAAA,eAAA,EAAA,CAAA;EAAAC,QAAA;IAAA+F,YAAA,CAAA,eAAA,YAAA;IAAAC,UAAA,CAAA,uBAAA,UAAA;EAAA;EAAA9F,UAAA,CAAA,aAAA;AAAA,CAAA;IAAX4G;;qDdxKA1V,iBcwKA0V,aAAW,CAAA;UAJvBxG;IAAUC,MAAA,CAAA;MACTC,UAAU;MACVN,UAAU;IACX,CAAA;;;;;;;;;;IAIK6F,YAAU,CAAA;YADbtF;aAAM,aAAa;;IA8BUuF,UAAQ,CAAA;YAArCvF;aAAM,qBAAqB;;;;IC9LjB8G,gCAAgC,IAAIhG,eAC/C,mCAAmC;AAarC,IAAMiG,8BAA8B1D,gCAAgC;EAClEC,SAAS;EACTC,SAAS;AACV,CAAA;IAIYyD,sBAAAA,cAAY;EA2DvB7a,YACU8O,SACA5O,WACS4a,wBAEarD,WACqBzH,SAAmC;AAL9E,SAAOlB,UAAPA;AACA,SAAS5O,YAATA;AACS,SAAsB4a,yBAAtBA;AA5DX,SAAOtP,UAAgB;AAMvB,SAAcuP,iBAAG;AAYjB,SAA2BC,8BAAG;AAG9B,SAAAC,eAAe,oBAAI7a,IAAG;AAGtB,SAAsB8a,yBAAG;AAQzB,SAAAC,8BAA8B,oBAAI/a,IAAG;AAYrC,SAAoBgb,uBAAG,MAAK;AAGlC,WAAKL,iBAAiB;AACtB,WAAKM,wBAAwBjO,OAAOgI,WAAW,MAAO,KAAK2F,iBAAiB,KAAM;IACpF;AAMiB,SAAAO,6BAA6B,IAAIpW,QAAO;AAiBjD,SAAAqW,gCAAiC3S,WAAgB;AACvD,YAAMoM,SAAS+C,gBAA6BnP,KAAK;AAGjD,eAASxF,UAAU4R,QAAQ5R,SAASA,UAAUA,QAAQoY,eAAe;AACnE,YAAI5S,MAAM+E,SAAS,SAAS;AAC1B,eAAK8N,SAAS7S,OAAqBxF,OAAO;QAC3C,OAAM;AACL,eAAKsY,QAAQ9S,OAAqBxF,OAAO;QAC1C;MACF;IACH;AAlBE,SAAKnD,YAAYwX;AACjB,SAAKkE,iBAAiB3L,SAAS4L,iBAAa;;EAqC9CC,QACEzY,SACA0Y,gBAAyB,OAAK;AAE9B,UAAMxJ,gBAAgByJ,cAAc3Y,OAAO;AAG3C,QAAI,CAAC,KAAKlD,UAAUgD,aAAaoP,cAAc3O,aAAa,GAAG;AAE7D,aAAOqY,GAAY;IACpB;AAKD,UAAMC,WAAWC,eAAe5J,aAAa,KAAK,KAAK6J,aAAY;AACnE,UAAMC,aAAa,KAAKnB,aAAarZ,IAAI0Q,aAAa;AAGtD,QAAI8J,YAAY;AACd,UAAIN,eAAe;AAIjBM,mBAAWN,gBAAgB;MAC5B;AAED,aAAOM,WAAWC;IACnB;AAGD,UAAMC,OAA6B;MACjCR;MACAO,SAAS,IAAInX,QAAO;MACpB+W;;AAEF,SAAKhB,aAAaha,IAAIqR,eAAegK,IAAI;AACzC,SAAKC,yBAAyBD,IAAI;AAElC,WAAOA,KAAKD;;EAedG,eAAepZ,SAA8C;AAC3D,UAAMkP,gBAAgByJ,cAAc3Y,OAAO;AAC3C,UAAMqZ,cAAc,KAAKxB,aAAarZ,IAAI0Q,aAAa;AAEvD,QAAImK,aAAa;AACfA,kBAAYJ,QAAQrR,SAAQ;AAE5B,WAAK0R,YAAYpK,aAAa;AAC9B,WAAK2I,aAAavY,OAAO4P,aAAa;AACtC,WAAKqK,uBAAuBF,WAAW;IACxC;;EAmBHG,SACExZ,SACAsI,QACAsE,SAAsB;AAEtB,UAAMsC,gBAAgByJ,cAAc3Y,OAAO;AAC3C,UAAMyZ,iBAAiB,KAAKV,aAAY,EAAG9G;AAK3C,QAAI/C,kBAAkBuK,gBAAgB;AACpC,WAAKC,wBAAwBxK,aAAa,EAAEyK,QAAQ,CAAC,CAACC,gBAAgBV,IAAI,MACxE,KAAKW,eAAeD,gBAAgBtR,QAAQ4Q,IAAI,CAAC;IAEpD,OAAM;AACL,WAAKY,WAAWxR,MAAM;AAGtB,UAAI,OAAO4G,cAAc3G,UAAU,YAAY;AAC7C2G,sBAAc3G,MAAMqE,OAAO;MAC5B;IACF;;EAGHhO,cAAW;AACT,SAAKiZ,aAAa8B,QAAQ,CAACI,OAAO/Z,YAAY,KAAKoZ,eAAepZ,OAAO,CAAC;;;EAIpE+Y,eAAY;AAClB,WAAO,KAAKlc,aAAawX;;;EAInB2F,aAAU;AAChB,UAAMC,MAAM,KAAKlB,aAAY;AAC7B,WAAOkB,IAAIhP,eAAejB;;EAGpBkQ,gBAAgBC,kBAAoC;AAC1D,QAAI,KAAK/R,SAAS;AAGhB,UAAI,KAAKwP,6BAA6B;AACpC,eAAO,KAAKwC,2BAA2BD,gBAAgB,IAAI,UAAU;MACtE,OAAM;AACL,eAAO,KAAK/R;MACb;IACF;AAWD,QAAI,KAAKuP,kBAAkB,KAAK0C,kBAAkB;AAChD,aAAO,KAAKA;IACb;AAMD,QAAIF,oBAAoB,KAAKG,iCAAiCH,gBAAgB,GAAG;AAC/E,aAAO;IACR;AAED,WAAO;;;;;;;;;;EAWDC,2BAA2BD,kBAAoC;AAWrE,WACE,KAAK5B,mBAAqD,KAC1D,CAAC,CAAC4B,kBAAkBrI,SAAS,KAAK4F,uBAAuBpD,iBAAiB;;;;;;;EAStEgF,YAAYtZ,SAAsBsI,QAAoB;AAC5DtI,YAAQJ,UAAU2a,OAAO,eAAe,CAAC,CAACjS,MAAM;AAChDtI,YAAQJ,UAAU2a,OAAO,qBAAqBjS,WAAW,OAAO;AAChEtI,YAAQJ,UAAU2a,OAAO,wBAAwBjS,WAAW,UAAU;AACtEtI,YAAQJ,UAAU2a,OAAO,qBAAqBjS,WAAW,OAAO;AAChEtI,YAAQJ,UAAU2a,OAAO,uBAAuBjS,WAAW,SAAS;;;;;;;;;EAU9DwR,WAAWxR,QAAqBkS,oBAAoB,OAAK;AAC/D,SAAK9O,QAAQW,kBAAkB,MAAK;AAClC,WAAKjE,UAAUE;AACf,WAAKsP,8BAA8BtP,WAAW,WAAWkS;AAOzD,UAAI,KAAKjC,mBAAc,GAA0C;AAC/DtC,qBAAa,KAAKwE,gBAAgB;AAClC,cAAMC,KAAK,KAAK9C,8BAA8BhE,kBAAkB;AAChE,aAAK6G,mBAAmBzI,WAAW,MAAO,KAAK5J,UAAU,MAAOsS,EAAE;MACnE;IACH,CAAC;;;;;;;EAQKrC,SAAS7S,OAAmBxF,SAAoB;AAQtD,UAAMqZ,cAAc,KAAKxB,aAAarZ,IAAIwB,OAAO;AACjD,UAAMma,mBAAmBxF,gBAA6BnP,KAAK;AAC3D,QAAI,CAAC6T,eAAgB,CAACA,YAAYX,iBAAiB1Y,YAAYma,kBAAmB;AAChF;IACD;AAED,SAAKN,eAAe7Z,SAAS,KAAKka,gBAAgBC,gBAAgB,GAAGd,WAAW;;;;;;;EAQlFf,QAAQ9S,OAAmBxF,SAAoB;AAG7C,UAAMqZ,cAAc,KAAKxB,aAAarZ,IAAIwB,OAAO;AAEjD,QACE,CAACqZ,eACAA,YAAYX,iBACXlT,MAAMmV,yBAAyBC,QAC/B5a,QAAQ8R,SAAStM,MAAMmV,aAAa,GACtC;AACA;IACD;AAED,SAAKrB,YAAYtZ,OAAO;AACxB,SAAK6a,YAAYxB,aAAa,IAAI;;EAG5BwB,YAAY3B,MAA4B5Q,QAAmB;AACjE,QAAI4Q,KAAKD,QAAQ6B,UAAU3e,QAAQ;AACjC,WAAKuP,QAAQqP,IAAI,MAAM7B,KAAKD,QAAQ3T,KAAKgD,MAAM,CAAC;IACjD;;EAGK6Q,yBAAyBE,aAAiC;AAChE,QAAI,CAAC,KAAKvc,UAAUgD,WAAW;AAC7B;IACD;AAED,UAAM+Y,WAAWQ,YAAYR;AAC7B,UAAMmC,yBAAyB,KAAKjD,4BAA4BvZ,IAAIqa,QAAQ,KAAK;AAEjF,QAAI,CAACmC,wBAAwB;AAC3B,WAAKtP,QAAQW,kBAAkB,MAAK;AAClCwM,iBAAStM,iBACP,SACA,KAAK4L,+BACLX,2BAA2B;AAE7BqB,iBAAStM,iBACP,QACA,KAAK4L,+BACLX,2BAA2B;MAE/B,CAAC;IACF;AAED,SAAKO,4BAA4Bla,IAAIgb,UAAUmC,yBAAyB,CAAC;AAGzE,QAAI,EAAE,KAAKlD,2BAA2B,GAAG;AAGvC,WAAKpM,QAAQW,kBAAkB,MAAK;AAClC,cAAMrC,UAAS,KAAKgQ,WAAU;AAC9BhQ,QAAAA,QAAOuC,iBAAiB,SAAS,KAAKyL,oBAAoB;MAC5D,CAAC;AAGD,WAAKN,uBAAuB1C,iBACzB1Q,KAAK2W,UAAU,KAAK/C,0BAA0B,CAAC,EAC/CjV,UAAUiY,cAAW;AACpB,aAAKpB;UAAWoB;UAAU;;QAAI;MAChC,CAAC;IACJ;;EAGK3B,uBAAuBF,aAAiC;AAC9D,UAAMR,WAAWQ,YAAYR;AAE7B,QAAI,KAAKd,4BAA4B/Z,IAAI6a,QAAQ,GAAG;AAClD,YAAMmC,yBAAyB,KAAKjD,4BAA4BvZ,IAAIqa,QAAQ;AAE5E,UAAImC,yBAAyB,GAAG;AAC9B,aAAKjD,4BAA4Bla,IAAIgb,UAAUmC,yBAAyB,CAAC;MAC1E,OAAM;AACLnC,iBAASzM,oBACP,SACA,KAAK+L,+BACLX,2BAA2B;AAE7BqB,iBAASzM,oBACP,QACA,KAAK+L,+BACLX,2BAA2B;AAE7B,aAAKO,4BAA4BzY,OAAOuZ,QAAQ;MACjD;IACF;AAGD,QAAI,CAAC,EAAE,KAAKf,wBAAwB;AAClC,YAAM9N,UAAS,KAAKgQ,WAAU;AAC9BhQ,MAAAA,QAAOoC,oBAAoB,SAAS,KAAK4L,oBAAoB;AAG7D,WAAKE,2BAA2B5S,KAAI;AAGpC2Q,mBAAa,KAAKgC,qBAAqB;AACvChC,mBAAa,KAAKwE,gBAAgB;IACnC;;;EAIKZ,eACN7Z,SACAsI,QACA+Q,aAAiC;AAEjC,SAAKC,YAAYtZ,SAASsI,MAAM;AAChC,SAAKuS,YAAYxB,aAAa/Q,MAAM;AACpC,SAAK+R,mBAAmB/R;;;;;;;EAQlBoR,wBAAwB1Z,SAAoB;AAClD,UAAMmb,UAAiD,CAAA;AAEvD,SAAKtD,aAAa8B,QAAQ,CAACT,MAAMU,mBAAkB;AACjD,UAAIA,mBAAmB5Z,WAAYkZ,KAAKR,iBAAiBkB,eAAe9H,SAAS9R,OAAO,GAAI;AAC1Fmb,gBAAQvf,KAAK,CAACge,gBAAgBV,IAAI,CAAC;MACpC;IACH,CAAC;AAED,WAAOiC;;;;;;;EAQDb,iCAAiCH,kBAA6B;AACpE,UAAM;MAAC7F,mBAAmB8G;MAAkBlH;IAAkB,IAAI,KAAKwD;AAKvE,QACExD,uBAAuB,WACvB,CAACkH,oBACDA,qBAAqBjB,oBACpBA,iBAAiB9Q,aAAa,WAAW8Q,iBAAiB9Q,aAAa,cACvE8Q,iBAA4DzX,UAC7D;AACA,aAAO;IACR;AAED,UAAM2Y,SAAUlB,iBAA4DkB;AAE5E,QAAIA,QAAQ;AACV,eAAStc,IAAI,GAAGA,IAAIsc,OAAOlf,QAAQ4C,KAAK;AACtC,YAAIsc,OAAOtc,CAAC,EAAE+S,SAASsJ,gBAAgB,GAAG;AACxC,iBAAO;QACR;MACF;IACF;AAED,WAAO;;;;mBApgBE3D,ef/BA7W,Se+BYgO,MAAA,Gf/BZhO,Se+BYE,QAAA,Gf/BZF,Se+BYqT,qBAAA,Gf/BZrT,Se+FWC,UAAQ,CAAA,Gf/FnBD,SegGW2W,+BAA6B,CAAA,CAAA;AAAA;AAjExC,cAAAxW,Qf/BAC,mBAAA;EAAAC,Oe+BAwW;EAAYvW,SAAZuW,cAAYhX;EAAAU,YADA;AAAM,CAAA;IAClBsW;;qDf/BArW,iBe+BAqW,cAAY,CAAA;UADxBpW;WAAW;MAACF,YAAY;IAAM,CAAC;;;;;;;;;;YAiE3BsR;;YAAYnR;aAAOT,QAAQ;;;;;YAC3B4R;;YAAYnR;aAAOiW,6BAA6B;;;;IAodxC+D,yBAAAA,iBAAe;EAM1B1e,YAAoBmS,aAA8CwM,eAA2B;AAAzE,SAAWxM,cAAXA;AAA8C,SAAawM,gBAAbA;AAJ1D,SAAYC,eAAgB;AAEjB,SAAAC,iBAAiB,IAAIC,aAAY;;EAIpD,IAAIC,cAAW;AACb,WAAO,KAAKH;;EAGdI,kBAAe;AACb,UAAM5b,UAAU,KAAK+O,YAAYG;AACjC,SAAK2M,uBAAuB,KAAKN,cAC9B9C,QAAQzY,SAASA,QAAQO,aAAa,KAAKP,QAAQ4I,aAAa,wBAAwB,CAAC,EACzF3F,UAAUqF,YAAS;AAClB,WAAKkT,eAAelT;AACpB,WAAKmT,eAAeK,KAAKxT,MAAM;IACjC,CAAC;;EAGL1J,cAAW;AACT,SAAK2c,cAAcnC,eAAe,KAAKrK,WAAW;AAElD,QAAI,KAAK8M,sBAAsB;AAC7B,WAAKA,qBAAqBxX,YAAW;IACtC;;;;mBA3BQiX,kBfpjBA1L,kBeojBeC,UAAA,GfpjBfD,kBeojBe6H,YAAA,CAAA;AAAA;wBfpjBf3H,kBAAA;EAAAvF,MeojBA+Q;EAAevL,WAAA,CAAA,CAAA,IAAA,0BAAA,EAAA,GAAA,CAAA,IAAA,0BAAA,EAAA,CAAA;EAAAgM,SAAA;IAAAN,gBAAA;EAAA;EAAAvL,UAAA,CAAA,iBAAA;AAAA,CAAA;IAAfoL;;qDfpjBAla,iBeojBAka,iBAAe,CAAA;UAJ3BhL;IAAUC,MAAA,CAAA;MACTC,UAAU;MACVN,UAAU;IACX,CAAA;;;;;;IAKoBuL,gBAAc,CAAA;YAAhCO;;;;ACzlBI,IAAMC,2BAA2B;AAGjC,IAAMC,2BAA2B;AAGjC,IAAMC,sCAAsC;IActCC,kCAAAA,0BAAwB;EASnCxf,YAAoBE,WAAuCuX,WAAa;AAApD,SAASvX,YAATA;AAClB,SAAKD,YAAYwX;AAEjB,SAAKgI,0BAA0Blf,OAAOmf,kBAAkB,EACrDpF,QAAQ,yBAAyB,EACjCjU,UAAU,MAAK;AACd,UAAI,KAAKsZ,6BAA6B;AACpC,aAAKA,8BAA8B;AACnC,aAAKC,qCAAoC;MAC1C;IACH,CAAC;;;EAILC,sBAAmB;AACjB,QAAI,CAAC,KAAK3f,UAAUgD,WAAW;AAC7B,aAA6B;IAC9B;AAKD,UAAM4c,cAAc,KAAK7f,UAAUqC,cAAc,KAAK;AACtDwd,gBAAYhd,MAAMid,kBAAkB;AACpCD,gBAAYhd,MAAMkd,WAAW;AAC7B,SAAK/f,UAAUkD,KAAKV,YAAYqd,WAAW;AAM3C,UAAMG,iBAAiB,KAAKhgB,UAAUoO,eAAejB;AACrD,UAAM8S,gBACJD,kBAAkBA,eAAe9T,mBAC7B8T,eAAe9T,iBAAiB2T,WAAW,IAC3C;AACN,UAAMK,iBAAkBD,iBAAiBA,cAAcH,mBAAoB,IAAIK,QAC7E,MACA,EAAE;AAEJN,gBAAY/d,OAAM;AAElB,YAAQoe,eAAa;MAEnB,KAAK;MAEL,KAAK;MACL,KAAK;AACH,eAAuC;MAEzC,KAAK;MAEL,KAAK;AACH,eAAuC;IAC1C;AACD,WAA6B;;EAG/Bne,cAAW;AACT,SAAKyd,wBAAwBhY,YAAW;;;EAI1CmY,uCAAoC;AAClC,QAAI,CAAC,KAAKD,+BAA+B,KAAKzf,UAAUgD,aAAa,KAAKjD,UAAUkD,MAAM;AACxF,YAAMkd,cAAc,KAAKpgB,UAAUkD,KAAKH;AACxCqd,kBAAYte,OACVwd,qCACAF,0BACAC,wBAAwB;AAE1B,WAAKK,8BAA8B;AAEnC,YAAMW,OAAO,KAAKT,oBAAmB;AACrC,UAAIS,SAAI,GAAsC;AAC5CD,oBAAYpd,IAAIsc,qCAAqCF,wBAAwB;MAC9E,WAAUiB,SAAI,GAAsC;AACnDD,oBAAYpd,IAAIsc,qCAAqCD,wBAAwB;MAC9E;IACF;;;AAxFQ,0BAAAzb,OAAA,SAAA0c,iCAAAxc,GAAA;AAAA,SAAA,KAAAA,KAAAyb,2BhBaAxb,SgBbwBE,QAAA,GhBaxBF,SgBJsCC,QAAQ,CAAA;AAAA;AAT9C,0BAAAE,QhBaAC,mBAAA;EAAAC,OgBbAmb;EAAwBlb,SAAxBkb,0BAAwB3b;EAAAU,YADZ;AAAM,CAAA;IAClBib;;qDhBaAhb,iBgBbAgb,0BAAwB,CAAA;UADpC/a;WAAW;MAACF,YAAY;IAAM,CAAC;;;;;;YAUYG;aAAOT,QAAQ;;;;IC/B9Cuc,oBAAAA,YAAU;EACrBxgB,YAAYygB,0BAAkD;AAC5DA,6BAAyBb,qCAAoC;;;;mBAFpDY,ajBmCAxc,SiBnCUwb,wBAAA,CAAA;AAAA;AAAV,YAAAkB,OjBmCAC,iBAAA;EAAAhT,MiBnCA6S;EAAUI,cAAA,CAHN1G,aAAajI,cAAcyM,eAAe;EAAAmC,SAAA,CAD/CC,eAAe;EAAAC,SAAA,CAEf7G,aAAajI,cAAcyM,eAAe;AAAA,CAAA;AAEzC,YAAAsC,OjBmCAC,iBAAA;EAAAJ,SAAA,CiBvCDC,eAAe;AAAA,CAAA;IAIdN;;qDjBmCAhc,iBiBnCAgc,YAAU,CAAA;UALtBU;IAASvN,MAAA,CAAA;MACRkN,SAAS,CAACC,eAAe;MACzBF,cAAc,CAAC1G,aAAajI,cAAcyM,eAAe;MACzDqC,SAAS,CAAC7G,aAAajI,cAAcyM,eAAe;IACrD,CAAA;;;;;",
  "names": ["hasV8BreakIterator", "Intl", "v8BreakIterator", "Platform", "constructor", "_platformId", "isBrowser", "isPlatformBrowser", "document", "EDGE", "test", "navigator", "userAgent", "TRIDENT", "BLINK", "window", "chrome", "CSS", "WEBKIT", "IOS", "FIREFOX", "ANDROID", "SAFARI", "ɵfac", "Platform_Factory", "t", "ɵɵinject", "PLATFORM_ID", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "PlatformModule", "ɵɵdefineNgModule", "type", "ɵɵdefineInjector", "NgModule", "supportedInputTypes", "candidateInputTypes", "getSupportedInputTypes", "Set", "featureTestInput", "createElement", "filter", "value", "setAttribute", "supportsPassiveEvents", "supportsPassiveEventListeners", "addEventListener", "Object", "defineProperty", "get", "normalizePassiveListenerOptions", "options", "capture", "rtlScrollAxisType", "scrollBehaviorSupported", "supportsScrollBehavior", "Element", "documentElement", "style", "scrollToFunction", "prototype", "scrollTo", "toString", "getRtlScrollAxisType", "scrollContainer", "containerStyle", "dir", "width", "overflow", "visibility", "pointerEvents", "position", "content", "contentStyle", "height", "appendChild", "body", "scrollLeft", "remove", "shadowDomIsSupported", "_supportsShadowDom", "head", "createShadowRoot", "attachShadow", "_getShadowRoot", "element", "rootNode", "getRootNode", "ShadowRoot", "_getFocusedElementPierceShadowDom", "activeElement", "shadowRoot", "newActiveElement", "_getEventTarget", "event", "composedPath", "target", "_isTestEnvironment", "__karma__", "jasmine", "jest", "Mocha", "MutationObserverFactory", "create", "callback", "MutationObserver", "ɵprov", "factory", "ɵfac", "providedIn", "Injectable", "ContentObserver", "constructor", "_mutationObserverFactory", "_observedElements", "Map", "ngOnDestroy", "forEach", "_", "element", "_cleanupObserver", "observe", "elementOrRef", "coerceElement", "Observable", "observer", "stream", "_observeElement", "subscription", "subscribe", "unsubscribe", "_unobserveElement", "has", "Subject", "mutations", "next", "characterData", "childList", "subtree", "set", "count", "get", "disconnect", "complete", "delete", "CdkObserveContent", "disabled", "_disabled", "value", "_unsubscribe", "_subscribe", "debounce", "_debounce", "coerceNumberProperty", "_contentObserver", "_elementRef", "_ngZone", "event", "EventEmitter", "_currentSubscription", "ngAfterContentInit", "runOutsideAngular", "pipe", "debounceTime", "ElementRef", "NgZone", "ɵdir", "selectors", "inputs", "booleanAttribute", "outputs", "exportAs", "features", "Directive", "args", "selector", "Output", "Input", "alias", "transform", "ObserversModule", "declarations", "exports", "NgModule", "providers", "LayoutModule", "NgModule", "mediaQueriesForWebkitCompatibility", "Set", "mediaQueryStyleNode", "MediaMatcher", "constructor", "_platform", "_nonce", "_matchMedia", "isBrowser", "window", "matchMedia", "bind", "noopMatchMedia", "query", "WEBKIT", "BLINK", "createEmptyStyleRule", "ɵfac", "MediaMatcher_Factory", "t", "Platform", "CSP_NONCE", "ɵprov", "factory", "providedIn", "Injectable", "Optional", "Inject", "nonce", "has", "document", "createElement", "setAttribute", "head", "appendChild", "sheet", "insertRule", "add", "e", "console", "error", "matches", "media", "addListener", "removeListener", "BreakpointObserver", "_mediaMatcher", "_zone", "_queries", "Map", "_destroySubject", "Subject", "ngOnDestroy", "next", "complete", "isMatched", "value", "queries", "splitQueries", "coerceArray", "some", "mediaQuery", "_registerQuery", "mql", "observe", "observables", "map", "observable", "stateObservable", "combineLatest", "concat", "pipe", "take", "skip", "debounceTime", "breakpointStates", "response", "breakpoints", "forEach", "get", "queryObservable", "Observable", "observer", "handler", "run", "startWith", "takeUntil", "output", "set", "NgZone", "split", "reduce", "a1", "a2", "trim", "ID_DELIMITER", "addAriaReferencedId", "el", "attr", "id", "ids", "getAriaReferenceIds", "some", "existingId", "trim", "push", "setAttribute", "join", "removeAriaReferencedId", "filteredIds", "filter", "val", "length", "removeAttribute", "getAttribute", "match", "MESSAGES_CONTAINER_ID", "CDK_DESCRIBEDBY_ID_PREFIX", "CDK_DESCRIBEDBY_HOST_ATTRIBUTE", "nextId", "AriaDescriber", "constructor", "_document", "_platform", "_messageRegistry", "Map", "_messagesContainer", "_id", "inject", "APP_ID", "describe", "hostElement", "message", "role", "_canBeDescribed", "key", "getKey", "setMessageId", "set", "messageElement", "referenceCount", "has", "_createMessageElement", "_isElementDescribedByMessage", "_addMessageReference", "removeDescription", "_isElementNode", "_removeMessageReference", "registeredMessage", "get", "_deleteMessageElement", "childNodes", "remove", "ngOnDestroy", "describedElements", "querySelectorAll", "i", "_removeCdkDescribedByReferenceIds", "clear", "createElement", "textContent", "_createMessagesContainer", "appendChild", "delete", "containerClassName", "serverContainers", "messagesContainer", "style", "visibility", "classList", "add", "isBrowser", "body", "element", "originalReferenceIds", "indexOf", "referenceIds", "messageId", "trimmedMessage", "ariaLabel", "nodeType", "ELEMENT_NODE", "ɵfac", "AriaDescriber_Factory", "t", "ɵɵinject", "DOCUMENT", "Platform", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "ɵsetClassMetadata", "Injectable", "Inject", "serviceId", "ListKeyManager", "_items", "_activeItemIndex", "_activeItem", "_wrap", "_letterKeyStream", "Subject", "_typeaheadSubscription", "Subscription", "EMPTY", "_vertical", "_allowedModifierKeys", "_homeAndEnd", "_pageUpAndDown", "enabled", "delta", "_skipPredicateFn", "item", "disabled", "_pressedLetters", "tabOut", "change", "QueryList", "_itemChangesSubscription", "changes", "subscribe", "newItems", "itemArray", "toArray", "newIndex", "skipPredicate", "predicate", "withWrap", "shouldWrap", "withVerticalOrientation", "withHorizontalOrientation", "direction", "_horizontal", "withAllowedModifierKeys", "keys", "withTypeAhead", "debounceInterval", "ngDevMode", "getLabel", "Error", "unsubscribe", "pipe", "tap", "letter", "debounceTime", "map", "inputString", "items", "_getItemsArray", "index", "toUpperCase", "setActiveItem", "cancelTypeahead", "withHomeAndEnd", "withPageUpDown", "previousActiveItem", "updateActiveItem", "next", "onKeydown", "event", "keyCode", "modifiers", "isModifierAllowed", "every", "modifier", "TAB", "DOWN_ARROW", "setNextItemActive", "UP_ARROW", "setPreviousItemActive", "RIGHT_ARROW", "LEFT_ARROW", "HOME", "setFirstItemActive", "END", "setLastItemActive", "PAGE_UP", "targetIndex", "_setActiveItemByIndex", "PAGE_DOWN", "itemsLength", "hasModifierKey", "toLocaleUpperCase", "A", "Z", "ZERO", "NINE", "String", "fromCharCode", "preventDefault", "activeItemIndex", "activeItem", "isTyping", "_setActiveItemByDelta", "destroy", "complete", "_setActiveInWrapMode", "_setActiveInDefaultMode", "fallbackDelta", "ActiveDescendantKeyManager", "setInactiveStyles", "setActiveStyles", "FocusKeyManager", "_origin", "setFocusOrigin", "origin", "focus", "IsFocusableConfig", "ignoreVisibility", "InteractivityChecker", "isDisabled", "hasAttribute", "isVisible", "hasGeometry", "getComputedStyle", "isTabbable", "frameElement", "getFrameElement", "getWindow", "getTabIndexValue", "nodeName", "toLowerCase", "tabIndexValue", "WEBKIT", "IOS", "isPotentiallyTabbableIOS", "FIREFOX", "tabIndex", "isFocusable", "config", "isPotentiallyFocusable", "window", "offsetWidth", "offsetHeight", "getClientRects", "isNativeFormElement", "isHiddenInput", "isInputElement", "type", "isAnchorWithHref", "isAnchorElement", "hasValidTabIndex", "undefined", "isNaN", "parseInt", "inputType", "node", "ownerDocument", "defaultView", "FocusTrap", "_enabled", "value", "_startAnchor", "_endAnchor", "_toggleAnchorTabIndex", "_element", "_checker", "_ngZone", "deferAnchors", "_hasAttached", "startAnchorListener", "focusLastTabbableElement", "endAnchorListener", "focusFirstTabbableElement", "attachAnchors", "startAnchor", "endAnchor", "removeEventListener", "runOutsideAngular", "_createAnchor", "addEventListener", "parentNode", "insertBefore", "nextSibling", "focusInitialElementWhenReady", "options", "Promise", "resolve", "_executeOnStable", "focusInitialElement", "focusFirstTabbableElementWhenReady", "focusLastTabbableElementWhenReady", "_getRegionBoundary", "bound", "markers", "console", "warn", "_getFirstTabbableElement", "_getLastTabbableElement", "redirectToElement", "querySelector", "focusableChild", "hasAttached", "root", "children", "tabbableChild", "anchor", "isEnabled", "toggleAnchors", "fn", "isStable", "onStable", "take", "FocusTrapFactory", "create", "deferCaptureElements", "FocusTrapFactory_Factory", "NgZone", "CdkTrapFocus", "focusTrap", "_elementRef", "_focusTrapFactory", "_previouslyFocusedElement", "nativeElement", "ngAfterContentInit", "autoCapture", "_captureFocus", "ngDoCheck", "ngOnChanges", "autoCaptureChange", "firstChange", "_getFocusedElementPierceShadowDom", "CdkTrapFocus_Factory", "ɵɵdirectiveInject", "ElementRef", "ɵɵdefineDirective", "selectors", "inputs", "booleanAttribute", "exportAs", "features", "ɵɵInputTransformsFeature", "ɵɵNgOnChangesFeature", "Directive", "args", "selector", "Input", "alias", "transform", "ConfigurableFocusTrap", "_focusTrapManager", "register", "deregister", "_inertStrategy", "defer", "_enable", "preventFocus", "_disable", "allowFocus", "FOCUS_TRAP_INERT_STRATEGY", "InjectionToken", "EventListenerFocusTrapInertStrategy", "_listener", "e", "_trapFocus", "target", "focusTrapRoot", "contains", "closest", "setTimeout", "activeElement", "FocusTrapManager", "_focusTrapStack", "ft", "stack", "splice", "ConfigurableFocusTrapFactory", "configObject", "Optional", "isFakeMousedownFromScreenReader", "buttons", "detail", "isFakeTouchstartFromScreenReader", "touch", "touches", "changedTouches", "identifier", "radiusX", "radiusY", "INPUT_MODALITY_DETECTOR_OPTIONS", "INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS", "ignoreKeys", "ALT", "CONTROL", "MAC_META", "META", "SHIFT", "TOUCH_BUFFER_MS", "modalityEventListenerOptions", "normalizePassiveListenerOptions", "passive", "capture", "InputModalityDetector", "mostRecentModality", "_modality", "ngZone", "document", "_mostRecentTarget", "BehaviorSubject", "_lastTouchMs", "_onKeydown", "_options", "_getEventTarget", "_onMousedown", "Date", "now", "_onTouchstart", "modalityDetected", "skip", "modalityChanged", "distinctUntilChanged", "LIVE_ANNOUNCER_ELEMENT_TOKEN", "LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY", "LIVE_ANNOUNCER_DEFAULT_OPTIONS", "uniqueIds", "LiveAnnouncer", "elementToken", "_defaultOptions", "_liveElement", "_createLiveElement", "announce", "defaultOptions", "politeness", "duration", "clearTimeout", "_previousTimeout", "_exposeAnnouncerToModals", "_currentPromise", "_currentResolve", "elementClass", "previousElements", "getElementsByClassName", "liveEl", "modals", "modal", "ariaOwns", "LiveAnnouncer_Factory", "CdkAriaLive", "_politeness", "_subscription", "_contentObserver", "observe", "elementText", "_previousAnnouncedText", "_liveAnnouncer", "ContentObserver", "FOCUS_MONITOR_DEFAULT_OPTIONS", "captureEventListenerOptions", "FocusMonitor", "_inputModalityDetector", "_windowFocused", "_originFromTouchInteraction", "_elementInfo", "_monitoredElementCount", "_rootNodeFocusListenerCount", "_windowFocusListener", "_windowFocusTimeoutId", "_stopInputModalityDetector", "_rootNodeFocusAndBlurListener", "parentElement", "_onFocus", "_onBlur", "_detectionMode", "detectionMode", "monitor", "checkChildren", "coerceElement", "of", "rootNode", "_getShadowRoot", "_getDocument", "cachedInfo", "subject", "info", "_registerGlobalListeners", "stopMonitoring", "elementInfo", "_setClasses", "_removeGlobalListeners", "focusVia", "focusedElement", "_getClosestElementsInfo", "forEach", "currentElement", "_originChanged", "_setOrigin", "_info", "_getWindow", "doc", "_getFocusOrigin", "focusEventTarget", "_shouldBeAttributedToTouch", "_lastFocusOrigin", "_isLastInteractionFromInputLabel", "toggle", "isFromInteraction", "_originTimeoutId", "ms", "relatedTarget", "Node", "_emitOrigin", "observers", "run", "rootNodeFocusListeners", "takeUntil", "modality", "results", "mostRecentTarget", "labels", "CdkMonitorFocus", "_focusMonitor", "_focusOrigin", "cdkFocusChange", "EventEmitter", "focusOrigin", "ngAfterViewInit", "_monitorSubscription", "emit", "outputs", "Output", "BLACK_ON_WHITE_CSS_CLASS", "WHITE_ON_BLACK_CSS_CLASS", "HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS", "HighContrastModeDetector", "_breakpointSubscription", "BreakpointObserver", "_hasCheckedHighContrastMode", "_applyBodyHighContrastModeCssClasses", "getHighContrastMode", "testElement", "backgroundColor", "position", "documentWindow", "computedStyle", "computedColor", "replace", "bodyClasses", "mode", "HighContrastModeDetector_Factory", "A11yModule", "highContrastModeDetector", "ɵmod", "ɵɵdefineNgModule", "declarations", "imports", "ObserversModule", "exports", "ɵinj", "ɵɵdefineInjector", "NgModule"]
}
