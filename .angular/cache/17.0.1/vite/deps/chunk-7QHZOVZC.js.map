{
  "version": 3,
  "sources": ["../../../../../../../src/cdk/bidi/dir-document-token.ts", "../../../../../../../src/cdk/bidi/directionality.ts", "../../../../../../../src/cdk/bidi/dir.ts", "../../../../../../../src/cdk/bidi/bidi-module.ts", "../../../../../../../src/cdk/bidi/bidi_public_index.ts", "../../../../../../../src/cdk/version.ts", "../../../../../../../src/material/core/version.ts", "../../../../../../../src/material/core/animation/animation.ts", "../../../../../../../src/material/core/common-behaviors/common-module.ts", "../../../../../../../src/material/core/common-behaviors/disabled.ts", "../../../../../../../src/material/core/common-behaviors/color.ts", "../../../../../../../src/material/core/common-behaviors/disable-ripple.ts", "../../../../../../../src/material/core/common-behaviors/tabindex.ts", "../../../../../../../src/material/core/common-behaviors/error-state.ts", "../../../../../../../src/material/core/common-behaviors/initialized.ts", "../../../../../../../src/material/core/datetime/date-adapter.ts", "../../../../../../../src/material/core/datetime/date-formats.ts", "../../../../../../../src/material/core/datetime/native-date-adapter.ts", "../../../../../../../src/material/core/datetime/native-date-formats.ts", "../../../../../../../src/material/core/datetime/index.ts", "../../../../../../../src/material/core/error/error-options.ts", "../../../../../../../src/material/core/line/line.ts", "../../../../../../../src/material/core/ripple/ripple-ref.ts", "../../../../../../../src/material/core/ripple/ripple-event-manager.ts", "../../../../../../../src/material/core/ripple/ripple-renderer.ts", "../../../../../../../src/material/core/ripple/ripple.ts", "../../../../../../../src/material/core/ripple/index.ts", "../../../../../../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts", "../../../../../../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox-module.ts", "../../../../../../../src/material/core/option/option-parent.ts", "../../../../../../../src/material/core/option/optgroup.ts", "../../../../../../../src/material/core/option/optgroup.html", "../../../../../../../src/material/core/option/option.ts", "../../../../../../../src/material/core/option/option.html", "../../../../../../../src/material/core/option/index.ts", "../../../../../../../src/material/core/private/ripple-loader.ts", "../../../../../../../src/material/core/core_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {inject, InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY,\n});\n\n/** @docs-private */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n  return inject(DOCUMENT);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Inject, Injectable, Optional, OnDestroy} from '@angular/core';\nimport {DIR_DOCUMENT} from './dir-document-token';\n\nexport type Direction = 'ltr' | 'rtl';\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN =\n  /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n\n/** Resolves a string value to a specific direction. */\nexport function _resolveDirectionality(rawValue: string): Direction {\n  const value = rawValue?.toLowerCase() || '';\n\n  if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n    return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n  }\n\n  return value === 'rtl' ? 'rtl' : 'ltr';\n}\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n@Injectable({providedIn: 'root'})\nexport class Directionality implements OnDestroy {\n  /** The current 'ltr' or 'rtl' value. */\n  readonly value: Direction = 'ltr';\n\n  /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n  readonly change = new EventEmitter<Direction>();\n\n  constructor(@Optional() @Inject(DIR_DOCUMENT) _document?: any) {\n    if (_document) {\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n    }\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Output, Input, EventEmitter, AfterContentInit, OnDestroy} from '@angular/core';\n\nimport {Direction, Directionality, _resolveDirectionality} from './directionality';\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n@Directive({\n  selector: '[dir]',\n  providers: [{provide: Directionality, useExisting: Dir}],\n  host: {'[attr.dir]': '_rawDir'},\n  exportAs: 'dir',\n})\nexport class Dir implements Directionality, AfterContentInit, OnDestroy {\n  /** Normalized direction that accounts for invalid/unsupported values. */\n  private _dir: Direction = 'ltr';\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Direction as passed in by the consumer. */\n  _rawDir: string;\n\n  /** Event emitted when the direction changes. */\n  @Output('dirChange') readonly change = new EventEmitter<Direction>();\n\n  /** @docs-private */\n  @Input()\n  get dir(): Direction {\n    return this._dir;\n  }\n  set dir(value: Direction | 'auto') {\n    const previousValue = this._dir;\n\n    // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n    // whereas the browser does it based on the content of the element. Since doing so based\n    // on the content can be expensive, for now we're doing the simpler matching.\n    this._dir = _resolveDirectionality(value);\n    this._rawDir = value;\n\n    if (previousValue !== this._dir && this._isInitialized) {\n      this.change.emit(this._dir);\n    }\n  }\n\n  /** Current layout direction of the element. */\n  get value(): Direction {\n    return this.dir;\n  }\n\n  /** Initialize once default value has been set. */\n  ngAfterContentInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {Dir} from './dir';\n\n@NgModule({\n  exports: [Dir],\n  declarations: [Dir],\n})\nexport class BidiModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of the Angular Component Development Kit. */\nexport const VERSION = new Version('17.0.0');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('17.0.0');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HighContrastModeDetector} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {inject, Inject, InjectionToken, NgModule, Optional} from '@angular/core';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\nimport {DOCUMENT} from '@angular/common';\nimport {Platform, _isTestEnvironment} from '@angular/cdk/platform';\nimport {VERSION} from '../version';\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): SanityChecks {\n  return true;\n}\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<SanityChecks>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/**\n * Possible sanity checks that can be enabled. If set to\n * true/false, all checks will be enabled/disabled.\n */\nexport type SanityChecks = boolean | GranularSanityChecks;\n\n/** Object that can be used to configure the sanity checks granularly. */\nexport interface GranularSanityChecks {\n  doctype: boolean;\n  theme: boolean;\n  version: boolean;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  constructor(\n    highContrastModeDetector: HighContrastModeDetector,\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecks: SanityChecks,\n    @Inject(DOCUMENT) private _document: Document,\n  ) {\n    // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n    // in MatCommonModule.\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n\n    if (!this._hasDoneGlobalChecks) {\n      this._hasDoneGlobalChecks = true;\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Inject in here so the reference to `Platform` can be removed in production mode.\n        const platform = inject(Platform, {optional: true});\n\n        if (this._checkIsEnabled('doctype')) {\n          _checkDoctypeIsDefined(this._document);\n        }\n\n        if (this._checkIsEnabled('theme')) {\n          _checkThemeIsPresent(this._document, !!platform?.isBrowser);\n        }\n\n        if (this._checkIsEnabled('version')) {\n          _checkCdkVersionMatch();\n        }\n      }\n    }\n  }\n\n  /** Gets whether a specific sanity check is enabled. */\n  private _checkIsEnabled(name: keyof GranularSanityChecks): boolean {\n    if (_isTestEnvironment()) {\n      return false;\n    }\n\n    if (typeof this._sanityChecks === 'boolean') {\n      return this._sanityChecks;\n    }\n\n    return !!this._sanityChecks[name];\n  }\n}\n\n/** Checks that the page has a doctype. */\nfunction _checkDoctypeIsDefined(doc: Document): void {\n  if (!doc.doctype) {\n    console.warn(\n      'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.',\n    );\n  }\n}\n\n/** Checks that a theme has been included. */\nfunction _checkThemeIsPresent(doc: Document, isBrowser: boolean): void {\n  // We need to assert that the `body` is defined, because these checks run very early\n  // and the `body` won't be defined if the consumer put their scripts in the `head`.\n  if (!doc.body || !isBrowser) {\n    return;\n  }\n\n  const testElement = doc.createElement('div');\n  testElement.classList.add('mat-theme-loaded-marker');\n  doc.body.appendChild(testElement);\n\n  const computedStyle = getComputedStyle(testElement);\n\n  // In some situations the computed style of the test element can be null. For example in\n  // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  if (computedStyle && computedStyle.display !== 'none') {\n    console.warn(\n      'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming',\n    );\n  }\n\n  testElement.remove();\n}\n\n/** Checks whether the Material version matches the CDK version. */\nfunction _checkCdkVersionMatch(): void {\n  if (VERSION.full !== CDK_VERSION.full) {\n    console.warn(\n      'The Angular Material version (' +\n        VERSION.full +\n        ') does not match ' +\n        'the Angular CDK version (' +\n        CDK_VERSION.full +\n        ').\\n' +\n        'Please ensure the versions of these two packages exactly match.',\n    );\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {AbstractConstructor, Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\ntype CanDisableCtor = Constructor<CanDisable> & AbstractConstructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends AbstractConstructor<{}>>(base: T): CanDisableCtor & T;\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled(): boolean {\n      return this._disabled;\n    }\n    set disabled(value: any) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractConstructor, Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n\n  /** Default color to fall back to if no value is set. */\n  defaultColor: ThemePalette | undefined;\n}\n\ntype CanColorCtor = Constructor<CanColor> & AbstractConstructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends AbstractConstructor<HasElementRef>>(\n  base: T,\n  defaultColor?: ThemePalette,\n): CanColorCtor & T;\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n  base: T,\n  defaultColor?: ThemePalette,\n): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n    defaultColor = defaultColor;\n\n    get color(): ThemePalette {\n      return this._color;\n    }\n    set color(value: ThemePalette) {\n      const colorPalette = value || this.defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {AbstractConstructor, Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\ntype CanDisableRippleCtor = Constructor<CanDisableRipple> & AbstractConstructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends AbstractConstructor<{}>>(\n  base: T,\n): CanDisableRippleCtor & T;\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple(): boolean {\n      return this._disableRipple;\n    }\n    set disableRipple(value: any) {\n      this._disableRipple = coerceBooleanProperty(value);\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Constructor, AbstractConstructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n\n  /** Tabindex to which to fall back to if no value is set. */\n  defaultTabIndex: number;\n}\n\ntype HasTabIndexCtor = Constructor<HasTabIndex> & AbstractConstructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends AbstractConstructor<CanDisable>>(\n  base: T,\n  defaultTabIndex?: number,\n): HasTabIndexCtor & T;\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(\n  base: T,\n  defaultTabIndex = 0,\n): HasTabIndexCtor & T {\n  return class extends base implements HasTabIndex {\n    private _tabIndex: number = defaultTabIndex;\n    defaultTabIndex = defaultTabIndex;\n\n    get tabIndex(): number {\n      return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {AbstractConstructor, Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  /** Updates the error state based on the provided error state matcher. */\n  updateErrorState(): void;\n  /** Whether the component is in an error state. */\n  errorState: boolean;\n  /** An object used to control the error state of the component. */\n  errorStateMatcher: ErrorStateMatcher;\n}\n\ntype CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState> &\n  AbstractConstructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n\n  // These properties are defined as per the `MatFormFieldControl` interface. Since\n  // this mixin is commonly used with custom form-field controls, we respect the\n  // properties (also with the public name they need according to `MatFormFieldControl`).\n  ngControl: NgControl;\n  stateChanges: Subject<void>;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends AbstractConstructor<HasErrorState>>(\n  base: T,\n): CanUpdateErrorStateCtor & T;\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(\n  base: T,\n): CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /** An object used to control the error state of the component. */\n    errorStateMatcher: ErrorStateMatcher;\n\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? (this.ngControl.control as AbstractControl) : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\ntype HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T): HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\n          'This directive has already been marked as initialized and ' +\n            'should not be called twice.',\n        );\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<{}>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): {} {\n  return inject(LOCALE_ID);\n}\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D, L = any> {\n  /** The locale to use for all dates. */\n  protected locale: L;\n  protected readonly _localeChanges = new Subject<void>();\n\n  /** A stream that emits when the locale changes. */\n  readonly localeChanges: Observable<void> = this._localeChanges;\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Given a potential date object, returns that same date object if it is\n   * a valid date, or `null` if it's not a valid date.\n   * @param obj The object to check.\n   * @returns A date or `null`.\n   */\n  getValidDateOrNull(obj: unknown): D | null {\n    return this.isDateInstance(obj) && this.isValid(obj as D) ? (obj as D) : null;\n  }\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || (this.isDateInstance(value) && this.isValid(value))) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: L) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return (\n      this.getYear(first) - this.getYear(second) ||\n      this.getMonth(first) - this.getMonth(second) ||\n      this.getDate(first) - this.getDate(second)\n    );\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any;\n  };\n  display: {\n    dateInput: any;\n    monthLabel?: any;\n    monthYearLabel: any;\n    dateA11yLabel: any;\n    monthYearA11yLabel: any;\n  };\n};\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n  /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  useUtcForDisplay: boolean = false;\n\n  /** The injected locale. */\n  private readonly _matDateLocale = inject(MAT_DATE_LOCALE, {optional: true});\n\n  constructor(\n    /**\n     * @deprecated Now injected via inject(), param to be removed.\n     * @breaking-change 18.0.0\n     */\n    @Optional() @Inject(MAT_DATE_LOCALE) matDateLocale?: string,\n  ) {\n    super();\n    if (matDateLocale !== undefined) {\n      this._matDateLocale = matDateLocale;\n    }\n    super.setLocale(this._matDateLocale);\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n    return range(12, i => this._format(dtf, new Date(2017, i, 1)));\n  }\n\n  getDateNames(): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n    return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n    return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));\n  }\n\n  getYearName(date: Date): string {\n    const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n    return this._format(dtf, date);\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(\n      this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0),\n    );\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Check for invalid month and date (except upper bound on date which we have to check after\n      // creating the Date).\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any, parseFormat?: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    const dtf = new Intl.DateTimeFormat(this.locale, {...displayFormat, timeZone: 'utc'});\n    return this._format(dtf, date);\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date) + months,\n      this.getDate(date),\n    );\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != (((this.getMonth(date) + months) % 12) + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date),\n      this.getDate(date) + days,\n    );\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate()),\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  override deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setFullYear` and `setHours` instead.\n    const d = new Date();\n    d.setFullYear(year, month, date);\n    d.setHours(0, 0, 0, 0);\n    return d;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containing the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n    const d = new Date();\n    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    return dtf.format(d);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  },\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n@NgModule({\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n})\nexport class NativeDateModule {}\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, AbstractControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, Directive, ElementRef, QueryList} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'},\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(\n  lines: QueryList<unknown>,\n  element: ElementRef<HTMLElement>,\n  prefix = 'mat',\n) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, `${prefix}-2-line`, false);\n    setClass(element, `${prefix}-3-line`, false);\n    setClass(element, `${prefix}-multi-line`, false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `${prefix}-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `${prefix}-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  element.nativeElement.classList.toggle(className, isAdd);\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Possible states for a ripple element. */\nexport const enum RippleState {\n  FADING_IN,\n  VISIBLE,\n  FADING_OUT,\n  HIDDEN,\n}\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: {fadeOutRipple(ref: RippleRef): void},\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig,\n    /* Whether animations are forcibly disabled for ripples through CSS. */\n    public _animationForciblyDisabledThroughCss = false,\n  ) {}\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {normalizePassiveListenerOptions, _getEventTarget} from '@angular/cdk/platform';\nimport {NgZone} from '@angular/core';\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/** Manages events through delegation so that as few event handlers as possible are bound. */\nexport class RippleEventManager {\n  private _events = new Map<string, Map<HTMLElement, Set<EventListenerObject>>>();\n\n  /** Adds an event handler. */\n  addHandler(ngZone: NgZone, name: string, element: HTMLElement, handler: EventListenerObject) {\n    const handlersForEvent = this._events.get(name);\n\n    if (handlersForEvent) {\n      const handlersForElement = handlersForEvent.get(element);\n\n      if (handlersForElement) {\n        handlersForElement.add(handler);\n      } else {\n        handlersForEvent.set(element, new Set([handler]));\n      }\n    } else {\n      this._events.set(name, new Map([[element, new Set([handler])]]));\n\n      ngZone.runOutsideAngular(() => {\n        document.addEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes an event handler. */\n  removeHandler(name: string, element: HTMLElement, handler: EventListenerObject) {\n    const handlersForEvent = this._events.get(name);\n\n    if (!handlersForEvent) {\n      return;\n    }\n\n    const handlersForElement = handlersForEvent.get(element);\n\n    if (!handlersForElement) {\n      return;\n    }\n\n    handlersForElement.delete(handler);\n\n    if (handlersForElement.size === 0) {\n      handlersForEvent.delete(element);\n    }\n\n    if (handlersForEvent.size === 0) {\n      this._events.delete(name);\n      document.removeEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions);\n    }\n  }\n\n  /** Event handler that is bound and which dispatches the events to the different targets. */\n  private _delegateEventHandler = (event: Event) => {\n    const target = _getEventTarget(event);\n\n    if (target) {\n      this._events.get(event.type)?.forEach((handlers, element) => {\n        if (element === target || element.contains(target as Node)) {\n          handlers.forEach(handler => handler.handleEvent(event));\n        }\n      });\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions, _getEventTarget} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader} from '@angular/cdk/a11y';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {RippleRef, RippleState, RippleConfig} from './ripple-ref';\nimport {RippleEventManager} from './ripple-event-manager';\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/** Interfaces the defines ripple element transition event listeners. */\ninterface RippleEventListeners {\n  onTransitionEnd: EventListener;\n  onTransitionCancel: EventListener;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 225,\n  exitDuration: 150,\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer implements EventListenerObject {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /**\n   * Map of currently active ripple references.\n   * The ripple reference is mapped to its element event listeners.\n   * The reason why `| null` is used is that event listeners are added only\n   * when the condition is truthy (see the `_startFadeOutTransition` method).\n   */\n  private _activeRipples = new Map<RippleRef, RippleEventListeners | null>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Whether pointer-up event listeners have been registered. */\n  private _pointerUpEventsRegistered = false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  private static _eventManager = new RippleEventManager();\n\n  constructor(\n    private _target: RippleTarget,\n    private _ngZone: NgZone,\n    elementOrElementRef: HTMLElement | ElementRef<HTMLElement>,\n    private _platform: Platform,\n  ) {\n    // Only do anything if we're on the browser.\n    if (_platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = (this._containerRect =\n      this._containerRect || this._containerElement.getBoundingClientRect());\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const enterDuration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If a custom color has been specified, set it as inline style. If no color is\n    // set, the default color will be applied through the ripple theme styles.\n    if (config.color != null) {\n      ripple.style.backgroundColor = config.color;\n    }\n\n    ripple.style.transitionDuration = `${enterDuration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical to ensure that the `scale` animates properly.\n    // We enforce a style recalculation by calling `getComputedStyle` and *accessing* a property.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    const computedStyles = window.getComputedStyle(ripple);\n    const userTransitionProperty = computedStyles.transitionProperty;\n    const userTransitionDuration = computedStyles.transitionDuration;\n\n    // Note: We detect whether animation is forcibly disabled through CSS (e.g. through\n    // `transition: none` or `display: none`). This is technically unexpected since animations are\n    // controlled through the animation config, but this exists for backwards compatibility. This\n    // logic does not need to be super accurate since it covers some edge cases which can be easily\n    // avoided by users.\n    const animationForciblyDisabledThroughCss =\n      userTransitionProperty === 'none' ||\n      // Note: The canonical unit for serialized CSS `<time>` properties is seconds. Additionally\n      // some browsers expand the duration for every property (in our case `opacity` and `transform`).\n      userTransitionDuration === '0s' ||\n      userTransitionDuration === '0s, 0s' ||\n      // If the container is 0x0, it's likely `display: none`.\n      (containerRect.width === 0 && containerRect.height === 0);\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config, animationForciblyDisabledThroughCss);\n\n    // Start the enter animation by setting the transform/scale to 100%. The animation will\n    // execute as part of this statement because we forced a style recalculation before.\n    // Note: We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    ripple.style.transform = 'scale3d(1, 1, 1)';\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    let eventListeners: RippleEventListeners | null = null;\n\n    // Do not register the `transition` event listener if fade-in and fade-out duration\n    // are set to zero. The events won't fire anyway and we can save resources here.\n    if (!animationForciblyDisabledThroughCss && (enterDuration || animationConfig.exitDuration)) {\n      this._ngZone.runOutsideAngular(() => {\n        const onTransitionEnd = () => this._finishRippleTransition(rippleRef);\n        const onTransitionCancel = () => this._destroyRipple(rippleRef);\n        ripple.addEventListener('transitionend', onTransitionEnd);\n        // If the transition is cancelled (e.g. due to DOM removal), we destroy the ripple\n        // directly as otherwise we would keep it part of the ripple container forever.\n        // https://www.w3.org/TR/css-transitions-1/#:~:text=no%20longer%20in%20the%20document.\n        ripple.addEventListener('transitioncancel', onTransitionCancel);\n        eventListeners = {onTransitionEnd, onTransitionCancel};\n      });\n    }\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.set(rippleRef, eventListeners);\n\n    // In case there is no fade-in transition duration, we need to manually call the transition\n    // end listener because `transitionend` doesn't fire if there is no transition.\n    if (animationForciblyDisabledThroughCss || !enterDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples already fading out or hidden, this should be a noop.\n    if (rippleRef.state === RippleState.FADING_OUT || rippleRef.state === RippleState.HIDDEN) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    // This starts the fade-out transition and will fire the transition end listener that\n    // removes the ripple element from the DOM.\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // In case there is no fade-out transition duration, we need to manually call the\n    // transition end listener because `transitionend` doesn't fire if there is no transition.\n    if (rippleRef._animationForciblyDisabledThroughCss || !animationConfig.exitDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._getActiveRipples().forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Fades out all currently active non-persistent ripples. */\n  fadeOutAllNonPersistent() {\n    this._getActiveRipples().forEach(ripple => {\n      if (!ripple.config.persistent) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(elementOrElementRef: HTMLElement | ElementRef<HTMLElement>) {\n    const element = coerceElement(elementOrElementRef);\n\n    if (!this._platform.isBrowser || !element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n    this._triggerElement = element;\n\n    // Use event delegation for the trigger events since they're\n    // set up during creation and are performance-sensitive.\n    pointerDownEvents.forEach(type => {\n      RippleRenderer._eventManager.addHandler(this._ngZone, type, element, this);\n    });\n  }\n\n  /**\n   * Handles all registered events.\n   * @docs-private\n   */\n  handleEvent(event: Event) {\n    if (event.type === 'mousedown') {\n      this._onMousedown(event as MouseEvent);\n    } else if (event.type === 'touchstart') {\n      this._onTouchStart(event as TouchEvent);\n    } else {\n      this._onPointerUp();\n    }\n\n    // If pointer-up events haven't been registered yet, do so now.\n    // We do this on-demand in order to reduce the total number of event listeners\n    // registered by the ripples, which speeds up the rendering time for large UIs.\n    if (!this._pointerUpEventsRegistered) {\n      // The events for hiding the ripple are bound directly on the trigger, because:\n      // 1. Some of them occur frequently (e.g. `mouseleave`) and any advantage we get from\n      // delegation will be diminished by having to look through all the data structures often.\n      // 2. They aren't as performance-sensitive, because they're bound only after the user\n      // has interacted with an element.\n      this._ngZone.runOutsideAngular(() => {\n        pointerUpEvents.forEach(type => {\n          this._triggerElement!.addEventListener(type, this, passiveCapturingEventOptions);\n        });\n      });\n\n      this._pointerUpEventsRegistered = true;\n    }\n  }\n\n  /** Method that will be called if the fade-in or fade-in transition completed. */\n  private _finishRippleTransition(rippleRef: RippleRef) {\n    if (rippleRef.state === RippleState.FADING_IN) {\n      this._startFadeOutTransition(rippleRef);\n    } else if (rippleRef.state === RippleState.FADING_OUT) {\n      this._destroyRipple(rippleRef);\n    }\n  }\n\n  /**\n   * Starts the fade-out transition of the given ripple if it's not persistent and the pointer\n   * is not held down anymore.\n   */\n  private _startFadeOutTransition(rippleRef: RippleRef) {\n    const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n    const {persistent} = rippleRef.config;\n\n    rippleRef.state = RippleState.VISIBLE;\n\n    // When the timer runs out while the user has kept their pointer down, we want to\n    // keep only the persistent ripples and the latest transient ripple. We do this,\n    // because we don't want stacked transient ripples to appear after their enter\n    // animation has finished.\n    if (!persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n      rippleRef.fadeOut();\n    }\n  }\n\n  /** Destroys the given ripple by removing it from the DOM and updating its state. */\n  private _destroyRipple(rippleRef: RippleRef) {\n    const eventListeners = this._activeRipples.get(rippleRef) ?? null;\n    this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // If the current ref is the most recent transient ripple, unset it\n    // avoid memory leaks.\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    rippleRef.state = RippleState.HIDDEN;\n    if (eventListeners !== null) {\n      rippleRef.element.removeEventListener('transitionend', eventListeners.onTransitionEnd);\n      rippleRef.element.removeEventListener('transitioncancel', eventListeners.onTransitionCancel);\n    }\n    rippleRef.element.remove();\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown(event: MouseEvent) {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent =\n      this._lastTouchStartEvent &&\n      Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart(event: TouchEvent) {\n    if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches as TouchList | undefined;\n\n      // According to the typings the touches should always be defined, but in some cases\n      // the browser appears to not assign them in tests which leads to flakes.\n      if (touches) {\n        for (let i = 0; i < touches.length; i++) {\n          this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n        }\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp() {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._getActiveRipples().forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible =\n        ripple.state === RippleState.VISIBLE ||\n        (ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN);\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  private _getActiveRipples(): RippleRef[] {\n    return Array.from(this._activeRipples.keys());\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    const trigger = this._triggerElement;\n\n    if (trigger) {\n      pointerDownEvents.forEach(type =>\n        RippleRenderer._eventManager.removeHandler(type, trigger, this),\n      );\n\n      if (this._pointerUpEventsRegistered) {\n        pointerUpEvents.forEach(type =>\n          trigger.removeEventListener(type, this, passiveCapturingEventOptions),\n        );\n      }\n    }\n  }\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleAnimationConfig, RippleConfig, RippleRef} from './ripple-ref';\nimport {RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Default configuration for the animation duration of the ripples. There are two phases with\n   * different durations for the ripples: `enter` and `leave`. The durations will be overwritten\n   * by the value of `matRippleAnimation` or if the `NoopAnimationsModule` is included.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse or touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken<RippleGlobalOptions>(\n  'mat-ripple-global-options',\n);\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded',\n  },\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    if (value) {\n      this.fadeOutAllNonPersistent();\n    }\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() {\n    return this._trigger || this._elementRef.nativeElement;\n  }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** @docs-private Whether ripple directive is initialized and the input bindings are set. */\n  _isInitialized: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    ngZone: NgZone,\n    platform: Platform,\n    @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n  ) {\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Fades out all currently showing non-persistent ripple elements. */\n  fadeOutAllNonPersistent() {\n    this._rippleRenderer.fadeOutAllNonPersistent();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {\n        ...this._globalOptions.animation,\n        ...(this._animationMode === 'NoopAnimations' ? {enterDuration: 0, exitDuration: 0} : {}),\n        ...this.animation,\n      },\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates relative to the viewport.\n   * @param x Coordinate along the X axis at which to fade-in the ripple. Coordinate\n   *   should be relative to the viewport.\n   * @param y Coordinate along the Y axis at which to fade-in the ripple. Coordinate\n   *   should be relative to the viewport.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class.mat-pseudo-checkbox-minimal]': 'appearance === \"minimal\"',\n    '[class.mat-pseudo-checkbox-full]': 'appearance === \"full\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  /**\n   * Appearance of the pseudo checkbox. Default appearance of 'full' renders a checkmark/mixedmark\n   * indicator inside a square box. 'minimal' appearance only renders the checkmark/mixedmark.\n   */\n  @Input() appearance: 'minimal' | 'full' = 'full';\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox';\nimport {MatCommonModule} from '../../common-behaviors/common-module';\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox],\n})\nexport class MatPseudoCheckboxModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n  inertGroups?: boolean;\n  hideSingleSelectionIndicator?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT = new InjectionToken<MatOptionParentComponent>(\n  'MAT_OPTION_PARENT_COMPONENT',\n);\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  Inject,\n  Optional,\n  InjectionToken,\n  booleanAttribute,\n} from '@angular/core';\nimport {MatOptionParentComponent, MAT_OPTION_PARENT_COMPONENT} from './option-parent';\n\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_OPTGROUP = new InjectionToken<MatOptgroup>('MatOptgroup');\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-mdc-optgroup',\n    '[attr.role]': '_inert ? null : \"group\"',\n    '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\n    '[attr.aria-labelledby]': '_inert ? null : _labelId',\n  },\n  providers: [{provide: MAT_OPTGROUP, useExisting: MatOptgroup}],\n})\nexport class MatOptgroup {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** whether the option group is disabled. */\n  @Input({transform: booleanAttribute}) disabled: boolean = false;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n\n  /** Whether the group is in inert a11y mode. */\n  _inert: boolean;\n\n  constructor(@Inject(MAT_OPTION_PARENT_COMPONENT) @Optional() parent?: MatOptionParentComponent) {\n    this._inert = parent?.inertGroups ?? false;\n  }\n}\n", "<span\n  class=\"mat-mdc-optgroup-label\"\n  role=\"presentation\"\n  [class.mdc-list-item--disabled]=\"disabled\"\n  [id]=\"_labelId\">\n  <span class=\"mdc-list-item__primary-text\">{{ label }} <ng-content></ng-content></span>\n</span>\n\n<ng-content select=\"mat-option, ng-container\"></ng-content>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ElementRef,\n  ChangeDetectorRef,\n  Optional,\n  Inject,\n  AfterViewChecked,\n  OnDestroy,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ViewChild,\n  booleanAttribute,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MAT_OPTGROUP, MatOptgroup} from './optgroup';\nimport {MatOptionParentComponent, MAT_OPTION_PARENT_COMPONENT} from './option-parent';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange<T = any> {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption<T>,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false,\n  ) {}\n}\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[class.mdc-list-item--selected]': 'selected',\n    '[class.mat-mdc-option-multiple]': 'multiple',\n    '[class.mat-mdc-option-active]': 'active',\n    '[class.mdc-list-item--disabled]': 'disabled',\n    '[id]': 'id',\n    // Set aria-selected to false for non-selected items and true for selected items. Conform to\n    // [WAI ARIA Listbox authoring practices guide](\n    //  https://www.w3.org/WAI/ARIA/apg/patterns/listbox/), \"If any options are selected, each\n    // selected option has either aria-selected or aria-checked  set to true. All options that are\n    // selectable but not selected have either aria-selected or aria-checked set to false.\" Align\n    // aria-selected implementation of Chips and List components.\n    //\n    // Set `aria-selected=\"false\"` on not-selected listbox options to fix VoiceOver announcing\n    // every option as \"selected\" (#21491).\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-mdc-option mdc-list-item',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption<T = any> implements FocusableOption, AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() {\n    return this._parent && this._parent.multiple;\n  }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  /** The form value of the option. */\n  @Input() value: T;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return (this.group && this.group.disabled) || this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple(): boolean {\n    return !!(this._parent && this._parent.disableRipple);\n  }\n\n  /** Whether to display checkmark for single-selection. */\n  get hideSingleSelectionIndicator(): boolean {\n    return !!(this._parent && this._parent.hideSingleSelectionIndicator);\n  }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange<T>>();\n\n  /** Element containing the option's text. */\n  @ViewChild('text', {static: true}) _text: ElementRef<HTMLElement> | undefined;\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    public _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() @Inject(MAT_OPTGROUP) public group: MatOptgroup,\n  ) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._text?.nativeElement.textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(emitEvent = true): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n\n      if (emitEvent) {\n        this._emitSelectionChangeEvent();\n      }\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(emitEvent = true): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n\n      if (emitEvent) {\n        this._emitSelectionChangeEvent();\n      }\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  // This method is only used by `MatLegacyOption`. Keeping it here to avoid breaking the types.\n  // That's because `MatLegacyOption` use `MatOption` type in a few places such as\n  // `MatOptionSelectionChange`. It is safe to delete this when `MatLegacyOption` is deleted.\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        if (this._mostRecentViewValue) {\n          this._stateChanges.next();\n        }\n\n        this._mostRecentViewValue = viewValue;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange<T>(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(\n  optionIndex: number,\n  options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>,\n): number {\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(\n  optionOffset: number,\n  optionHeight: number,\n  currentScrollPosition: number,\n  panelHeight: number,\n): number {\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n", "<!-- Set aria-hidden=\"true\" to this DOM node and other decorative nodes in this file. This might\n be contributing to issue where sometimes VoiceOver focuses on a TextNode in the a11y tree instead\n of the Option node (#23202). Most assistive technology will generally ignore non-role,\n non-text-content elements. Adding aria-hidden seems to make VoiceOver behave more consistently. -->\n@if (multiple) {\n    <mat-pseudo-checkbox\n        class=\"mat-mdc-option-pseudo-checkbox\"\n        [disabled]=\"disabled\"\n        [state]=\"selected ? 'checked' : 'unchecked'\"\n        aria-hidden=\"true\"></mat-pseudo-checkbox>\n}\n\n<ng-content select=\"mat-icon\"></ng-content>\n\n<span class=\"mdc-list-item__primary-text\" #text><ng-content></ng-content></span>\n\n<!-- Render checkmark at the end for single-selection. -->\n@if (!multiple && selected && !hideSingleSelectionIndicator) {\n    <mat-pseudo-checkbox\n        class=\"mat-mdc-option-pseudo-checkbox\"\n        [disabled]=\"disabled\"\n        state=\"checked\"\n        aria-hidden=\"true\"\n        appearance=\"minimal\"></mat-pseudo-checkbox>\n}\n\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\n@if (group && group._inert) {\n    <span class=\"cdk-visually-hidden\">({{ group.label }})</span>\n}\n\n<div class=\"mat-mdc-option-ripple mat-mdc-focus-indicator\" aria-hidden=\"true\" mat-ripple\n     [matRippleTrigger]=\"_getHostElement()\" [matRippleDisabled]=\"disabled || disableRipple\">\n</div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup],\n})\nexport class MatOptionModule {}\n\nexport * from './option';\nexport * from './optgroup';\nexport * from './option-parent';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ANIMATION_MODULE_TYPE,\n  ElementRef,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  inject,\n} from '@angular/core';\nimport {MAT_RIPPLE_GLOBAL_OPTIONS, MatRipple} from '../ripple';\nimport {Platform} from '@angular/cdk/platform';\n\n/** The options for the MatRippleLoader's event listeners. */\nconst eventListenerOptions = {capture: true};\n\n/** The events that should trigger the initialization of the ripple. */\nconst rippleInteractionEvents = ['focus', 'click', 'mouseenter', 'touchstart'];\n\n/** The attribute attached to a component whose ripple has not yet been initialized. */\nconst matRippleUninitialized = 'mat-ripple-loader-uninitialized';\n\n/** Additional classes that should be added to the ripple when it is rendered. */\nconst matRippleClassName = 'mat-ripple-loader-class-name';\n\n/** Whether the ripple should be centered. */\nconst matRippleCentered = 'mat-ripple-loader-centered';\n\n/** Whether the ripple should be disabled. */\nconst matRippleDisabled = 'mat-ripple-loader-disabled';\n\n/**\n * Handles attaching ripples on demand.\n *\n * This service allows us to avoid eagerly creating & attaching MatRipples.\n * It works by creating & attaching a ripple only when a component is first interacted with.\n */\n@Injectable({providedIn: 'root'})\nexport class MatRippleLoader implements OnDestroy {\n  private _document = inject(DOCUMENT, {optional: true});\n  private _animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n  private _globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {optional: true});\n  private _platform = inject(Platform);\n  private _ngZone = inject(NgZone);\n\n  constructor() {\n    this._ngZone.runOutsideAngular(() => {\n      for (const event of rippleInteractionEvents) {\n        this._document?.addEventListener(event, this._onInteraction, eventListenerOptions);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    for (const event of rippleInteractionEvents) {\n      this._document?.removeEventListener(event, this._onInteraction, eventListenerOptions);\n    }\n  }\n\n  /**\n   * Configures the ripple that will be rendered by the ripple loader.\n   *\n   * Stores the given information about how the ripple should be configured on the host\n   * element so that it can later be retrived & used when the ripple is actually created.\n   */\n  configureRipple(\n    host: HTMLElement,\n    config: {\n      className?: string;\n      centered?: boolean;\n      disabled?: boolean;\n    },\n  ): void {\n    // Indicates that the ripple has not yet been rendered for this component.\n    host.setAttribute(matRippleUninitialized, '');\n\n    // Store the additional class name(s) that should be added to the ripple element.\n    if (config.className || !host.hasAttribute(matRippleClassName)) {\n      host.setAttribute(matRippleClassName, config.className || '');\n    }\n\n    // Store whether the ripple should be centered.\n    if (config.centered) {\n      host.setAttribute(matRippleCentered, '');\n    }\n\n    if (config.disabled) {\n      host.setAttribute(matRippleDisabled, '');\n    }\n  }\n\n  /** Returns the ripple instance for the given host element. */\n  getRipple(host: HTMLElement): MatRipple | undefined {\n    if ((host as any).matRipple) {\n      return (host as any).matRipple;\n    }\n    return this.createRipple(host);\n  }\n\n  /** Sets the disabled state on the ripple instance corresponding to the given host element. */\n  setDisabled(host: HTMLElement, disabled: boolean): void {\n    const ripple = (host as any).matRipple as MatRipple | undefined;\n\n    // If the ripple has already been instantiated, just disable it.\n    if (ripple) {\n      ripple.disabled = disabled;\n      return;\n    }\n\n    // Otherwise, set an attribute so we know what the\n    // disabled state should be when the ripple is initialized.\n    if (disabled) {\n      host.setAttribute(matRippleDisabled, '');\n    } else {\n      host.removeAttribute(matRippleDisabled);\n    }\n  }\n\n  /** Handles creating and attaching component internals when a component it is initially interacted with. */\n  private _onInteraction = (event: Event) => {\n    if (!(event.target instanceof HTMLElement)) {\n      return;\n    }\n    const eventTarget = event.target as HTMLElement;\n\n    // TODO(wagnermaciel): Consider batching these events to improve runtime performance.\n\n    const element = eventTarget.closest(`[${matRippleUninitialized}]`);\n    if (element) {\n      this.createRipple(element as HTMLElement);\n    }\n  };\n\n  /** Creates a MatRipple and appends it to the given element. */\n  createRipple(host: HTMLElement): MatRipple | undefined {\n    if (!this._document) {\n      return;\n    }\n\n    // Create the ripple element.\n    host.querySelector('.mat-ripple')?.remove();\n    const rippleEl = this._document!.createElement('span');\n    rippleEl.classList.add('mat-ripple', host.getAttribute(matRippleClassName)!);\n    host.append(rippleEl);\n\n    // Create the MatRipple.\n    const ripple = new MatRipple(\n      new ElementRef(rippleEl),\n      this._ngZone,\n      this._platform,\n      this._globalRippleOptions ? this._globalRippleOptions : undefined,\n      this._animationMode ? this._animationMode : undefined,\n    );\n    ripple._isInitialized = true;\n    ripple.trigger = host;\n    ripple.centered = host.hasAttribute(matRippleCentered);\n    ripple.disabled = host.hasAttribute(matRippleDisabled);\n    this.attachRipple(host, ripple);\n    return ripple;\n  }\n\n  attachRipple(host: Element, ripple: MatRipple): void {\n    host.removeAttribute(matRippleUninitialized);\n    (host as any).matRipple = ripple;\n  }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["DIR_DOCUMENT", "InjectionToken", "providedIn", "factory", "DIR_DOCUMENT_FACTORY", "inject", "DOCUMENT", "RTL_LOCALE_PATTERN", "_resolveDirectionality", "rawValue", "value", "toLowerCase", "navigator", "language", "test", "Directionality", "constructor", "_document", "change", "EventEmitter", "bodyDir", "body", "dir", "htmlDir", "documentElement", "ngOnDestroy", "complete", "ɵfac", "Directionality_Factory", "t", "ɵɵinject", "ɵprov", "ɵɵdefineInjectable", "token", "ɵsetClassMetadata", "Injectable", "Optional", "Inject", "Dir", "_dir", "_isInitialized", "previousValue", "_rawDir", "emit", "ngAfterContentInit", "ɵɵdefineDirective", "type", "selectors", "hostVars", "hostBindings", "Dir_HostBindings", "rf", "ctx", "i0", "ɵɵattribute", "inputs", "outputs", "exportAs", "features", "ɵɵProvidersFeature", "provide", "useExisting", "Directive", "args", "selector", "providers", "host", "Output", "Input", "BidiModule", "ɵɵdefineNgModule", "declarations", "exports", "ɵɵdefineInjector", "NgModule", "_c0", "_c1", "_c2", "MatOption_Conditional_0_Template", "rf", "ctx", "ctx_r0", "selected", "MatOption_Conditional_5_Template", "ctx_r2", "MatOption_Conditional_6_Template", "ctx_r3", "_c3", "_c4", "VERSION", "Version", "AnimationCurves", "STANDARD_CURVE", "DECELERATION_CURVE", "ACCELERATION_CURVE", "SHARP_CURVE", "AnimationDurations", "COMPLEX", "ENTERING", "EXITING", "MATERIAL_SANITY_CHECKS_FACTORY", "MATERIAL_SANITY_CHECKS", "InjectionToken", "providedIn", "factory", "MatCommonModule", "constructor", "highContrastModeDetector", "_sanityChecks", "_document", "_hasDoneGlobalChecks", "_applyBodyHighContrastModeCssClasses", "ngDevMode", "platform", "inject", "Platform", "optional", "_checkIsEnabled", "_checkDoctypeIsDefined", "_checkThemeIsPresent", "isBrowser", "_checkCdkVersionMatch", "name", "_isTestEnvironment", "HighContrastModeDetector", "DOCUMENT", "imports", "BidiModule", "exports", "NgModule", "args", "Optional", "Inject", "doc", "doctype", "console", "warn", "body", "testElement", "createElement", "classList", "add", "appendChild", "computedStyle", "getComputedStyle", "display", "remove", "full", "VERSION$1", "mixinDisabled", "base", "disabled", "_disabled", "value", "coerceBooleanProperty", "mixinColor", "defaultColor", "color", "_color", "colorPalette", "_elementRef", "nativeElement", "mixinDisableRipple", "disableRipple", "_disableRipple", "mixinTabIndex", "defaultTabIndex", "tabIndex", "_tabIndex", "coerceNumberProperty", "mixinErrorState", "updateErrorState", "oldState", "errorState", "parent", "_parentFormGroup", "_parentForm", "matcher", "errorStateMatcher", "_defaultErrorStateMatcher", "control", "ngControl", "newState", "isErrorState", "stateChanges", "next", "mixinInitialized", "_isInitialized", "_pendingSubscribers", "initialized", "Observable", "subscriber", "_notifySubscriber", "push", "_markInitialized", "Error", "forEach", "complete", "MAT_DATE_LOCALE", "MAT_DATE_LOCALE_FACTORY", "LOCALE_ID", "DateAdapter", "_localeChanges", "Subject", "localeChanges", "getValidDateOrNull", "obj", "isDateInstance", "isValid", "deserialize", "invalid", "setLocale", "locale", "compareDate", "first", "second", "getYear", "getMonth", "getDate", "sameDate", "firstValid", "secondValid", "clampDate", "date", "min", "max", "MAT_DATE_FORMATS", "ISO_8601_REGEX", "range", "length", "valueFunction", "valuesArray", "Array", "i", "NativeDateAdapter", "matDateLocale", "useUtcForDisplay", "_matDateLocale", "undefined", "getFullYear", "getDayOfWeek", "getDay", "getMonthNames", "style", "dtf", "Intl", "DateTimeFormat", "month", "timeZone", "_format", "Date", "getDateNames", "day", "getDayOfWeekNames", "weekday", "getYearName", "year", "getFirstDayOfWeek", "getNumDaysInMonth", "_createDateWithOverflow", "clone", "getTime", "createDate", "result", "today", "parse", "parseFormat", "format", "displayFormat", "addCalendarYears", "years", "addCalendarMonths", "months", "newDate", "addCalendarDays", "days", "toIso8601", "getUTCFullYear", "_2digit", "getUTCMonth", "getUTCDate", "join", "test", "isNaN", "NaN", "d", "setFullYear", "setHours", "n", "slice", "setUTCFullYear", "setUTCHours", "getHours", "getMinutes", "getSeconds", "getMilliseconds", "ɵfac", "NativeDateAdapter_Factory", "t", "Injectable", "MAT_NATIVE_DATE_FORMATS", "dateInput", "monthYearLabel", "dateA11yLabel", "monthYearA11yLabel", "NativeDateModule", "provide", "useClass", "providers", "MatNativeDateModule", "ɵmod", "ɵinj", "useValue", "ShowOnDirtyErrorStateMatcher", "form", "dirty", "submitted", "ErrorStateMatcher", "touched", "ɵprov", "MatLine", "selectors", "hostAttrs", "Directive", "selector", "host", "setLines", "lines", "element", "prefix", "changes", "pipe", "startWith", "subscribe", "setClass", "className", "isAdd", "toggle", "MatLineModule", "declarations", "RippleRef", "_renderer", "config", "_animationForciblyDisabledThroughCss", "state", "fadeOut", "fadeOutRipple", "passiveCapturingEventOptions$1", "normalizePassiveListenerOptions", "passive", "capture", "RippleEventManager", "_events", "Map", "_delegateEventHandler", "event", "target", "_getEventTarget", "get", "type", "handlers", "contains", "handler", "handleEvent", "addHandler", "ngZone", "handlersForEvent", "handlersForElement", "set", "Set", "runOutsideAngular", "document", "addEventListener", "removeHandler", "delete", "size", "removeEventListener", "defaultRippleAnimationConfig", "enterDuration", "exitDuration", "ignoreMouseEventsTimeout", "passiveCapturingEventOptions", "pointerDownEvents", "pointerUpEvents", "RippleRenderer", "_target", "_ngZone", "elementOrElementRef", "_platform", "_isPointerDown", "_activeRipples", "_pointerUpEventsRegistered", "_containerElement", "coerceElement", "fadeInRipple", "x", "y", "containerRect", "_containerRect", "getBoundingClientRect", "animationConfig", "animation", "centered", "left", "width", "top", "height", "radius", "distanceToFurthestCorner", "offsetX", "offsetY", "ripple", "backgroundColor", "transitionDuration", "computedStyles", "window", "userTransitionProperty", "transitionProperty", "userTransitionDuration", "animationForciblyDisabledThroughCss", "rippleRef", "transform", "persistent", "_mostRecentTransientRipple", "eventListeners", "onTransitionEnd", "_finishRippleTransition", "onTransitionCancel", "_destroyRipple", "rippleEl", "opacity", "fadeOutAll", "_getActiveRipples", "fadeOutAllNonPersistent", "setupTriggerEvents", "_triggerElement", "_removeTriggerEvents", "_eventManager", "_onMousedown", "_onTouchStart", "_onPointerUp", "_startFadeOutTransition", "isMostRecentTransientRipple", "isFakeMousedown", "isFakeMousedownFromScreenReader", "isSyntheticEvent", "_lastTouchStartEvent", "now", "rippleDisabled", "clientX", "clientY", "rippleConfig", "isFakeTouchstartFromScreenReader", "touches", "changedTouches", "isVisible", "terminateOnPointerUp", "from", "keys", "trigger", "rect", "distX", "Math", "abs", "right", "distY", "bottom", "sqrt", "MAT_RIPPLE_GLOBAL_OPTIONS", "MatRipple", "_setupTriggerEventsIfEnabled", "_trigger", "globalOptions", "_animationMode", "_globalOptions", "_rippleRenderer", "ngOnInit", "ngOnDestroy", "launch", "configOrX", "ElementRef", "NgZone", "ANIMATION_MODULE_TYPE", "hostVars", "hostBindings", "MatRipple_HostBindings", "exportAs", "Input", "unbounded", "MatRippleModule", "MatPseudoCheckbox", "appearance", "MatPseudoCheckbox_Factory", "ɵcmp", "MatPseudoCheckbox_HostBindings", "Component", "ViewEncapsulation", "None", "changeDetection", "ChangeDetectionStrategy", "OnPush", "template", "styles", "MatPseudoCheckboxModule", "MAT_OPTION_PARENT_COMPONENT", "_uniqueOptgroupIdCounter", "MAT_OPTGROUP", "MatOptgroup", "_labelId", "_inert", "inertGroups", "MatOptgroup_Factory", "MatOptgroup_HostBindings", "booleanAttribute", "features", "useExisting", "encapsulation", "label", "_uniqueIdCounter", "MatOptionSelectionChange", "source", "isUserInput", "MatOption", "multiple", "_parent", "_selected", "group", "hideSingleSelectionIndicator", "_element", "_changeDetectorRef", "_active", "_mostRecentViewValue", "id", "onSelectionChange", "EventEmitter", "_stateChanges", "active", "viewValue", "_text", "textContent", "trim", "select", "emitEvent", "markForCheck", "_emitSelectionChangeEvent", "deselect", "focus", "_origin", "options", "_getHostElement", "setActiveStyles", "setInactiveStyles", "getLabel", "_handleKeydown", "keyCode", "ENTER", "SPACE", "hasModifierKey", "_selectViaInteraction", "preventDefault", "_getTabIndex", "ngAfterViewChecked", "emit", "ChangeDetectorRef", "viewQuery", "MatOption_Query", "MatOption_HostBindings", "MatOption_keydown_HostBindingHandler", "$event", "outputs", "dependencies", "Output", "ViewChild", "static", "_countGroupLabelsBeforeOption", "optionIndex", "optionGroups", "optionsArray", "toArray", "groups", "groupCounter", "_getOptionScrollPosition", "optionOffset", "optionHeight", "currentScrollPosition", "panelHeight", "MatOptionModule", "eventListenerOptions", "rippleInteractionEvents", "matRippleUninitialized", "matRippleClassName", "matRippleCentered", "matRippleDisabled", "MatRippleLoader", "ANIMATION_MODULE_TYPE$1", "_globalRippleOptions", "_onInteraction", "HTMLElement", "eventTarget", "closest", "createRipple", "configureRipple", "setAttribute", "hasAttribute", "getRipple", "matRipple", "setDisabled", "removeAttribute", "querySelector", "getAttribute", "append", "attachRipple"]
}
