{
  "version": 3,
  "sources": ["../../../../../../../src/material/chips/tokens.ts", "../../../../../../../src/material/chips/chip-action.ts", "../../../../../../../src/material/chips/chip-icons.ts", "../../../../../../../src/material/chips/chip.ts", "../../../../../../../src/material/chips/chip.html", "../../../../../../../src/material/chips/chip-option.ts", "../../../../../../../src/material/chips/chip-option.html", "../../../../../../../src/material/chips/chip-edit-input.ts", "../../../../../../../src/material/chips/chip-row.ts", "../../../../../../../src/material/chips/chip-row.html", "../../../../../../../src/material/chips/chip-set.ts", "../../../../../../../src/material/chips/chip-listbox.ts", "../../../../../../../src/material/chips/chip-grid.ts", "../../../../../../../src/material/chips/chip-input.ts", "../../../../../../../src/material/chips/module.ts", "../../../../../../../src/material/chips/chips_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: readonly number[] | ReadonlySet<number>;\n\n  /** Wheter icon indicators should be hidden for single-selection. */\n  hideSingleSelectionIndicator?: boolean;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken<MatChipsDefaultOptions>(\n  'mat-chips-default-options',\n);\n\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n\n/**\n * Injection token used to avoid a circular dependency between the `MatChip` and `MatChipAction`.\n */\nexport const MAT_CHIP = new InjectionToken('MatChip');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, Inject, Input} from '@angular/core';\nimport {HasTabIndex, mixinTabIndex} from '@angular/material/core';\nimport {MAT_CHIP} from './tokens';\n\nabstract class _MatChipActionBase {\n  abstract disabled: boolean;\n}\n\nconst _MatChipActionMixinBase = mixinTabIndex(_MatChipActionBase, -1);\n\n/**\n * Section within a chip.\n * @docs-private\n */\n@Directive({\n  selector: '[matChipAction]',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    'class': 'mdc-evolution-chip__action mat-mdc-chip-action',\n    '[class.mdc-evolution-chip__action--primary]': '_isPrimary',\n    '[class.mdc-evolution-chip__action--presentational]': '!isInteractive',\n    '[class.mdc-evolution-chip__action--trailing]': '!_isPrimary',\n    '[attr.tabindex]': '_getTabindex()',\n    '[attr.disabled]': '_getDisabledAttribute()',\n    '[attr.aria-disabled]': 'disabled',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n})\nexport class MatChipAction extends _MatChipActionMixinBase implements HasTabIndex {\n  /** Whether the action is interactive. */\n  @Input() isInteractive = true;\n\n  /** Whether this is the primary action in the chip. */\n  _isPrimary = true;\n\n  /** Whether the action is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || this._parentChip.disabled;\n  }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /**\n   * Private API to allow focusing this chip when it is disabled.\n   */\n  @Input()\n  private _allowFocusWhenDisabled = false;\n\n  /**\n   * Determine the value of the disabled attribute for this chip action.\n   */\n  protected _getDisabledAttribute(): string | null {\n    // When this chip action is disabled and focusing disabled chips is not permitted, return empty\n    // string to indicate that disabled attribute should be included.\n    return this.disabled && !this._allowFocusWhenDisabled ? '' : null;\n  }\n\n  /**\n   * Determine the value of the tabindex attribute for this chip action.\n   */\n  protected _getTabindex(): string | null {\n    return (this.disabled && !this._allowFocusWhenDisabled) || !this.isInteractive\n      ? null\n      : this.tabIndex.toString();\n  }\n\n  constructor(\n    public _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_CHIP)\n    protected _parentChip: {\n      _handlePrimaryActionInteraction(): void;\n      remove(): void;\n      disabled: boolean;\n      _isEditing?: boolean;\n    },\n  ) {\n    super();\n\n    if (_elementRef.nativeElement.nodeName === 'BUTTON') {\n      _elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  _handleClick(event: MouseEvent) {\n    if (!this.disabled && this.isInteractive && this._isPrimary) {\n      event.preventDefault();\n      this._parentChip._handlePrimaryActionInteraction();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    if (\n      (event.keyCode === ENTER || event.keyCode === SPACE) &&\n      !this.disabled &&\n      this.isInteractive &&\n      this._isPrimary &&\n      !this._parentChip._isEditing\n    ) {\n      event.preventDefault();\n      this._parentChip._handlePrimaryActionInteraction();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Directive} from '@angular/core';\nimport {MatChipAction} from './chip-action';\nimport {MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON} from './tokens';\n\n/** Avatar image within a chip. */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {\n    'class': 'mat-mdc-chip-avatar mdc-evolution-chip__icon mdc-evolution-chip__icon--primary',\n    'role': 'img',\n  },\n  providers: [{provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar}],\n})\nexport class MatChipAvatar {}\n\n/** Non-interactive trailing icon in a chip. */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {\n    'class':\n      'mat-mdc-chip-trailing-icon mdc-evolution-chip__icon mdc-evolution-chip__icon--trailing',\n    'aria-hidden': 'true',\n  },\n  providers: [{provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon}],\n})\nexport class MatChipTrailingIcon extends MatChipAction {\n  /**\n   * MDC considers all trailing actions as a remove icon,\n   * but we support non-interactive trailing icons.\n   */\n  override isInteractive = false;\n\n  override _isPrimary = false;\n}\n\n/**\n * Directive to remove the parent chip when the trailing icon is clicked or\n * when the ENTER key is pressed on it.\n *\n * Recommended for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n * ```\n * <mat-chip>\n *   <mat-icon matChipRemove>cancel</mat-icon>\n * </mat-chip>\n * ```\n */\n\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class':\n      'mat-mdc-chip-remove mat-mdc-chip-trailing-icon mat-mdc-focus-indicator ' +\n      'mdc-evolution-chip__icon mdc-evolution-chip__icon--trailing',\n    'role': 'button',\n    '[attr.aria-hidden]': 'null',\n  },\n  providers: [{provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove}],\n})\nexport class MatChipRemove extends MatChipAction {\n  override _isPrimary = false;\n\n  override _handleClick(event: MouseEvent): void {\n    if (!this.disabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      this._parentChip.remove();\n    }\n  }\n\n  override _handleKeydown(event: KeyboardEvent) {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !this.disabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      this._parentChip.remove();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  AfterViewInit,\n  AfterContentInit,\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n  Attribute,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  DoCheck,\n  inject,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  mixinDisabled,\n  RippleGlobalOptions,\n  MatRippleLoader,\n} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {MatChipAvatar, MatChipTrailingIcon, MatChipRemove} from './chip-icons';\nimport {MatChipAction} from './chip-action';\nimport {BACKSPACE, DELETE} from '@angular/cdk/keycodes';\nimport {MAT_CHIP, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON} from './tokens';\n\nlet uid = 0;\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/**\n * Boilerplate for applying mixins to MatChip.\n * @docs-private\n */\nconst _MatChipMixinBase = mixinTabIndex(\n  mixinColor(\n    mixinDisableRipple(\n      mixinDisabled(\n        class {\n          constructor(public _elementRef: ElementRef<HTMLElement>) {}\n        },\n      ),\n    ),\n    'primary',\n  ),\n  -1,\n);\n\n/**\n * Material design styled Chip base component. Used inside the MatChipSet component.\n *\n * Extended by MatChipOption and MatChipRow for different interaction patterns.\n */\n@Component({\n  selector: 'mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]',\n  inputs: ['color', 'disabled', 'disableRipple', 'tabIndex'],\n  exportAs: 'matChip',\n  templateUrl: 'chip.html',\n  styleUrls: ['chip.css'],\n  host: {\n    'class': 'mat-mdc-chip',\n    '[class.mdc-evolution-chip]': '!_isBasicChip',\n    '[class.mdc-evolution-chip--disabled]': 'disabled',\n    '[class.mdc-evolution-chip--with-trailing-action]': '_hasTrailingIcon()',\n    '[class.mdc-evolution-chip--with-primary-graphic]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-primary-icon]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-basic-chip]': '_isBasicChip',\n    '[class.mat-mdc-standard-chip]': '!_isBasicChip',\n    '[class.mat-mdc-chip-with-trailing-icon]': '_hasTrailingIcon()',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[id]': 'id',\n    '[attr.role]': 'role',\n    '[attr.tabindex]': 'role ? tabIndex : null',\n    '[attr.aria-label]': 'ariaLabel',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MAT_CHIP, useExisting: MatChip}],\n})\nexport class MatChip\n  extends _MatChipMixinBase\n  implements\n    OnInit,\n    AfterViewInit,\n    AfterContentInit,\n    CanColor,\n    CanDisableRipple,\n    CanDisable,\n    DoCheck,\n    HasTabIndex,\n    OnDestroy\n{\n  protected _document: Document;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blurred. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Whether this chip is a basic (unstyled) chip. */\n  _isBasicChip: boolean;\n\n  /** Role for the root of the chip. */\n  @Input() role: string | null = null;\n\n  /** Whether the chip has focus. */\n  private _hasFocusInternal = false;\n\n  /** Whether moving focus into the chip is pending. */\n  private _pendingFocus: boolean;\n\n  /** Subscription to changes in the chip's actions. */\n  private _actionChanges: Subscription | undefined;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** All avatars present in the chip. */\n  @ContentChildren(MAT_CHIP_AVATAR, {descendants: true})\n  protected _allLeadingIcons: QueryList<MatChipAvatar>;\n\n  /** All trailing icons present in the chip. */\n  @ContentChildren(MAT_CHIP_TRAILING_ICON, {descendants: true})\n  protected _allTrailingIcons: QueryList<MatChipTrailingIcon>;\n\n  /** All remove icons present in the chip. */\n  @ContentChildren(MAT_CHIP_REMOVE, {descendants: true})\n  protected _allRemoveIcons: QueryList<MatChipRemove>;\n\n  _hasFocus() {\n    return this._hasFocusInternal;\n  }\n\n  /** A unique id for the chip. If none is supplied, it will be auto-generated. */\n  @Input() id: string = `mat-mdc-chip-${uid++}`;\n\n  // TODO(#26104): Consider deprecating and using `_computeAriaAccessibleName` instead.\n  // `ariaLabel` may be unnecessary, and `_computeAriaAccessibleName` only supports\n  // datepicker's use case.\n  /** ARIA label for the content of the chip. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  // TODO(#26104): Consider deprecating and using `_computeAriaAccessibleName` instead.\n  // `ariaDescription` may be unnecessary, and `_computeAriaAccessibleName` only supports\n  // datepicker's use case.\n  /** ARIA description for the content of the chip. */\n  @Input('aria-description') ariaDescription: string | null = null;\n\n  /** Id of a span that contains this chip's aria description. */\n  _ariaDescriptionId = `${this.id}-aria-description`;\n\n  private _textElement!: HTMLElement;\n\n  /**\n   * The value of the chip. Defaults to the content inside\n   * the `mat-mdc-chip-action-label` element.\n   */\n  @Input()\n  get value(): any {\n    return this._value !== undefined ? this._value : this._textElement.textContent!.trim();\n  }\n  set value(value: any) {\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean {\n    return this._removable;\n  }\n  set removable(value: BooleanInput) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /**\n   * Colors the chip for emphasis as if it were selected.\n   */\n  @Input()\n  get highlighted(): boolean {\n    return this._highlighted;\n  }\n  set highlighted(value: BooleanInput) {\n    this._highlighted = coerceBooleanProperty(value);\n  }\n  protected _highlighted: boolean = false;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The unstyled chip selector for this component. */\n  protected basicChipAttrName = 'mat-basic-chip';\n\n  /** The chip's leading icon. */\n  @ContentChild(MAT_CHIP_AVATAR) leadingIcon: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MAT_CHIP_TRAILING_ICON) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's trailing remove icon. */\n  @ContentChild(MAT_CHIP_REMOVE) removeIcon: MatChipRemove;\n\n  /**\n   * Reference to the MatRipple instance of the chip.\n   * @deprecated Considered an implementation detail. To be removed.\n   * @breaking-change 17.0.0\n   */\n  get ripple(): MatRipple {\n    return this._rippleLoader?.getRipple(this._elementRef.nativeElement)!;\n  }\n  set ripple(v: MatRipple) {\n    this._rippleLoader?.attachRipple(this._elementRef.nativeElement, v);\n  }\n\n  /** Action receiving the primary set of user interactions. */\n  @ViewChild(MatChipAction) primaryAction: MatChipAction;\n\n  /**\n   * Handles the lazy creation of the MatChip ripple.\n   * Used to improve initial load time of large applications.\n   */\n  _rippleLoader: MatRippleLoader = inject(MatRippleLoader);\n\n  constructor(\n    public _changeDetectorRef: ChangeDetectorRef,\n    elementRef: ElementRef<HTMLElement>,\n    protected _ngZone: NgZone,\n    private _focusMonitor: FocusMonitor,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional()\n    @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n    private _globalRippleOptions?: RippleGlobalOptions,\n    @Attribute('tabindex') tabIndex?: string,\n  ) {\n    super(elementRef);\n    this._document = _document;\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    if (tabIndex != null) {\n      this.tabIndex = parseInt(tabIndex) ?? this.defaultTabIndex;\n    }\n    this._monitorFocus();\n\n    this._rippleLoader?.configureRipple(this._elementRef.nativeElement, {\n      className: 'mat-mdc-chip-ripple',\n      disabled: this._isRippleDisabled(),\n    });\n  }\n\n  ngOnInit() {\n    // This check needs to happen in `ngOnInit` so the overridden value of\n    // `basicChipAttrName` coming from base classes can be picked up.\n    const element = this._elementRef.nativeElement;\n    this._isBasicChip =\n      element.hasAttribute(this.basicChipAttrName) ||\n      element.tagName.toLowerCase() === this.basicChipAttrName;\n  }\n\n  ngAfterViewInit() {\n    this._textElement = this._elementRef.nativeElement.querySelector('.mat-mdc-chip-action-label')!;\n\n    if (this._pendingFocus) {\n      this._pendingFocus = false;\n      this.focus();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    // Since the styling depends on the presence of some\n    // actions, we have to mark for check on changes.\n    this._actionChanges = merge(\n      this._allLeadingIcons.changes,\n      this._allTrailingIcons.changes,\n      this._allRemoveIcons.changes,\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngDoCheck(): void {\n    this._rippleLoader.setDisabled(this._elementRef.nativeElement, this._isRippleDisabled());\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._actionChanges?.unsubscribe();\n    this.destroyed.emit({chip: this});\n    this.destroyed.complete();\n  }\n\n  /**\n   * Allows for programmatic removal of the chip.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Whether or not the ripple should be disabled. */\n  _isRippleDisabled(): boolean {\n    return (\n      this.disabled ||\n      this.disableRipple ||\n      this._animationsDisabled ||\n      this._isBasicChip ||\n      !!this._globalRippleOptions?.disabled\n    );\n  }\n\n  /** Returns whether the chip has a trailing icon. */\n  _hasTrailingIcon() {\n    return !!(this.trailingIcon || this.removeIcon);\n  }\n\n  /** Handles keyboard events on the chip. */\n  _handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === BACKSPACE || event.keyCode === DELETE) {\n      event.preventDefault();\n      this.remove();\n    }\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this.disabled) {\n      // If `focus` is called before `ngAfterViewInit`, we won't have access to the primary action.\n      // This can happen if the consumer tries to focus a chip immediately after it is added.\n      // Queue the method to be called again on init.\n      if (this.primaryAction) {\n        this.primaryAction.focus();\n      } else {\n        this._pendingFocus = true;\n      }\n    }\n  }\n\n  /** Gets the action that contains a specific target node. */\n  _getSourceAction(target: Node): MatChipAction | undefined {\n    return this._getActions().find(action => {\n      const element = action._elementRef.nativeElement;\n      return element === target || element.contains(target);\n    });\n  }\n\n  /** Gets all of the actions within the chip. */\n  _getActions(): MatChipAction[] {\n    const result: MatChipAction[] = [];\n\n    if (this.primaryAction) {\n      result.push(this.primaryAction);\n    }\n\n    if (this.removeIcon) {\n      result.push(this.removeIcon);\n    }\n\n    if (this.trailingIcon) {\n      result.push(this.trailingIcon);\n    }\n\n    return result;\n  }\n\n  /** Handles interactions with the primary action of the chip. */\n  _handlePrimaryActionInteraction() {\n    // Empty here, but is overwritten in child classes.\n  }\n\n  /** Starts the focus monitoring process on the chip. */\n  private _monitorFocus() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n      const hasFocus = origin !== null;\n\n      if (hasFocus !== this._hasFocusInternal) {\n        this._hasFocusInternal = hasFocus;\n\n        if (hasFocus) {\n          this._onFocus.next({chip: this});\n        } else {\n          // When animations are enabled, Angular may end up removing the chip from the DOM a little\n          // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n          // that moves focus not the next item. To work around the issue, we defer marking the chip\n          // as not focused until the next time the zone stabilizes.\n          this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => this._ngZone.run(() => this._onBlur.next({chip: this})));\n        }\n      }\n    });\n  }\n}\n", "<span class=\"mat-mdc-chip-focus-overlay\"></span>\n\n<span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--primary\">\n  <span matChipAction [isInteractive]=\"false\">\n    @if (leadingIcon) {\n      <span class=\"mdc-evolution-chip__graphic mat-mdc-chip-graphic\">\n        <ng-content select=\"mat-chip-avatar, [matChipAvatar]\"></ng-content>\n      </span>\n    }\n    <span class=\"mdc-evolution-chip__text-label mat-mdc-chip-action-label\">\n      <ng-content></ng-content>\n      <span class=\"mat-mdc-chip-primary-focus-indicator mat-mdc-focus-indicator\"></span>\n    </span>\n  </span>\n</span>\n\n@if (_hasTrailingIcon()) {\n  <span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--trailing\">\n    <ng-content select=\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"></ng-content>\n  </span>\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  OnInit,\n  inject,\n} from '@angular/core';\nimport {MatChip} from './chip';\nimport {MAT_CHIP, MAT_CHIPS_DEFAULT_OPTIONS} from './tokens';\n\n/** Event object emitted by MatChipOption when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChipOption,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false,\n  ) {}\n}\n\n/**\n * An extension of the MatChip component that supports chip selection. Used with MatChipListbox.\n *\n * Unlike other chips, the user can focus on disabled chip options inside a MatChipListbox. The\n * user cannot click disabled chips.\n */\n@Component({\n  selector: 'mat-basic-chip-option, [mat-basic-chip-option], mat-chip-option, [mat-chip-option]',\n  templateUrl: 'chip-option.html',\n  styleUrls: ['chip.css'],\n  inputs: ['color', 'disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip mat-mdc-chip-option',\n    '[class.mdc-evolution-chip]': '!_isBasicChip',\n    '[class.mdc-evolution-chip--filter]': '!_isBasicChip',\n    '[class.mdc-evolution-chip--selectable]': '!_isBasicChip',\n    '[class.mat-mdc-chip-selected]': 'selected',\n    '[class.mat-mdc-chip-multiple]': '_chipListMultiple',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mdc-evolution-chip--disabled]': 'disabled',\n    '[class.mdc-evolution-chip--selected]': 'selected',\n    // This class enables the transition on the checkmark. Usually MDC adds it when selection\n    // starts and removes it once the animation is finished. We don't need to go through all\n    // the trouble, because we only care about the selection animation. MDC needs to do it,\n    // because they also have an exit animation that we don't care about.\n    '[class.mdc-evolution-chip--selecting]': '!_animationsDisabled',\n    '[class.mdc-evolution-chip--with-trailing-action]': '_hasTrailingIcon()',\n    '[class.mdc-evolution-chip--with-primary-icon]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-primary-graphic]': '_hasLeadingGraphic()',\n    '[class.mdc-evolution-chip--with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-trailing-icon]': '_hasTrailingIcon()',\n    '[attr.tabindex]': 'null',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-description]': 'null',\n    '[attr.role]': 'role',\n    '[id]': 'id',\n  },\n  providers: [\n    {provide: MatChip, useExisting: MatChipOption},\n    {provide: MAT_CHIP, useExisting: MatChipOption},\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipOption extends MatChip implements OnInit {\n  /** Default chip options. */\n  private _defaultOptions = inject(MAT_CHIPS_DEFAULT_OPTIONS, {optional: true});\n\n  /** Whether the chip list is selectable. */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** Whether the chip list hides single-selection indicator. */\n  _chipListHideSingleSelectionIndicator: boolean =\n    this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n\n  /**\n   * Whether or not the chip is selectable.\n   *\n   * When a chip is not selectable, changes to its selected state are always\n   * ignored. By default an option chip is selectable, and it becomes\n   * non-selectable if its parent chip list is not selectable.\n   */\n  @Input()\n  get selectable(): boolean {\n    return this._selectable && this.chipListSelectable;\n  }\n  set selectable(value: BooleanInput) {\n    this._selectable = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  protected _selectable: boolean = true;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: BooleanInput) {\n    this._setSelectedState(coerceBooleanProperty(value), false, true);\n  }\n  private _selected = false;\n\n  /**\n   * The ARIA selected applied to the chip. Conforms to WAI ARIA best practices for listbox\n   * interaction patterns.\n   *\n   * From [WAI ARIA Listbox authoring practices guide](\n   * https://www.w3.org/WAI/ARIA/apg/patterns/listbox/):\n   *  \"If any options are selected, each selected option has either aria-selected or aria-checked\n   *  set to true. All options that are selectable but not selected have either aria-selected or\n   *  aria-checked set to false.\"\n   *\n   * Set `aria-selected=\"false\"` on not-selected listbox options that are selectable to fix\n   * VoiceOver reading every option as \"selected\" (#25736).\n   */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  /** The unstyled chip selector for this component. */\n  protected override basicChipAttrName = 'mat-basic-chip-option';\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n    new EventEmitter<MatChipSelectionChange>();\n\n  override ngOnInit() {\n    super.ngOnInit();\n    this.role = 'presentation';\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._setSelectedState(true, false, true);\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._setSelectedState(false, false, true);\n  }\n\n  /** Selects this chip and emits userInputSelection event */\n  selectViaInteraction(): void {\n    this._setSelectedState(true, true, true);\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._setSelectedState(!this.selected, isUserInput, true);\n    return this.selected;\n  }\n\n  override _handlePrimaryActionInteraction() {\n    if (!this.disabled) {\n      // Interacting with the primary action implies that the chip already has focus, however\n      // there's a bug in Safari where focus ends up lingering on the previous chip (see #27544).\n      // We work around it by explicitly focusing the primary action of the current chip.\n      this.focus();\n\n      if (this.selectable) {\n        this.toggleSelected(true);\n      }\n    }\n  }\n\n  _hasLeadingGraphic() {\n    if (this.leadingIcon) {\n      return true;\n    }\n\n    // The checkmark graphic communicates selected state for both single-select and multi-select.\n    // Include checkmark in single-select to fix a11y issue where selected state is communicated\n    // visually only using color (#25886).\n    return !this._chipListHideSingleSelectionIndicator || this._chipListMultiple;\n  }\n\n  _setSelectedState(isSelected: boolean, isUserInput: boolean, emitEvent: boolean) {\n    if (isSelected !== this.selected) {\n      this._selected = isSelected;\n\n      if (emitEvent) {\n        this.selectionChange.emit({\n          source: this,\n          isUserInput,\n          selected: this.selected,\n        });\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\n", "<span class=\"mat-mdc-chip-focus-overlay\"></span>\n\n<span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--primary\">\n  <button\n    matChipAction\n    [tabIndex]=\"tabIndex\"\n    [_allowFocusWhenDisabled]=\"true\"\n    [attr.aria-selected]=\"ariaSelected\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-describedby]=\"_ariaDescriptionId\"\n    role=\"option\">\n    @if (_hasLeadingGraphic()) {\n      <span class=\"mdc-evolution-chip__graphic mat-mdc-chip-graphic\">\n        <ng-content select=\"mat-chip-avatar, [matChipAvatar]\"></ng-content>\n        <span class=\"mdc-evolution-chip__checkmark\">\n          <svg\n            class=\"mdc-evolution-chip__checkmark-svg\"\n            viewBox=\"-2 -3 30 30\"\n            focusable=\"false\"\n            aria-hidden=\"true\">\n            <path class=\"mdc-evolution-chip__checkmark-path\"\n                  fill=\"none\" stroke=\"currentColor\" d=\"M1.73,12.91 8.1,19.28 22.79,4.59\" />\n          </svg>\n        </span>\n      </span>\n    }\n    <span class=\"mdc-evolution-chip__text-label mat-mdc-chip-action-label\">\n      <ng-content></ng-content>\n      <span class=\"mat-mdc-chip-primary-focus-indicator mat-mdc-focus-indicator\"></span>\n    </span>\n  </button>\n</span>\n\n@if (_hasTrailingIcon()) {\n  <span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--trailing\">\n    <ng-content select=\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"></ng-content>\n  </span>\n}\n\n<span class=\"cdk-visually-hidden\" [id]=\"_ariaDescriptionId\">{{ariaDescription}}</span>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * A directive that makes a span editable and exposes functions to modify and retrieve the\n * element's contents.\n */\n@Directive({\n  selector: 'span[matChipEditInput]',\n  host: {\n    'class': 'mat-chip-edit-input',\n    'role': 'textbox',\n    'tabindex': '-1',\n    'contenteditable': 'true',\n  },\n})\nexport class MatChipEditInput {\n  constructor(\n    private readonly _elementRef: ElementRef,\n    @Inject(DOCUMENT) private readonly _document: any,\n  ) {}\n\n  initialize(initialValue: string) {\n    this.getNativeElement().focus();\n    this.setValue(initialValue);\n  }\n\n  getNativeElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  setValue(value: string) {\n    this.getNativeElement().textContent = value;\n    this._moveCursorToEndOfInput();\n  }\n\n  getValue(): string {\n    return this.getNativeElement().textContent || '';\n  }\n\n  private _moveCursorToEndOfInput() {\n    const range = this._document.createRange();\n    range.selectNodeContents(this.getNativeElement());\n    range.collapse(false);\n    const sel = window.getSelection()!;\n    sel.removeAllRanges();\n    sel.addRange(range);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_RIPPLE_GLOBAL_OPTIONS, RippleGlobalOptions} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipEditInput} from './chip-edit-input';\nimport {takeUntil} from 'rxjs/operators';\nimport {MAT_CHIP} from './tokens';\n\n/** Represents an event fired on an individual `mat-chip` when it is edited. */\nexport interface MatChipEditedEvent extends MatChipEvent {\n  /** The final edit value. */\n  value: string;\n}\n\n/**\n * An extension of the MatChip component used with MatChipGrid and\n * the matChipInputFor directive.\n */\n@Component({\n  selector: 'mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]',\n  templateUrl: 'chip-row.html',\n  styleUrls: ['chip.css'],\n  inputs: ['color', 'disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip mat-mdc-chip-row mdc-evolution-chip',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-editing]': '_isEditing',\n    '[class.mat-mdc-chip-editable]': 'editable',\n    '[class.mdc-evolution-chip--disabled]': 'disabled',\n    '[class.mdc-evolution-chip--with-trailing-action]': '_hasTrailingIcon()',\n    '[class.mdc-evolution-chip--with-primary-graphic]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-primary-icon]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-trailing-icon]': '_hasTrailingIcon()',\n    '[id]': 'id',\n    // Has to have a negative tabindex in order to capture\n    // focus and redirect it to the primary action.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-description]': 'null',\n    '[attr.role]': 'role',\n    '(focus)': '_handleFocus($event)',\n    '(dblclick)': '_handleDoubleclick($event)',\n  },\n  providers: [\n    {provide: MatChip, useExisting: MatChipRow},\n    {provide: MAT_CHIP, useExisting: MatChipRow},\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipRow extends MatChip implements AfterViewInit {\n  protected override basicChipAttrName = 'mat-basic-chip-row';\n\n  /**\n   * The editing action has to be triggered in a timeout. While we're waiting on it, a blur\n   * event might occur which will interrupt the editing. This flag is used to avoid interruptions\n   * while the editing action is being initialized.\n   */\n  private _editStartPending = false;\n\n  @Input() editable: boolean = false;\n\n  /** Emitted when the chip is edited. */\n  @Output() readonly edited: EventEmitter<MatChipEditedEvent> =\n    new EventEmitter<MatChipEditedEvent>();\n\n  /** The default chip edit input that is used if none is projected into this chip row. */\n  @ViewChild(MatChipEditInput) defaultEditInput?: MatChipEditInput;\n\n  /** The projected chip edit input. */\n  @ContentChild(MatChipEditInput) contentEditInput?: MatChipEditInput;\n\n  _isEditing = false;\n\n  constructor(\n    changeDetectorRef: ChangeDetectorRef,\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    focusMonitor: FocusMonitor,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n    @Optional()\n    @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n    globalRippleOptions?: RippleGlobalOptions,\n    @Attribute('tabindex') tabIndex?: string,\n  ) {\n    super(\n      changeDetectorRef,\n      elementRef,\n      ngZone,\n      focusMonitor,\n      _document,\n      animationMode,\n      globalRippleOptions,\n      tabIndex,\n    );\n\n    this.role = 'row';\n    this._onBlur.pipe(takeUntil(this.destroyed)).subscribe(() => {\n      if (this._isEditing && !this._editStartPending) {\n        this._onEditFinish();\n      }\n    });\n  }\n\n  override _hasTrailingIcon() {\n    // The trailing icon is hidden while editing.\n    return !this._isEditing && super._hasTrailingIcon();\n  }\n\n  /** Sends focus to the first gridcell when the user clicks anywhere inside the chip. */\n  _handleFocus() {\n    if (!this._isEditing && !this.disabled) {\n      this.focus();\n    }\n  }\n\n  override _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER && !this.disabled) {\n      if (this._isEditing) {\n        event.preventDefault();\n        this._onEditFinish();\n      } else if (this.editable) {\n        this._startEditing(event);\n      }\n    } else if (this._isEditing) {\n      // Stop the event from reaching the chip set in order to avoid navigating.\n      event.stopPropagation();\n    } else {\n      super._handleKeydown(event);\n    }\n  }\n\n  _handleDoubleclick(event: MouseEvent) {\n    if (!this.disabled && this.editable) {\n      this._startEditing(event);\n    }\n  }\n\n  private _startEditing(event: Event) {\n    if (\n      !this.primaryAction ||\n      (this.removeIcon && this._getSourceAction(event.target as Node) === this.removeIcon)\n    ) {\n      return;\n    }\n\n    // The value depends on the DOM so we need to extract it before we flip the flag.\n    const value = this.value;\n\n    this._isEditing = this._editStartPending = true;\n\n    // Starting the editing sequence below depends on the edit input\n    // query resolving on time. Trigger a synchronous change detection to\n    // ensure that it happens by the time we hit the timeout below.\n    this._changeDetectorRef.detectChanges();\n\n    // TODO(crisbeto): this timeout shouldn't be necessary given the `detectChange` call above.\n    // Defer initializing the input so it has time to be added to the DOM.\n    setTimeout(() => {\n      this._getEditInput().initialize(value);\n      this._editStartPending = false;\n    });\n  }\n\n  private _onEditFinish() {\n    this._isEditing = this._editStartPending = false;\n    this.edited.emit({chip: this, value: this._getEditInput().getValue()});\n\n    // If the edit input is still focused or focus was returned to the body after it was destroyed,\n    // return focus to the chip contents.\n    if (\n      this._document.activeElement === this._getEditInput().getNativeElement() ||\n      this._document.activeElement === this._document.body\n    ) {\n      this.primaryAction.focus();\n    }\n  }\n\n  override _isRippleDisabled(): boolean {\n    return super._isRippleDisabled() || this._isEditing;\n  }\n\n  /**\n   * Gets the projected chip edit input, or the default input if none is projected in. One of these\n   * two values is guaranteed to be defined.\n   */\n  private _getEditInput(): MatChipEditInput {\n    return this.contentEditInput || this.defaultEditInput!;\n  }\n}\n", "@if (!_isEditing) {\n  <span class=\"mat-mdc-chip-focus-overlay\"></span>\n}\n\n<span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--primary\" role=\"gridcell\"\n    matChipAction\n    [tabIndex]=\"tabIndex\"\n    [disabled]=\"disabled\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-describedby]=\"_ariaDescriptionId\">\n  @if (leadingIcon) {\n    <span class=\"mdc-evolution-chip__graphic mat-mdc-chip-graphic\">\n      <ng-content select=\"mat-chip-avatar, [matChipAvatar]\"></ng-content>\n    </span>\n  }\n\n  <span class=\"mdc-evolution-chip__text-label mat-mdc-chip-action-label\">\n    @if (_isEditing) {\n      @if (contentEditInput) {\n        <ng-content select=\"[matChipEditInput]\"></ng-content>\n      } @else {\n        <span matChipEditInput></span>\n      }\n    } @else {\n      <ng-content></ng-content>\n    }\n\n    <span class=\"mat-mdc-chip-primary-focus-indicator mat-mdc-focus-indicator\" aria-hidden=\"true\"></span>\n  </span>\n</span>\n\n@if (_hasTrailingIcon()) {\n  <span\n    class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--trailing\"\n    role=\"gridcell\">\n    <ng-content select=\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"></ng-content>\n  </span>\n}\n\n<span class=\"cdk-visually-hidden\" [id]=\"_ariaDescriptionId\">{{ariaDescription}}</span>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HasTabIndex, mixinTabIndex} from '@angular/material/core';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipAction} from './chip-action';\n\n/**\n * Boilerplate for applying mixins to MatChipSet.\n * @docs-private\n */\nabstract class MatChipSetBase {\n  abstract disabled: boolean;\n  constructor(_elementRef: ElementRef) {}\n}\nconst _MatChipSetMixinBase = mixinTabIndex(MatChipSetBase);\n\n/**\n * Basic container component for the MatChip component.\n *\n * Extended by MatChipListbox and MatChipGrid for different interaction patterns.\n */\n@Component({\n  selector: 'mat-chip-set',\n  template: `\n    <div class=\"mdc-evolution-chip-set__chips\" role=\"presentation\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  styleUrls: ['chip-set.css'],\n  host: {\n    'class': 'mat-mdc-chip-set mdc-evolution-chip-set',\n    '(keydown)': '_handleKeydown($event)',\n    '[attr.role]': 'role',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipSet\n  extends _MatChipSetMixinBase\n  implements AfterViewInit, HasTabIndex, OnDestroy\n{\n  /** Index of the last destroyed chip that had focus. */\n  private _lastDestroyedFocusedChipIndex: number | null = null;\n\n  /** Used to manage focus within the chip list. */\n  protected _keyManager: FocusKeyManager<MatChipAction>;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** Role to use if it hasn't been overwritten by the user. */\n  protected _defaultRole = 'presentation';\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip._onFocus);\n  }\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipDestroyedChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip.destroyed);\n  }\n\n  /** Whether the chip set is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Whether the chip list contains chips or not. */\n  get empty(): boolean {\n    return !this._chips || this._chips.length === 0;\n  }\n\n  /** The ARIA role applied to the chip set. */\n  @Input()\n  get role(): string | null {\n    if (this._explicitRole) {\n      return this._explicitRole;\n    }\n\n    return this.empty ? null : this._defaultRole;\n  }\n\n  set role(value: string | null) {\n    this._explicitRole = value;\n  }\n  private _explicitRole: string | null = null;\n\n  /** Whether any of the chips inside of this chip-set has focus. */\n  get focused(): boolean {\n    return this._hasFocusedChip();\n  }\n\n  /** The chips that are part of this chip set. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true,\n  })\n  _chips: QueryList<MatChip>;\n\n  /** Flat list of all the actions contained within the chips. */\n  _chipActions = new QueryList<MatChipAction>();\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLElement>,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir: Directionality,\n  ) {\n    super(_elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._setUpFocusManagement();\n    this._trackChipSetChanges();\n    this._trackDestroyedFocusedChip();\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n    this._chipActions.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Checks whether any of the chips is focused. */\n  protected _hasFocusedChip() {\n    return this._chips && this._chips.some(chip => chip._hasFocus());\n  }\n\n  /** Syncs the chip-set's state with the individual chips. */\n  protected _syncChipsState() {\n    if (this._chips) {\n      this._chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Dummy method for subclasses to override. Base chip set cannot be focused. */\n  focus() {}\n\n  /** Handles keyboard events on the chip set. */\n  _handleKeydown(event: KeyboardEvent) {\n    if (this._originatesFromChip(event)) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  protected _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this._chips.length;\n  }\n\n  /**\n   * Removes the `tabindex` from the chip set and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the set from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  protected _allowFocusEscape() {\n    if (this.tabIndex !== -1) {\n      const previousTabIndex = this.tabIndex;\n      this.tabIndex = -1;\n\n      // Note that this needs to be a `setTimeout`, because a `Promise.resolve`\n      // doesn't allow enough time for the focus to escape.\n      setTimeout(() => (this.tabIndex = previousTabIndex));\n    }\n  }\n\n  /**\n   * Gets a stream of events from all the chips within the set.\n   * The stream will automatically incorporate any newly-added chips.\n   */\n  protected _getChipStream<T, C extends MatChip = MatChip>(\n    mappingFunction: (chip: C) => Observable<T>,\n  ): Observable<T> {\n    return this._chips.changes.pipe(\n      startWith(null),\n      switchMap(() => merge(...(this._chips as QueryList<C>).map(mappingFunction))),\n    );\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  protected _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-mdc-chip')) {\n        return true;\n      }\n      currentElement = currentElement.parentElement;\n    }\n    return false;\n  }\n\n  /** Sets up the chip set's focus management logic. */\n  private _setUpFocusManagement() {\n    // Create a flat `QueryList` containing the actions of all of the chips.\n    // This allows us to navigate both within the chip and move to the next/previous\n    // one using the existing `ListKeyManager`.\n    this._chips.changes.pipe(startWith(this._chips)).subscribe((chips: QueryList<MatChip>) => {\n      const actions: MatChipAction[] = [];\n      chips.forEach(chip => chip._getActions().forEach(action => actions.push(action)));\n      this._chipActions.reset(actions);\n      this._chipActions.notifyOnChanges();\n    });\n\n    this._keyManager = new FocusKeyManager(this._chipActions)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr')\n      .withHomeAndEnd()\n      .skipPredicate(action => this._skipPredicate(action));\n\n    // Keep the manager active index in sync so that navigation picks\n    // up from the current chip if the user clicks into the list directly.\n    this.chipFocusChanges.pipe(takeUntil(this._destroyed)).subscribe(({chip}) => {\n      const action = chip._getSourceAction(document.activeElement as Element);\n\n      if (action) {\n        this._keyManager.updateActiveItem(action);\n      }\n    });\n\n    this._dir?.change\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n  }\n\n  /**\n   * Determines if key manager should avoid putting a given chip action in the tab index. Skip\n   * non-interactive and disabled actions since the user can't do anything with them.\n   */\n  protected _skipPredicate(action: MatChipAction): boolean {\n    // Skip chips that the user cannot interact with. `mat-chip-set` does not permit focusing disabled\n    // chips.\n    return !action.isInteractive || action.disabled;\n  }\n\n  /** Listens to changes in the chip set and syncs up the state of the individual chips. */\n  private _trackChipSetChanges() {\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => this._syncChipsState());\n      }\n\n      this._redirectDestroyedChipFocus();\n    });\n  }\n\n  /** Starts tracking the destroyed chips in order to capture the focused one. */\n  private _trackDestroyedFocusedChip() {\n    this.chipDestroyedChanges.pipe(takeUntil(this._destroyed)).subscribe((event: MatChipEvent) => {\n      const chipArray = this._chips.toArray();\n      const chipIndex = chipArray.indexOf(event.chip);\n\n      // If the focused chip is destroyed, save its index so that we can move focus to the next\n      // chip. We only save the index here, rather than move the focus immediately, because we want\n      // to wait until the chip is removed from the chip list before focusing the next one. This\n      // allows us to keep focus on the same index if the chip gets swapped out.\n      if (this._isValidIndex(chipIndex) && event.chip._hasFocus()) {\n        this._lastDestroyedFocusedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /**\n   * Finds the next appropriate chip to move focus to,\n   * if the currently-focused chip is destroyed.\n   */\n  private _redirectDestroyedChipFocus() {\n    if (this._lastDestroyedFocusedChipIndex == null) {\n      return;\n    }\n\n    if (this._chips.length) {\n      const newIndex = Math.min(this._lastDestroyedFocusedChipIndex, this._chips.length - 1);\n      const chipToFocus = this._chips.toArray()[newIndex];\n\n      if (chipToFocus.disabled) {\n        // If we're down to one disabled chip, move focus back to the set.\n        if (this._chips.length === 1) {\n          this.focus();\n        } else {\n          this._keyManager.setPreviousItemActive();\n        }\n      } else {\n        chipToFocus.focus();\n      }\n    } else {\n      this.focus();\n    }\n\n    this._lastDestroyedFocusedChipIndex = null;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatChipAction} from './chip-action';\nimport {TAB} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  inject,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipOption, MatChipSelectionChange} from './chip-option';\nimport {MatChipSet} from './chip-set';\nimport {MAT_CHIPS_DEFAULT_OPTIONS} from './tokens';\n\n/** Change event object that is emitted when the chip listbox value has changed. */\nexport class MatChipListboxChange {\n  constructor(\n    /** Chip listbox that emitted the event. */\n    public source: MatChipListbox,\n    /** Value of the chip listbox when the event was emitted. */\n    public value: any,\n  ) {}\n}\n\n/**\n * Provider Expression that allows mat-chip-listbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatChipListbox),\n  multi: true,\n};\n\n/**\n * An extension of the MatChipSet component that supports chip selection.\n * Used with MatChipOption chips.\n */\n@Component({\n  selector: 'mat-chip-listbox',\n  template: `\n    <div class=\"mdc-evolution-chip-set__chips\" role=\"presentation\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  styleUrls: ['chip-set.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mdc-evolution-chip-set mat-mdc-chip-listbox',\n    '[attr.role]': 'role',\n    '[tabIndex]': 'empty ? -1 : tabIndex',\n    // TODO: replace this binding with use of AriaDescriber\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'role ? required : null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'ngSkipHydration': '',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n  },\n  providers: [MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipListbox\n  extends MatChipSet\n  implements AfterContentInit, OnDestroy, ControlValueAccessor\n{\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  // TODO: MDC uses `grid` here\n  protected override _defaultRole = 'listbox';\n\n  /** Value that was assigned before the listbox was initialized. */\n  private _pendingInitialValue: any;\n\n  /** Default chip options. */\n  private _defaultOptions = inject(MAT_CHIPS_DEFAULT_OPTIONS, {optional: true});\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean {\n    return this._multiple;\n  }\n  set multiple(value: BooleanInput) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncListboxProperties();\n  }\n  private _multiple: boolean = false;\n\n  /** The array of selected chips inside the chip listbox. */\n  get selected(): MatChipOption[] | MatChipOption {\n    const selectedChips = this._chips.toArray().filter(chip => chip.selected);\n    return this.multiple ? selectedChips : selectedChips[0];\n  }\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip listbox is selectable.\n   *\n   * When a chip listbox is not selectable, the selected states for all\n   * the chips inside the chip listbox are always ignored.\n   */\n  @Input()\n  get selectable(): boolean {\n    return this._selectable;\n  }\n  set selectable(value: BooleanInput) {\n    this._selectable = coerceBooleanProperty(value);\n    this._syncListboxProperties();\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (o1: any, o2: any) => o1 === o2;\n\n  /** Whether this chip listbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n  set required(value: BooleanInput) {\n    this._required = coerceBooleanProperty(value);\n  }\n  protected _required: boolean = false;\n\n  /** Whether checkmark indicator for single-selection options is hidden. */\n  @Input()\n  get hideSingleSelectionIndicator(): boolean {\n    return this._hideSingleSelectionIndicator;\n  }\n  set hideSingleSelectionIndicator(value: BooleanInput) {\n    this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n    this._syncListboxProperties();\n  }\n  private _hideSingleSelectionIndicator: boolean =\n    this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return this._getChipStream<MatChipSelectionChange, MatChipOption>(chip => chip.selectionChange);\n  }\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip._onBlur);\n  }\n\n  /** The value of the listbox, which is the combined value of the selected chips. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /** Event emitted when the selected chip listbox value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListboxChange> =\n    new EventEmitter<MatChipListboxChange>();\n\n  @ContentChildren(MatChipOption, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true,\n  })\n  // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n  override _chips: QueryList<MatChipOption> = undefined!;\n\n  ngAfterContentInit() {\n    if (this._pendingInitialValue !== undefined) {\n      Promise.resolve().then(() => {\n        this._setSelectionByValue(this._pendingInitialValue, false);\n        this._pendingInitialValue = undefined;\n      });\n    }\n\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      // Update listbox selectable/multiple properties on chips\n      this._syncListboxProperties();\n    });\n\n    this.chipBlurChanges.pipe(takeUntil(this._destroyed)).subscribe(() => this._blur());\n    this.chipSelectionChanges.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (!this.multiple) {\n        this._chips.forEach(chip => {\n          if (chip !== event.source) {\n            chip._setSelectedState(false, false, false);\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /**\n   * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there\n   * are no selected chips.\n   */\n  override focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    const firstSelectedChip = this._getFirstSelectedChip();\n\n    if (firstSelectedChip && !firstSelectedChip.disabled) {\n      firstSelectedChip.focus();\n    } else if (this._chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._elementRef.nativeElement.focus();\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    if (this._chips) {\n      this._setSelectionByValue(value, false);\n    } else if (value != null) {\n      this._pendingInitialValue = value;\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Selects all chips with value. */\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n    } else {\n      this._selectValue(value, isUserInput);\n    }\n  }\n\n  /** When blurred, marks the field as touched when focus moved outside the chip listbox. */\n  _blur() {\n    if (!this.disabled) {\n      // Wait to see if focus moves to an individual chip.\n      setTimeout(() => {\n        if (!this.focused) {\n          this._markAsTouched();\n        }\n      });\n    }\n  }\n\n  _keydown(event: KeyboardEvent) {\n    if (event.keyCode === TAB) {\n      super._allowFocusEscape();\n    }\n  }\n\n  /** Marks the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : undefined;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListboxChange(this, valueToEmit));\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Deselects every chip in the listbox.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean): MatChip | undefined {\n    const correspondingChip = this._chips.find(chip => {\n      return chip.value != null && this.compareWith(chip.value, value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n    }\n\n    return correspondingChip;\n  }\n\n  /** Syncs the chip-listbox selection state with the individual chips. */\n  private _syncListboxProperties() {\n    if (this._chips) {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._chips.forEach(chip => {\n          chip._chipListMultiple = this.multiple;\n          chip.chipListSelectable = this._selectable;\n          chip._chipListHideSingleSelectionIndicator = this.hideSingleSelectionIndicator;\n          chip._changeDetectorRef.markForCheck();\n        });\n      });\n    }\n  }\n\n  /** Returns the first selected chip in this listbox, or undefined if no chips are selected. */\n  private _getFirstSelectedChip(): MatChipOption | undefined {\n    if (Array.isArray(this.selected)) {\n      return this.selected.length ? this.selected[0] : undefined;\n    } else {\n      return this.selected;\n    }\n  }\n\n  /**\n   * Determines if key manager should avoid putting a given chip action in the tab index. Skip\n   * non-interactive actions since the user can't do anything with them.\n   */\n  protected override _skipPredicate(action: MatChipAction): boolean {\n    // Override the skip predicate in the base class to avoid skipping disabled chips. Allow\n    // disabled chip options to receive focus to align with WAI ARIA recommendation. Normally WAI\n    // ARIA's instructions are to exclude disabled items from the tab order, but it makes a few\n    // exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    return !action.isInteractive;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm,\n  Validators,\n} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {MatChipTextControl} from './chip-text-control';\nimport {Observable, Subject, merge} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatChipEvent} from './chip';\nimport {MatChipRow} from './chip-row';\nimport {MatChipSet} from './chip-set';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/** Change event object that is emitted when the chip grid value has changed. */\nexport class MatChipGridChange {\n  constructor(\n    /** Chip grid that emitted the event. */\n    public source: MatChipGrid,\n    /** Value of the chip grid when the event was emitted. */\n    public value: any,\n  ) {}\n}\n\n/**\n * Boilerplate for applying mixins to MatChipGrid.\n * @docs-private\n */\nclass MatChipGridBase extends MatChipSet {\n  /**\n   * Emits whenever the component state changes and should cause the parent\n   * form-field to update. Implemented as part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  readonly stateChanges = new Subject<void>();\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    dir: Directionality,\n    public _defaultErrorStateMatcher: ErrorStateMatcher,\n    public _parentForm: NgForm,\n    public _parentFormGroup: FormGroupDirective,\n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    public ngControl: NgControl,\n  ) {\n    super(elementRef, changeDetectorRef, dir);\n  }\n}\nconst _MatChipGridMixinBase = mixinErrorState(MatChipGridBase);\n\n/**\n * An extension of the MatChipSet component used with MatChipRow chips and\n * the matChipInputFor directive.\n */\n@Component({\n  selector: 'mat-chip-grid',\n  template: `\n    <div class=\"mdc-evolution-chip-set__chips\" role=\"presentation\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  styleUrls: ['chip-set.css'],\n  inputs: ['tabIndex'],\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-grid mdc-evolution-chip-set',\n    '[attr.role]': 'role',\n    '[tabIndex]': '_chips && _chips.length === 0 ? -1 : tabIndex',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipGrid}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipGrid\n  extends _MatChipGridMixinBase\n  implements\n    AfterContentInit,\n    AfterViewInit,\n    CanUpdateErrorState,\n    ControlValueAccessor,\n    DoCheck,\n    MatFormFieldControl<any>,\n    OnDestroy\n{\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-grid';\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  protected override _defaultRole = 'grid';\n\n  /**\n   * List of element ids to propagate to the chipInput's aria-describedby attribute.\n   */\n  private _ariaDescribedbyIds: string[] = [];\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  override get disabled(): boolean {\n    return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n  }\n  override set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput.id;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  override get empty(): boolean {\n    return (\n      (!this._chipInput || this._chipInput.empty) && (!this._chips || this._chips.length === 0)\n    );\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-grid has focus. */\n  override get focused(): boolean {\n    return this._chipInput.focused || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n  set required(value: BooleanInput) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean | undefined;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return !this.empty || this.focused;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(value: any) {\n    this._value = value;\n  }\n  protected _value: any[] = [];\n\n  /** An object used to control when error messages are shown. */\n  @Input() override errorStateMatcher: ErrorStateMatcher;\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip._onBlur);\n  }\n\n  /** Emits when the chip grid value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipGridChange> =\n    new EventEmitter<MatChipGridChange>();\n\n  /**\n   * Emits whenever the raw value of the chip-grid changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  @ContentChildren(MatChipRow, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true,\n  })\n  // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n  override _chips: QueryList<MatChipRow> = undefined!;\n\n  constructor(\n    elementRef: ElementRef,\n    changeDetectorRef: ChangeDetectorRef,\n    @Optional() dir: Directionality,\n    @Optional() parentForm: NgForm,\n    @Optional() parentFormGroup: FormGroupDirective,\n    defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() ngControl: NgControl,\n  ) {\n    super(\n      elementRef,\n      changeDetectorRef,\n      dir,\n      defaultErrorStateMatcher,\n      parentForm,\n      parentFormGroup,\n      ngControl,\n    );\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.chipBlurChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n\n    merge(this.chipFocusChanges, this._chips.changes)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.stateChanges.next());\n  }\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n\n    if (!this._chipInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('mat-chip-grid must be used in combination with matChipInputFor.');\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this.stateChanges.complete();\n  }\n\n  /** Associates an HTML input element with this chip grid. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n    this._chipInput.setDescribedByIds(this._ariaDescribedbyIds);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this.disabled && !this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first chip in this chip grid, or the associated input when there\n   * are no eligible chips.\n   */\n  override focus(): void {\n    if (this.disabled || this._chipInput.focused) {\n      return;\n    }\n\n    if (!this._chips.length || this._chips.first.disabled) {\n      // Delay until the next tick, because this can cause a \"changed after checked\"\n      // error if the input does something on focus (e.g. opens an autocomplete).\n      Promise.resolve().then(() => this._chipInput.focus());\n    } else if (this._chips.length) {\n      this._keyManager.setFirstItemActive();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    // We must keep this up to date to handle the case where ids are set\n    // before the chip input is registered.\n    this._ariaDescribedbyIds = ids;\n    this._chipInput?.setDescribedByIds(ids);\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    // The user is responsible for creating the child chips, so we just store the value.\n    this._value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip grid. */\n  _blur() {\n    if (!this.disabled) {\n      // Check whether the focus moved to chip input.\n      // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n      // to chip input, do nothing.\n      // Timeout is needed to wait for the focus() event trigger on chip input.\n      setTimeout(() => {\n        if (!this.focused) {\n          this._propagateChanges();\n          this._markAsTouched();\n        }\n      });\n    }\n  }\n\n  /**\n   * Removes the `tabindex` from the chip grid and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the grid from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  protected override _allowFocusEscape() {\n    if (!this._chipInput.focused) {\n      super._allowFocusEscape();\n    }\n  }\n\n  /** Handles custom keyboard events. */\n  override _handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === TAB) {\n      if (\n        this._chipInput.focused &&\n        hasModifierKey(event, 'shiftKey') &&\n        this._chips.length &&\n        !this._chips.last.disabled\n      ) {\n        event.preventDefault();\n\n        if (this._keyManager.activeItem) {\n          this._keyManager.setActiveItem(this._keyManager.activeItem);\n        } else {\n          this._focusLastChip();\n        }\n      } else {\n        // Use the super method here since it doesn't check for the input\n        // focused state. This allows focus to escape if there's only one\n        // disabled chip left in the list.\n        super._allowFocusEscape();\n      }\n    } else if (!this._chipInput.focused) {\n      super._handleKeydown(event);\n    }\n\n    this.stateChanges.next();\n  }\n\n  _focusLastChip() {\n    if (this._chips.length) {\n      this._chips.last.focus();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(): void {\n    const valueToEmit = this._chips.length ? this._chips.toArray().map(chip => chip.value) : [];\n    this._value = valueToEmit;\n    this.change.emit(new MatChipGridChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Mark the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {MatFormField, MAT_FORM_FIELD} from '@angular/material/form-field';\nimport {MatChipsDefaultOptions, MAT_CHIPS_DEFAULT_OPTIONS} from './tokens';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipTextControl} from './chip-text-control';\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /**\n   * The native `<input>` element that the event is being fired for.\n   * @deprecated Use `MatChipInputEvent#chipInput.inputElement` instead.\n   * @breaking-change 13.0.0 This property will be removed.\n   */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n\n  /** Reference to the chip input that emitted the event. */\n  chipInput: MatChipInput;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of a `<mat-chip-grid>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    // TODO: eventually we should remove `mat-input-element` from here since it comes from the\n    // non-MDC version of the input. It's currently being kept for backwards compatibility, because\n    // the MDC chips were landed initially with it.\n    'class': 'mat-mdc-chip-input mat-mdc-input-element mdc-text-field__input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(keyup)': '_keyup($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipGrid && _chipGrid.ngControl ? _chipGrid.ngControl.invalid : null',\n    '[attr.aria-required]': '_chipGrid && _chipGrid.required || null',\n    '[attr.required]': '_chipGrid && _chipGrid.required || null',\n  },\n})\nexport class MatChipInput implements MatChipTextControl, AfterContentInit, OnChanges, OnDestroy {\n  /** Used to prevent focus moving to chips while user is holding backspace */\n  private _focusLastChipOnBackspace: boolean;\n\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipGrid: MatChipGrid;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipGrid(value: MatChipGrid) {\n    if (value) {\n      this._chipGrid = value;\n      this._chipGrid.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean {\n    return this._addOnBlur;\n  }\n  set addOnBlur(value: BooleanInput) {\n    this._addOnBlur = coerceBooleanProperty(value);\n  }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: readonly number[] | ReadonlySet<number>;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  readonly chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-mdc-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this._chipGrid && this._chipGrid.disabled);\n  }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    return !this.inputElement.value;\n  }\n\n  /** The native input element to which this directive is attached. */\n  readonly inputElement!: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) defaultOptions: MatChipsDefaultOptions,\n    @Optional() @Inject(MAT_FORM_FIELD) formField?: MatFormField,\n  ) {\n    this.inputElement = this._elementRef.nativeElement as HTMLInputElement;\n    this.separatorKeyCodes = defaultOptions.separatorKeyCodes;\n\n    if (formField) {\n      this.inputElement.classList.add('mat-mdc-form-field-input-control');\n    }\n  }\n\n  ngOnChanges() {\n    this._chipGrid.stateChanges.next();\n  }\n\n  ngOnDestroy(): void {\n    this.chipEnd.complete();\n  }\n\n  ngAfterContentInit(): void {\n    this._focusLastChipOnBackspace = this.empty;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    if (event) {\n      // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n      // We focus the last chip on backspace only after the user has released the backspace button,\n      // And the input is empty (see behaviour in _keyup)\n      if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n        this._chipGrid._focusLastChip();\n        event.preventDefault();\n        return;\n      } else {\n        this._focusLastChipOnBackspace = false;\n      }\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keyup(event: KeyboardEvent) {\n    // Allow user to move focus to chips next time he presses backspace\n    if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n      this._focusLastChipOnBackspace = true;\n      event.preventDefault();\n    }\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipGrid.focused) {\n      this._chipGrid._blur();\n    }\n    this._chipGrid.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._focusLastChipOnBackspace = this.empty;\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({\n        input: this.inputElement,\n        value: this.inputElement.value,\n        chipInput: this,\n      });\n\n      event?.preventDefault();\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this.inputElement.focus();\n  }\n\n  /** Clears the input */\n  clear(): void {\n    this.inputElement.value = '';\n    this._focusLastChipOnBackspace = true;\n  }\n\n  setDescribedByIds(ids: string[]): void {\n    const element = this._elementRef.nativeElement;\n\n    // Set the value directly in the DOM since this binding\n    // is prone to \"changed after checked\" errors.\n    if (ids.length) {\n      element.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      element.removeAttribute('aria-describedby');\n    }\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatChip} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './tokens';\nimport {MatChipEditInput} from './chip-edit-input';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip-icons';\nimport {MatChipInput} from './chip-input';\nimport {MatChipListbox} from './chip-listbox';\nimport {MatChipRow} from './chip-row';\nimport {MatChipOption} from './chip-option';\nimport {MatChipSet} from './chip-set';\nimport {MatChipAction} from './chip-action';\n\nconst CHIP_DECLARATIONS = [\n  MatChip,\n  MatChipAvatar,\n  MatChipEditInput,\n  MatChipGrid,\n  MatChipInput,\n  MatChipListbox,\n  MatChipOption,\n  MatChipRemove,\n  MatChipRow,\n  MatChipSet,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, CHIP_DECLARATIONS],\n  declarations: [MatChipAction, CHIP_DECLARATIONS],\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER],\n      } as MatChipsDefaultOptions,\n    },\n  ],\n})\nexport class MatChipsModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["MatChip_Conditional_3_Template", "rf", "ctx", "i0", "ɵɵelementStart", "ɵɵprojection", "ɵɵelementEnd", "MatChip_Conditional_7_Template", "_c0", "_c1", "MatChipOption_Conditional_3_Template", "ɵɵnamespaceSVG", "ɵɵelement", "MatChipOption_Conditional_7_Template", "_c2", "MatChipRow_Conditional_0_Template", "MatChipRow_Conditional_2_Template", "MatChipRow_Conditional_4_Conditional_0_Template", "MatChipRow_Conditional_4_Conditional_1_Template", "MatChipRow_Conditional_4_Template", "ɵɵtemplate", "ctx_r2", "ɵɵnextContext", "ɵɵconditional", "contentEditInput", "MatChipRow_Conditional_5_Template", "MatChipRow_Conditional_7_Template", "_c3", "_c4", "_c5", "_c6", "MAT_CHIPS_DEFAULT_OPTIONS", "InjectionToken", "MAT_CHIP_AVATAR", "MAT_CHIP_TRAILING_ICON", "MAT_CHIP_REMOVE", "MAT_CHIP", "_MatChipActionBase", "_MatChipActionMixinBase", "mixinTabIndex", "MatChipAction", "disabled", "_disabled", "_parentChip", "value", "coerceBooleanProperty", "_getDisabledAttribute", "_allowFocusWhenDisabled", "_getTabindex", "isInteractive", "tabIndex", "toString", "constructor", "_elementRef", "_isPrimary", "nativeElement", "nodeName", "setAttribute", "focus", "_handleClick", "event", "preventDefault", "_handlePrimaryActionInteraction", "_handleKeydown", "keyCode", "ENTER", "SPACE", "_isEditing", "ɵfac", "MatChipAction_Factory", "t", "ɵɵdirectiveInject", "ElementRef", "ɵɵdefineDirective", "type", "selectors", "hostAttrs", "hostVars", "hostBindings", "MatChipAction_HostBindings", "ɵɵlistener", "MatChipAction_click_HostBindingHandler", "$event", "MatChipAction_keydown_HostBindingHandler", "ɵɵattribute", "ɵɵclassProp", "inputs", "features", "ɵɵInheritDefinitionFeature", "ɵsetClassMetadata", "Directive", "args", "selector", "host", "Inject", "Input", "MatChipAvatar", "ɵɵProvidersFeature", "provide", "useExisting", "providers", "MatChipTrailingIcon", "ɵɵgetInheritedFactory", "MatChipRemove", "stopPropagation", "remove", "MatChipRemove_HostBindings", "uid", "_MatChipMixinBase", "mixinColor", "mixinDisableRipple", "mixinDisabled", "MatChip", "_hasFocus", "_hasFocusInternal", "_value", "undefined", "_textElement", "textContent", "trim", "removable", "_removable", "highlighted", "_highlighted", "ripple", "_rippleLoader", "getRipple", "v", "attachRipple", "_changeDetectorRef", "elementRef", "_ngZone", "_focusMonitor", "_document", "animationMode", "_globalRippleOptions", "_onFocus", "Subject", "_onBlur", "role", "id", "ariaLabel", "ariaDescription", "_ariaDescriptionId", "removed", "EventEmitter", "destroyed", "basicChipAttrName", "inject", "MatRippleLoader", "_animationsDisabled", "parseInt", "defaultTabIndex", "_monitorFocus", "configureRipple", "className", "_isRippleDisabled", "ngOnInit", "element", "_isBasicChip", "hasAttribute", "tagName", "toLowerCase", "ngAfterViewInit", "querySelector", "_pendingFocus", "ngAfterContentInit", "_actionChanges", "merge", "_allLeadingIcons", "changes", "_allTrailingIcons", "_allRemoveIcons", "subscribe", "markForCheck", "ngDoCheck", "setDisabled", "ngOnDestroy", "stopMonitoring", "unsubscribe", "emit", "chip", "complete", "disableRipple", "_hasTrailingIcon", "trailingIcon", "removeIcon", "BACKSPACE", "DELETE", "primaryAction", "_getSourceAction", "target", "_getActions", "find", "action", "contains", "result", "push", "monitor", "origin", "hasFocus", "next", "onStable", "pipe", "take", "run", "MatChip_Factory", "ChangeDetectorRef", "NgZone", "FocusMonitor", "DOCUMENT", "ANIMATION_MODULE_TYPE", "MAT_RIPPLE_GLOBAL_OPTIONS", "ɵɵinjectAttribute", "ɵɵdefineComponent", "contentQueries", "MatChip_ContentQueries", "dirIndex", "ɵɵcontentQuery", "_t", "ɵɵqueryRefresh", "ɵɵloadQuery", "leadingIcon", "first", "viewQuery", "MatChip_Query", "ɵɵviewQuery", "MatChip_HostBindings", "MatChip_keydown_HostBindingHandler", "ɵɵhostProperty", "color", "outputs", "exportAs", "ngContentSelectors", "decls", "vars", "consts", "template", "MatChip_Template", "ɵɵprojectionDef", "ɵɵadvance", "ɵɵproperty", "dependencies", "styles", "encapsulation", "changeDetection", "Component", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "Optional", "Attribute", "ContentChildren", "descendants", "Output", "ContentChild", "ViewChild", "MatChipSelectionChange", "source", "selected", "isUserInput", "MatChipOption", "_defaultOptions", "optional", "chipListSelectable", "_chipListMultiple", "_chipListHideSingleSelectionIndicator", "hideSingleSelectionIndicator", "_selectable", "_selected", "selectionChange", "selectable", "_setSelectedState", "ariaSelected", "select", "deselect", "selectViaInteraction", "toggleSelected", "_hasLeadingGraphic", "isSelected", "emitEvent", "ɵcmp", "MatChipOption_HostBindings", "MatChipOption_Template", "ɵɵtext", "ɵɵtextInterpolate", "MatChipEditInput", "initialize", "initialValue", "getNativeElement", "setValue", "_moveCursorToEndOfInput", "getValue", "range", "createRange", "selectNodeContents", "collapse", "sel", "window", "getSelection", "removeAllRanges", "addRange", "MatChipEditInput_Factory", "MatChipRow", "changeDetectorRef", "ngZone", "focusMonitor", "globalRippleOptions", "_editStartPending", "editable", "edited", "takeUntil", "_onEditFinish", "_handleFocus", "_startEditing", "_handleDoubleclick", "detectChanges", "setTimeout", "_getEditInput", "activeElement", "body", "defaultEditInput", "MatChipRow_Factory", "MatChipRow_ContentQueries", "MatChipRow_Query", "MatChipRow_HostBindings", "MatChipRow_focus_HostBindingHandler", "MatChipRow_dblclick_HostBindingHandler", "MatChipRow_Template", "MatChipSetBase", "_MatChipSetMixinBase", "MatChipSet", "chipFocusChanges", "_getChipStream", "chipDestroyedChanges", "_syncChipsState", "empty", "_chips", "length", "_explicitRole", "_defaultRole", "focused", "_hasFocusedChip", "_dir", "_lastDestroyedFocusedChipIndex", "_destroyed", "_chipActions", "QueryList", "_setUpFocusManagement", "_trackChipSetChanges", "_trackDestroyedFocusedChip", "_keyManager", "destroy", "some", "forEach", "_originatesFromChip", "onKeydown", "_isValidIndex", "index", "_allowFocusEscape", "previousTabIndex", "mappingFunction", "startWith", "switchMap", "map", "currentElement", "classList", "parentElement", "chips", "actions", "reset", "notifyOnChanges", "FocusKeyManager", "withVerticalOrientation", "withHorizontalOrientation", "withHomeAndEnd", "skipPredicate", "_skipPredicate", "document", "updateActiveItem", "change", "direction", "Promise", "resolve", "then", "_redirectDestroyedChipFocus", "chipArray", "toArray", "chipIndex", "indexOf", "newIndex", "Math", "min", "chipToFocus", "setPreviousItemActive", "Directionality", "MatChipSet_ContentQueries", "MatChipSet_HostBindings", "MatChipSet_keydown_HostBindingHandler", "MatChipSet_Template", "MatChipListboxChange", "MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR", "NG_VALUE_ACCESSOR", "forwardRef", "MatChipListbox", "multi", "_onTouched", "_onChange", "_multiple", "ariaOrientation", "compareWith", "o1", "o2", "_required", "_hideSingleSelectionIndicator", "multiple", "_syncListboxProperties", "selectedChips", "filter", "required", "chipSelectionChanges", "chipBlurChanges", "writeValue", "_pendingInitialValue", "_setSelectionByValue", "_blur", "_propagateChanges", "firstSelectedChip", "_getFirstSelectedChip", "setFirstItemActive", "registerOnChange", "fn", "registerOnTouched", "setDisabledState", "isDisabled", "_clearSelection", "Array", "isArray", "currentValue", "_selectValue", "_markAsTouched", "_keydown", "TAB", "valueToEmit", "skip", "correspondingChip", "MatChipListbox_ContentQueries", "MatChipListbox_HostBindings", "MatChipListbox_focus_HostBindingHandler", "MatChipListbox_blur_HostBindingHandler", "MatChipListbox_keydown_HostBindingHandler", "_ariaDescribedby", "MatChipListbox_Template", "MatChipGridChange", "MatChipGridBase", "dir", "_defaultErrorStateMatcher", "_parentForm", "_parentFormGroup", "ngControl", "stateChanges", "_MatChipGridMixinBase", "mixinErrorState", "MatChipGrid", "_chipInput", "placeholder", "_placeholder", "control", "hasValidator", "Validators", "shouldLabelFloat", "parentForm", "parentFormGroup", "defaultErrorStateMatcher", "controlType", "_ariaDescribedbyIds", "valueChange", "valueAccessor", "ngDevMode", "Error", "updateErrorState", "registerInput", "inputElement", "setDescribedByIds", "onContainerClick", "ids", "hasModifierKey", "last", "activeItem", "setActiveItem", "_focusLastChip", "NgForm", "FormGroupDirective", "ErrorStateMatcher", "NgControl", "MatChipGrid_ContentQueries", "MatChipGrid_HostBindings", "MatChipGrid_focus_HostBindingHandler", "MatChipGrid_blur_HostBindingHandler", "errorState", "errorStateMatcher", "MatFormFieldControl", "MatChipGrid_Template", "Self", "nextUniqueId", "MatChipInput", "chipGrid", "_chipGrid", "addOnBlur", "_addOnBlur", "defaultOptions", "formField", "chipEnd", "separatorKeyCodes", "add", "ngOnChanges", "_focusLastChipOnBackspace", "_emitChipEnd", "_keyup", "_focus", "_isSeparatorKey", "input", "chipInput", "_onInput", "clear", "join", "removeAttribute", "Set", "has", "MAT_FORM_FIELD", "MatChipInput_HostBindings", "MatChipInput_keydown_HostBindingHandler", "MatChipInput_keyup_HostBindingHandler", "MatChipInput_blur_HostBindingHandler", "MatChipInput_focus_HostBindingHandler", "MatChipInput_input_HostBindingHandler", "invalid", "ɵɵNgOnChangesFeature", "CHIP_DECLARATIONS", "MatChipsModule", "ɵɵdefineNgModule", "declarations", "imports", "MatCommonModule", "MatRippleModule", "exports", "ɵinj", "ɵɵdefineInjector", "useValue", "NgModule"]
}
