{
  "version": 3,
  "sources": ["../../../../../../../src/material/sort/sort-errors.ts", "../../../../../../../src/material/sort/sort.ts", "../../../../../../../src/material/sort/sort-animations.ts", "../../../../../../../src/material/sort/sort-header-intl.ts", "../../../../../../../src/material/sort/sort-header.ts", "../../../../../../../src/material/sort/sort-header.html", "../../../../../../../src/material/sort/sort-module.ts", "../../../../../../../src/material/sort/sort_public_index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Position of the arrow that displays when sorted. */\nexport type SortHeaderArrowPosition = 'before' | 'after';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: SortDirection;\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n/** Default options for `mat-sort`.  */\nexport interface MatSortDefaultOptions {\n  /** Whether to disable clearing the sorting state. */\n  disableClear?: boolean;\n  /** Position of the arrow that displays when sorted. */\n  arrowPosition?: SortHeaderArrowPosition;\n}\n\n/** Injection token to be used to override the default options for `mat-sort`. */\nexport const MAT_SORT_DEFAULT_OPTIONS = new InjectionToken<MatSortDefaultOptions>(\n  'MAT_SORT_DEFAULT_OPTIONS',\n);\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nconst _MatSortBase = mixinInitialized(mixinDisabled(class {}));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  host: {\n    'class': 'mat-sort',\n  },\n  inputs: ['disabled: matSortDisabled'],\n})\nexport class MatSort\n  extends _MatSortBase\n  implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit\n{\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overridden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: SortDirection = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection {\n    return this._direction;\n  }\n  set direction(direction: SortDirection) {\n    if (\n      direction &&\n      direction !== 'asc' &&\n      direction !== 'desc' &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overridden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean {\n    return this._disableClear;\n  }\n  set disableClear(v: BooleanInput) {\n    this._disableClear = coerceBooleanProperty(v);\n  }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  constructor(\n    @Optional()\n    @Inject(MAT_SORT_DEFAULT_OPTIONS)\n    private _defaultOptions?: MatSortDefaultOptions,\n  ) {\n    super();\n  }\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!sortable.id) {\n        throw getSortHeaderMissingIdError();\n      }\n\n      if (this.sortables.has(sortable.id)) {\n        throw getSortDuplicateSortableIdError(sortable.id);\n      }\n    }\n\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) {\n      return '';\n    }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear =\n      sortable?.disableClear ?? this.disableClear ?? !!this._defaultOptions?.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) {\n      nextDirectionIndex = 0;\n    }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: SortDirection, disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n\n  return sortOrder;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n  query,\n  animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION =\n  AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: 0.54})),\n    state(\n      'hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n      style({opacity: 0}),\n    ),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition(\n      '* => desc-to-hint, * => desc-to-active',\n      animate(\n        SORT_ANIMATION_TRANSITION,\n        keyframes([style({transform: 'translateY(-25%)'}), style({transform: 'translateY(0)'})]),\n      ),\n    ),\n    // Hint Center => Hidden Below\n    transition(\n      '* => hint-to-desc, * => active-to-desc',\n      animate(\n        SORT_ANIMATION_TRANSITION,\n        keyframes([style({transform: 'translateY(0)'}), style({transform: 'translateY(25%)'})]),\n      ),\n    ),\n    // Hidden Below => Hint Center\n    transition(\n      '* => asc-to-hint, * => asc-to-active',\n      animate(\n        SORT_ANIMATION_TRANSITION,\n        keyframes([style({transform: 'translateY(25%)'}), style({transform: 'translateY(0)'})]),\n      ),\n    ),\n    // Hint Center => Hidden Above\n    transition(\n      '* => hint-to-asc, * => active-to-asc',\n      animate(\n        SORT_ANIMATION_TRANSITION,\n        keyframes([style({transform: 'translateY(0)'}), style({transform: 'translateY(-25%)'})]),\n      ),\n    ),\n    state(\n      'desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n      style({transform: 'translateY(0)'}),\n    ),\n    state('hint-to-desc, active-to-desc, desc', style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc', style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [query('@*', animateChild(), {optional: true})]),\n  ]),\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n}\n\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY,\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {\n  MAT_SORT_DEFAULT_OPTIONS,\n  MatSort,\n  MatSortable,\n  MatSortDefaultOptions,\n  SortHeaderArrowPosition,\n} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nconst _MatSortHeaderBase = mixinDisabled(class {});\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState?: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    'class': 'mat-sort-header',\n    '(click)': '_handleClick()',\n    '(keydown)': '_handleKeydown($event)',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ],\n})\nexport class MatSortHeader\n  extends _MatSortHeaderBase\n  implements CanDisable, MatSortable, OnDestroy, OnInit, AfterViewInit\n{\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * The element with role=\"button\" inside this component's view. We need this\n   * in order to apply a description with AriaDescriber.\n   */\n  private _sortButton: HTMLElement;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition = {};\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: SortHeaderArrowPosition = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: SortDirection;\n\n  /**\n   * Description applied to MatSortHeader's button element with aria-describedby. This text should\n   * describe the action that will occur when the user clicks the sort header.\n   */\n  @Input()\n  get sortActionDescription(): string {\n    return this._sortActionDescription;\n  }\n  set sortActionDescription(value: string) {\n    this._updateSortActionDescription(value);\n  }\n  // Default the action description to \"Sort\" because it's better than nothing.\n  // Without a description, the button's label comes from the sort header text content,\n  // which doesn't give any indication that it performs a sorting operation.\n  private _sortActionDescription: string = 'Sort';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean {\n    return this._disableClear;\n  }\n  set disableClear(v: BooleanInput) {\n    this._disableClear = coerceBooleanProperty(v);\n  }\n  private _disableClear: boolean;\n\n  constructor(\n    /**\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n     * @breaking-change 13.0.0\n     */\n    public _intl: MatSortHeaderIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n    // tslint:disable-next-line: lightweight-tokens\n    @Optional() public _sort: MatSort,\n    @Inject('MAT_SORT_HEADER_COLUMN_DEF')\n    @Optional()\n    public _columnDef: MatSortHeaderColumnDef,\n    private _focusMonitor: FocusMonitor,\n    private _elementRef: ElementRef<HTMLElement>,\n    /** @breaking-change 14.0.0 _ariaDescriber will be required. */\n    @Optional() private _ariaDescriber?: AriaDescriber | null,\n    @Optional()\n    @Inject(MAT_SORT_DEFAULT_OPTIONS)\n    defaultOptions?: MatSortDefaultOptions,\n  ) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    if (defaultOptions?.arrowPosition) {\n      this.arrowPosition = defaultOptions?.arrowPosition;\n    }\n\n    this._handleStateChanges();\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState({\n      toState: this._isSorted() ? 'active' : this._arrowDirection,\n    });\n\n    this._sort.register(this);\n\n    this._sortButton = this._elementRef.nativeElement.querySelector('.mat-sort-header-container')!;\n    this._updateSortActionDescription(this._sortActionDescription);\n  }\n\n  ngAfterViewInit() {\n    // We use the focus monitor because we also want to style\n    // things differently based on the focus origin.\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n      const newState = !!origin;\n      if (newState !== this._showIndicatorHint) {\n        this._setIndicatorHintVisible(newState);\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) {\n      return;\n    }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState || {};\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _toggleOnInteraction() {\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n  }\n\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n      event.preventDefault();\n      this._toggleOnInteraction();\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return (\n      this._sort.active == this.id &&\n      (this._sort.direction === 'asc' || this._sort.direction === 'desc')\n    );\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) {\n      return 'none';\n    }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n\n  private _updateSortActionDescription(newDescription: string) {\n    // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n    // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n    // for every *cell* in the table, creating a lot of unnecessary noise.\n\n    // If _sortButton is undefined, the component hasn't been initialized yet so there's\n    // nothing to update in the DOM.\n    if (this._sortButton) {\n      // removeDescription will no-op if there is no existing message.\n      // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n      this._ariaDescriber?.removeDescription(this._sortButton, this._sortActionDescription);\n      this._ariaDescriber?.describe(this._sortButton, newDescription);\n    }\n\n    this._sortActionDescription = newDescription;\n  }\n\n  /** Handles changes in the sorting state. */\n  private _handleStateChanges() {\n    this._rerenderSubscription = merge(\n      this._sort.sortChange,\n      this._sort._stateChanges,\n      this._intl.changes,\n    ).subscribe(() => {\n      if (this._isSorted()) {\n        this._updateArrowDirection();\n\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n          this._disableViewStateAnimation = true;\n        }\n\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'active'});\n        this._showIndicatorHint = false;\n      }\n\n      // If this header was recently active and now no longer sorted, animate away the arrow.\n      if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n        this._disableViewStateAnimation = false;\n        this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n", "<!--\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\n  will be read out as the user is navigating the table's cell (see #13012).\n\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\n-->\n<div class=\"mat-sort-header-container mat-focus-indicator\"\n     [class.mat-sort-header-sorted]=\"_isSorted()\"\n     [class.mat-sort-header-position-before]=\"arrowPosition === 'before'\"\n     [attr.tabindex]=\"_isDisabled() ? null : 0\"\n     [attr.role]=\"_isDisabled() ? null : 'button'\">\n\n  <!--\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\n  -->\n  <div class=\"mat-sort-header-content\">\n    <ng-content></ng-content>\n  </div>\n\n  <!-- Disable animations while a current animation is running -->\n  @if (_renderArrow()) {\n    <div class=\"mat-sort-header-arrow\"\n        [@arrowOpacity]=\"_getArrowViewState()\"\n        [@arrowPosition]=\"_getArrowViewState()\"\n        [@allowChildren]=\"_getArrowDirectionState()\"\n        (@arrowPosition.start)=\"_disableViewStateAnimation = true\"\n        (@arrowPosition.done)=\"_disableViewStateAnimation = false\">\n      <div class=\"mat-sort-header-stem\"></div>\n      <div class=\"mat-sort-header-indicator\" [@indicator]=\"_getArrowDirectionState()\">\n        <div class=\"mat-sort-header-pointer-left\" [@leftPointer]=\"_getArrowDirectionState()\"></div>\n        <div class=\"mat-sort-header-pointer-right\" [@rightPointer]=\"_getArrowDirectionState()\"></div>\n        <div class=\"mat-sort-header-pointer-middle\"></div>\n      </div>\n    </div>\n  }\n</div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n})\nexport class MatSortModule {}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["_c0", "MatSortHeader_Conditional_3_Template", "rf", "ctx", "_r2", "ɵɵgetCurrentView", "i0", "ɵɵelementStart", "ɵɵlistener", "MatSortHeader_Conditional_3_Template_div_animation_arrowPosition_start_0_listener", "ɵɵrestoreView", "ctx_r1", "ɵɵnextContext", "ɵɵresetView", "_disableViewStateAnimation", "MatSortHeader_Conditional_3_Template_div_animation_arrowPosition_done_0_listener", "ctx_r3", "ɵɵelement", "ɵɵelementEnd", "ctx_r0", "ɵɵproperty", "_getArrowViewState", "_getArrowDirectionState", "ɵɵadvance", "_c1", "getSortDuplicateSortableIdError", "id", "Error", "getSortHeaderNotContainedWithinSortError", "getSortHeaderMissingIdError", "getSortInvalidDirectionError", "direction", "MAT_SORT_DEFAULT_OPTIONS", "InjectionToken", "_MatSortBase", "mixinInitialized", "mixinDisabled", "MatSort", "_direction", "ngDevMode", "disableClear", "_disableClear", "v", "coerceBooleanProperty", "constructor", "_defaultOptions", "sortables", "Map", "_stateChanges", "Subject", "start", "sortChange", "EventEmitter", "register", "sortable", "has", "set", "deregister", "delete", "sort", "active", "getNextSortDirection", "emit", "sortDirectionCycle", "getSortDirectionCycle", "nextDirectionIndex", "indexOf", "length", "ngOnInit", "_markInitialized", "ngOnChanges", "next", "ngOnDestroy", "complete", "ɵfac", "MatSort_Factory", "t", "ɵɵdirectiveInject", "ɵɵdefineDirective", "type", "selectors", "hostAttrs", "inputs", "disabled", "outputs", "exportAs", "features", "ɵɵInheritDefinitionFeature", "ɵɵNgOnChangesFeature", "ɵsetClassMetadata", "Directive", "args", "selector", "host", "Optional", "Inject", "Input", "Output", "sortOrder", "reverse", "push", "SORT_ANIMATION_TRANSITION", "AnimationDurations", "ENTERING", "AnimationCurves", "STANDARD_CURVE", "matSortAnimations", "indicator", "trigger", "state", "style", "transform", "transition", "animate", "leftPointer", "rightPointer", "arrowOpacity", "opacity", "arrowPosition", "keyframes", "allowChildren", "query", "animateChild", "optional", "MatSortHeaderIntl", "changes", "ɵprov", "ɵɵdefineInjectable", "token", "factory", "providedIn", "Injectable", "MAT_SORT_HEADER_INTL_PROVIDER_FACTORY", "parentIntl", "MAT_SORT_HEADER_INTL_PROVIDER", "provide", "deps", "SkipSelf", "useFactory", "_MatSortHeaderBase", "MatSortHeader", "sortActionDescription", "_sortActionDescription", "value", "_updateSortActionDescription", "_intl", "_changeDetectorRef", "_sort", "_columnDef", "_focusMonitor", "_elementRef", "_ariaDescriber", "defaultOptions", "_showIndicatorHint", "_viewState", "_arrowDirection", "_handleStateChanges", "name", "_updateArrowDirection", "_setAnimationTransitionState", "toState", "_isSorted", "_sortButton", "nativeElement", "querySelector", "ngAfterViewInit", "monitor", "subscribe", "origin", "newState", "_setIndicatorHintVisible", "markForCheck", "stopMonitoring", "_rerenderSubscription", "unsubscribe", "visible", "_isDisabled", "fromState", "viewState", "_toggleOnInteraction", "_handleClick", "_handleKeydown", "event", "keyCode", "SPACE", "ENTER", "preventDefault", "_getAriaSortAttribute", "_renderArrow", "newDescription", "removeDescription", "describe", "merge", "ChangeDetectorRef", "FocusMonitor", "ElementRef", "AriaDescriber", "ɵɵdefineComponent", "hostVars", "hostBindings", "MatSortHeader_HostBindings", "MatSortHeader_click_HostBindingHandler", "MatSortHeader_keydown_HostBindingHandler", "$event", "MatSortHeader_mouseenter_HostBindingHandler", "MatSortHeader_mouseleave_HostBindingHandler", "ɵɵattribute", "ɵɵclassProp", "attrs", "ngContentSelectors", "decls", "vars", "consts", "template", "MatSortHeader_Template", "ɵɵprojectionDef", "ɵɵprojection", "ɵɵtemplate", "ɵɵconditional", "styles", "encapsulation", "data", "animation", "changeDetection", "Component", "ViewEncapsulation", "None", "ChangeDetectionStrategy", "OnPush", "animations", "MatSortModule", "ɵɵdefineNgModule", "declarations", "imports", "MatCommonModule", "exports", "ɵinj", "ɵɵdefineInjector", "providers", "NgModule"]
}
